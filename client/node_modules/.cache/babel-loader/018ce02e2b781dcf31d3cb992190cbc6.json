{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString } from '../../utils';\nexport var ByteQRDataMode = function (QRDataMode) {\n  function ByteQRDataMode() {\n    QRDataMode.apply(this, arguments);\n  }\n\n  if (QRDataMode) ByteQRDataMode.__proto__ = QRDataMode;\n  ByteQRDataMode.prototype = Object.create(QRDataMode && QRDataMode.prototype);\n  ByteQRDataMode.prototype.constructor = ByteQRDataMode;\n\n  ByteQRDataMode.prototype.initProperties = function initProperties() {\n    QRDataMode.prototype.initProperties.call(this);\n    extend(this, {\n      bitsInCharacterCount: [8, 16, 16],\n      modeIndicator: \"0100\"\n    });\n  };\n\n  ByteQRDataMode.prototype.getValue = function getValue(character) {\n    var code = character.charCodeAt(0);\n\n    if (code <= 127 || 160 <= code && code <= 255) {\n      return code;\n    }\n\n    throw new Error(\"Unsupported character in QR Code: \\\"\" + character + \"\\\".\");\n  };\n\n  ByteQRDataMode.prototype.encode = function encode(str, version) {\n    var mode = this,\n        result = mode.getModeCountString(str.length, version);\n\n    for (var i = 0; i < str.length; i++) {\n      result += toBitsString(mode.getValue(str.charAt(i)), 8);\n    }\n\n    return result;\n  };\n\n  ByteQRDataMode.prototype.getStringBitsLength = function getStringBitsLength(inputLength, version) {\n    return 4 + this.getBitsCharacterCount(version) + 8 * inputLength;\n  };\n\n  return ByteQRDataMode;\n}(QRDataMode);","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/qrcode/encodings/data-modes/byte-data-mode.js"],"names":["QRDataMode","extend","toBitsString","ByteQRDataMode","apply","arguments","__proto__","prototype","Object","create","constructor","initProperties","call","bitsInCharacterCount","modeIndicator","getValue","character","code","charCodeAt","Error","encode","str","version","mode","result","getModeCountString","length","i","charAt","getStringBitsLength","inputLength","getBitsCharacterCount"],"mappings":"AAAA,SAASA,UAAT,QAA2B,gBAA3B;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SACIC,YADJ,QAEO,aAFP;AAIA,OAAO,IAAIC,cAAc,GAAI,UAAUH,UAAV,EAAsB;AAC/C,WAASG,cAAT,GAA2B;AACvBH,IAAAA,UAAU,CAACI,KAAX,CAAiB,IAAjB,EAAuBC,SAAvB;AACH;;AAED,MAAKL,UAAL,EAAkBG,cAAc,CAACG,SAAf,GAA2BN,UAA3B;AAClBG,EAAAA,cAAc,CAACI,SAAf,GAA2BC,MAAM,CAACC,MAAP,CAAeT,UAAU,IAAIA,UAAU,CAACO,SAAxC,CAA3B;AACAJ,EAAAA,cAAc,CAACI,SAAf,CAAyBG,WAAzB,GAAuCP,cAAvC;;AAEAA,EAAAA,cAAc,CAACI,SAAf,CAAyBI,cAAzB,GAA0C,SAASA,cAAT,GAA2B;AACjEX,IAAAA,UAAU,CAACO,SAAX,CAAqBI,cAArB,CAAoCC,IAApC,CAAyC,IAAzC;AAEAX,IAAAA,MAAM,CAAC,IAAD,EAAO;AACTY,MAAAA,oBAAoB,EAAE,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CADb;AAETC,MAAAA,aAAa,EAAE;AAFN,KAAP,CAAN;AAIH,GAPD;;AASAX,EAAAA,cAAc,CAACI,SAAf,CAAyBQ,QAAzB,GAAoC,SAASA,QAAT,CAAmBC,SAAnB,EAA8B;AAC9D,QAAIC,IAAI,GAAGD,SAAS,CAACE,UAAV,CAAqB,CAArB,CAAX;;AAEA,QAAID,IAAI,IAAI,GAAR,IAAgB,OAAOA,IAAP,IAAeA,IAAI,IAAI,GAA3C,EAAiD;AAC7C,aAAOA,IAAP;AACH;;AAED,UAAM,IAAIE,KAAJ,CAAW,yCAAyCH,SAAzC,GAAqD,KAAhE,CAAN;AACH,GARD;;AAUAb,EAAAA,cAAc,CAACI,SAAf,CAAyBa,MAAzB,GAAkC,SAASA,MAAT,CAAiBC,GAAjB,EAAsBC,OAAtB,EAA+B;AAC7D,QAAIC,IAAI,GAAG,IAAX;AAAA,QACIC,MAAM,GAAGD,IAAI,CAACE,kBAAL,CAAwBJ,GAAG,CAACK,MAA5B,EAAoCJ,OAApC,CADb;;AAGA,SAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACK,MAAxB,EAAgCC,CAAC,EAAjC,EAAqC;AACjCH,MAAAA,MAAM,IAAItB,YAAY,CAACqB,IAAI,CAACR,QAAL,CAAcM,GAAG,CAACO,MAAJ,CAAWD,CAAX,CAAd,CAAD,EAA+B,CAA/B,CAAtB;AACH;;AAED,WAAOH,MAAP;AACH,GATD;;AAWArB,EAAAA,cAAc,CAACI,SAAf,CAAyBsB,mBAAzB,GAA+C,SAASA,mBAAT,CAA8BC,WAA9B,EAA2CR,OAA3C,EAAoD;AAC/F,WAAO,IAAI,KAAKS,qBAAL,CAA2BT,OAA3B,CAAJ,GAA0C,IAAIQ,WAArD;AACH,GAFD;;AAIA,SAAO3B,cAAP;AACH,CA5C4B,CA4C3BH,UA5C2B,CAAtB","sourcesContent":["import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport {\n    toBitsString\n} from '../../utils';\n\nexport var ByteQRDataMode = (function (QRDataMode) {\n    function ByteQRDataMode () {\n        QRDataMode.apply(this, arguments);\n    }\n\n    if ( QRDataMode ) ByteQRDataMode.__proto__ = QRDataMode;\n    ByteQRDataMode.prototype = Object.create( QRDataMode && QRDataMode.prototype );\n    ByteQRDataMode.prototype.constructor = ByteQRDataMode;\n\n    ByteQRDataMode.prototype.initProperties = function initProperties () {\n        QRDataMode.prototype.initProperties.call(this);\n\n        extend(this, {\n            bitsInCharacterCount: [8, 16, 16],\n            modeIndicator: \"0100\"\n        });\n    };\n\n    ByteQRDataMode.prototype.getValue = function getValue (character) {\n        var code = character.charCodeAt(0);\n\n        if (code <= 127 || (160 <= code && code <= 255)) {\n            return code;\n        }\n\n        throw new Error((\"Unsupported character in QR Code: \\\"\" + character + \"\\\".\"));\n    };\n\n    ByteQRDataMode.prototype.encode = function encode (str, version) {\n        var mode = this,\n            result = mode.getModeCountString(str.length, version);\n\n        for (var i = 0; i < str.length; i++) {\n            result += toBitsString(mode.getValue(str.charAt(i)), 8);\n        }\n\n        return result;\n    };\n\n    ByteQRDataMode.prototype.getStringBitsLength = function getStringBitsLength (inputLength, version) {\n        return 4 + this.getBitsCharacterCount(version) + 8 * inputLength;\n    };\n\n    return ByteQRDataMode;\n}(QRDataMode));\n"]},"metadata":{},"sourceType":"module"}
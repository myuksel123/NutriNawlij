{"ast":null,"code":"import { Encoding } from './encoding';\nimport { setDefaultOptions } from '../../common';\nvar extend = Object.assign;\nexport var Code11 = function (Encoding) {\n  function Code11() {\n    Encoding.apply(this, arguments);\n  }\n\n  if (Encoding) Code11.__proto__ = Encoding;\n  Code11.prototype = Object.create(Encoding && Encoding.prototype);\n  Code11.prototype.constructor = Code11;\n\n  Code11.prototype.initProperties = function initProperties() {\n    Encoding.prototype.initProperties.call(this);\n    extend(this, {\n      name: \"Code 11\",\n      characterMap: [\"111121\", \"211121\", \"121121\", \"221111\", \"112121\", \"212111\", \"122111\", \"111221\", \"211211\", \"211111\", \"112111\"],\n      cCheckSumTotal: 10,\n      kCheckSumTotal: 9,\n      kCheckSumMinLength: 10,\n      checkSumMod: 11,\n      DASH_VALUE: 10,\n      DASH: \"-\",\n      START: \"112211\",\n      STOP: \"11221\"\n    });\n  };\n\n  Code11.prototype.initValue = function initValue(value, width) {\n    this.pattern = [];\n    this.value = value;\n    this.width = width;\n    this.totalUnits = 0;\n  };\n\n  Code11.prototype.addData = function addData() {\n    var this$1 = this;\n    var value = this.value;\n    this.addPattern(this.START);\n\n    for (var i = 0; i < value.length; i++) {\n      this$1.addCharacter(value.charAt(i));\n    }\n\n    if (this.options.addCheckSum) {\n      this.addCheckSum();\n    }\n\n    this.addPattern(this.STOP);\n    this.setBaseUnit();\n  };\n\n  Code11.prototype.setBaseUnit = function setBaseUnit() {\n    this.baseUnit = this.width / (this.totalUnits + this.quietZoneLength);\n  };\n\n  Code11.prototype.addCheckSum = function addCheckSum() {\n    var value = this.value;\n    var length = value.length;\n    var cValue = this.getWeightedSum(value, length, this.cCheckSumTotal) % this.checkSumMod;\n    this.checksum = String(cValue);\n    this.addPattern(this.characterMap[cValue]);\n    length++;\n\n    if (length >= this.kCheckSumMinLength) {\n      var kValue = (cValue + this.getWeightedSum(value, length, this.kCheckSumTotal)) % this.checkSumMod;\n      this.checksum += kValue;\n      this.addPattern(this.characterMap[kValue]);\n    }\n  };\n\n  Code11.prototype.getWeightedSum = function getWeightedSum(value, length, total) {\n    var this$1 = this;\n    var weightedSum = 0;\n\n    for (var i = 0; i < value.length; i++) {\n      weightedSum += this$1.weightedValue(this$1.getValue(value.charAt(i)), length, i, total);\n    }\n\n    return weightedSum;\n  };\n\n  Code11.prototype.weightedValue = function weightedValue(value, length, index, total) {\n    var weight = (length - index) % total || total;\n    return weight * value;\n  };\n\n  Code11.prototype.getValue = function getValue(character) {\n    if (!isNaN(character)) {\n      return parseInt(character, 10);\n    } else if (character !== this.DASH) {\n      this.invalidCharacterError(character);\n    }\n\n    return this.DASH_VALUE;\n  };\n\n  Code11.prototype.addCharacter = function addCharacter(character) {\n    var value = this.getValue(character);\n    var pattern = this.characterMap[value];\n    this.addPattern(pattern);\n  };\n\n  Code11.prototype.addPattern = function addPattern(pattern) {\n    var this$1 = this;\n    var value;\n\n    for (var i = 0; i < pattern.length; i++) {\n      value = parseInt(pattern.charAt(i), 10);\n      this$1.pattern.push(value);\n      this$1.totalUnits += value;\n    }\n  };\n\n  return Code11;\n}(Encoding);\nsetDefaultOptions(Code11, {\n  addCheckSum: true\n});","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/barcode/encodings/code11.js"],"names":["Encoding","setDefaultOptions","extend","Object","assign","Code11","apply","arguments","__proto__","prototype","create","constructor","initProperties","call","name","characterMap","cCheckSumTotal","kCheckSumTotal","kCheckSumMinLength","checkSumMod","DASH_VALUE","DASH","START","STOP","initValue","value","width","pattern","totalUnits","addData","this$1","addPattern","i","length","addCharacter","charAt","options","addCheckSum","setBaseUnit","baseUnit","quietZoneLength","cValue","getWeightedSum","checksum","String","kValue","total","weightedSum","weightedValue","getValue","index","weight","character","isNaN","parseInt","invalidCharacterError","push"],"mappings":"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","sourcesContent":["import { Encoding } from './encoding';\nimport { setDefaultOptions } from '../../common';\n\nvar extend = Object.assign;\n\nexport var Code11 = (function (Encoding) {\n    function Code11 () {\n        Encoding.apply(this, arguments);\n    }\n\n    if ( Encoding ) Code11.__proto__ = Encoding;\n    Code11.prototype = Object.create( Encoding && Encoding.prototype );\n    Code11.prototype.constructor = Code11;\n\n    Code11.prototype.initProperties = function initProperties () {\n        Encoding.prototype.initProperties.call(this);\n\n        extend(this, {\n            name: \"Code 11\",\n            characterMap: [\"111121\", \"211121\", \"121121\", \"221111\", \"112121\", \"212111\", \"122111\", \"111221\", \"211211\", \"211111\", \"112111\"],\n            cCheckSumTotal: 10,\n            kCheckSumTotal: 9,\n            kCheckSumMinLength: 10,\n            checkSumMod: 11,\n            DASH_VALUE: 10,\n            DASH: \"-\",\n            START: \"112211\",\n            STOP: \"11221\"\n        });\n    };\n\n    Code11.prototype.initValue = function initValue (value, width) {\n        this.pattern = [];\n        this.value = value;\n        this.width = width;\n        this.totalUnits = 0;\n    };\n\n    Code11.prototype.addData = function addData () {\n        var this$1 = this;\n\n        var value = this.value;\n\n        this.addPattern(this.START);\n\n        for (var i = 0; i < value.length; i++) {\n            this$1.addCharacter(value.charAt(i));\n        }\n\n        if (this.options.addCheckSum) {\n            this.addCheckSum();\n        }\n\n        this.addPattern(this.STOP);\n        this.setBaseUnit();\n    };\n\n    Code11.prototype.setBaseUnit = function setBaseUnit () {\n        this.baseUnit = this.width / (this.totalUnits + this.quietZoneLength);\n    };\n\n    Code11.prototype.addCheckSum = function addCheckSum () {\n        var value = this.value;\n        var length = value.length;\n        var cValue = this.getWeightedSum(value, length, this.cCheckSumTotal) % this.checkSumMod;\n\n        this.checksum = String(cValue);\n        this.addPattern(this.characterMap[cValue]);\n\n        length++;\n\n        if (length >= this.kCheckSumMinLength) {\n            var kValue = (cValue + this.getWeightedSum(value, length, this.kCheckSumTotal)) % this.checkSumMod;\n            this.checksum += kValue;\n            this.addPattern(this.characterMap[kValue]);\n        }\n    };\n\n    Code11.prototype.getWeightedSum = function getWeightedSum (value, length, total) {\n        var this$1 = this;\n\n        var weightedSum = 0;\n\n        for (var i = 0; i < value.length; i++) {\n            weightedSum += this$1.weightedValue(this$1.getValue(value.charAt(i)), length, i, total);\n        }\n\n        return weightedSum;\n    };\n\n    Code11.prototype.weightedValue = function weightedValue (value, length, index, total) {\n        var weight = (length - index) % total || total;\n        return weight * value;\n    };\n\n    Code11.prototype.getValue = function getValue (character) {\n        if (!isNaN(character)) {\n            return parseInt(character, 10);\n        } else if (character !== this.DASH) {\n            this.invalidCharacterError(character);\n        }\n\n        return this.DASH_VALUE;\n    };\n\n    Code11.prototype.addCharacter = function addCharacter (character) {\n        var value = this.getValue(character);\n        var pattern = this.characterMap[value];\n\n        this.addPattern(pattern);\n    };\n\n    Code11.prototype.addPattern = function addPattern (pattern) {\n        var this$1 = this;\n\n        var value;\n\n        for (var i = 0; i < pattern.length; i++) {\n            value = parseInt(pattern.charAt(i), 10);\n            this$1.pattern.push(value);\n            this$1.totalUnits += value;\n        }\n    };\n\n    return Code11;\n}(Encoding));\n\nsetDefaultOptions(Code11, {\n    addCheckSum: true\n});\n"]},"metadata":{},"sourceType":"module"}
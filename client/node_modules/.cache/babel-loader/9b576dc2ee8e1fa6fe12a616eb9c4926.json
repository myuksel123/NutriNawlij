{"ast":null,"code":"import { Encodings } from './encodings/main';\n\nvar validate = function (encoding, size, prefix) {\n  return function (value) {\n    try {\n      encoding.encode(prefix + value, size.width, size.height);\n    } catch (error) {\n      return {\n        valid: false,\n        error: error\n      };\n    }\n\n    return {\n      valid: true\n    };\n  };\n}; // A default size for encodings, so the validator can check only the value if no size is provided.\n\n\nvar fallbackSize = {\n  width: 500,\n  height: 100\n};\n\nfunction barcodeValidator(type, size) {\n  if (size === void 0) size = fallbackSize;\n\n  if (!type) {\n    throw new Error(\"Please specify barcode type to validate.\");\n  }\n\n  var resolvedType = type.toLowerCase();\n  var prefix = '';\n\n  if (resolvedType === 'upca') {\n    resolvedType = 'ean13';\n    prefix = '0';\n  } else if (resolvedType === 'upce') {\n    resolvedType = 'ean8';\n    prefix = '0';\n  }\n\n  if (!Encodings[resolvedType]) {\n    throw new Error(\"Encoding '\" + type + \"' is not supported.\");\n  }\n\n  var encoding = new Encodings[resolvedType]();\n  return validate(encoding, size, prefix);\n}\n\nexport default barcodeValidator;","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/barcode/barcode-validator.js"],"names":["Encodings","validate","encoding","size","prefix","value","encode","width","height","error","valid","fallbackSize","barcodeValidator","type","Error","resolvedType","toLowerCase"],"mappings":"AAAA,SAASA,SAAT,QAA0B,kBAA1B;;AAEA,IAAIC,QAAQ,GAAG,UAAUC,QAAV,EAAoBC,IAApB,EAA0BC,MAA1B,EAAkC;AAAE,SAAO,UAAUC,KAAV,EAAiB;AACvE,QAAI;AACAH,MAAAA,QAAQ,CAACI,MAAT,CACIF,MAAM,GAAGC,KADb,EAEIF,IAAI,CAACI,KAFT,EAGIJ,IAAI,CAACK,MAHT;AAKH,KAND,CAME,OAAOC,KAAP,EAAc;AACZ,aAAO;AACHC,QAAAA,KAAK,EAAE,KADJ;AAEHD,QAAAA,KAAK,EAAEA;AAFJ,OAAP;AAIH;;AAED,WAAO;AACHC,MAAAA,KAAK,EAAE;AADJ,KAAP;AAGH,GAjBkD;AAiB/C,CAjBJ,C,CAmBA;;;AACA,IAAIC,YAAY,GAAG;AAAEJ,EAAAA,KAAK,EAAE,GAAT;AAAcC,EAAAA,MAAM,EAAE;AAAtB,CAAnB;;AAEA,SAASI,gBAAT,CAA0BC,IAA1B,EAAgCV,IAAhC,EAAsC;AAClC,MAAKA,IAAI,KAAK,KAAK,CAAnB,EAAuBA,IAAI,GAAGQ,YAAP;;AAEvB,MAAI,CAACE,IAAL,EAAW;AACP,UAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAED,MAAIC,YAAY,GAAGF,IAAI,CAACG,WAAL,EAAnB;AACA,MAAIZ,MAAM,GAAG,EAAb;;AACA,MAAIW,YAAY,KAAK,MAArB,EAA6B;AACzBA,IAAAA,YAAY,GAAG,OAAf;AACAX,IAAAA,MAAM,GAAG,GAAT;AACH,GAHD,MAGO,IAAIW,YAAY,KAAK,MAArB,EAA6B;AAChCA,IAAAA,YAAY,GAAG,MAAf;AACAX,IAAAA,MAAM,GAAG,GAAT;AACH;;AAED,MAAI,CAACJ,SAAS,CAACe,YAAD,CAAd,EAA8B;AAC1B,UAAM,IAAID,KAAJ,CAAW,eAAeD,IAAf,GAAsB,qBAAjC,CAAN;AACH;;AAED,MAAIX,QAAQ,GAAG,IAAIF,SAAS,CAACe,YAAD,CAAb,EAAf;AACA,SAAOd,QAAQ,CAACC,QAAD,EAAWC,IAAX,EAAiBC,MAAjB,CAAf;AACH;;AAED,eAAeQ,gBAAf","sourcesContent":["import { Encodings } from './encodings/main';\n\nvar validate = function (encoding, size, prefix) { return function (value) {\n    try {\n        encoding.encode(\n            prefix + value,\n            size.width,\n            size.height\n        );\n    } catch (error) {\n        return {\n            valid: false,\n            error: error\n        };\n    }\n\n    return {\n        valid: true\n    };\n}; };\n\n// A default size for encodings, so the validator can check only the value if no size is provided.\nvar fallbackSize = { width: 500, height: 100 };\n\nfunction barcodeValidator(type, size) {\n    if ( size === void 0 ) size = fallbackSize;\n\n    if (!type) {\n        throw new Error(\"Please specify barcode type to validate.\");\n    }\n\n    var resolvedType = type.toLowerCase();\n    var prefix = '';\n    if (resolvedType === 'upca') {\n        resolvedType = 'ean13';\n        prefix = '0';\n    } else if (resolvedType === 'upce') {\n        resolvedType = 'ean8';\n        prefix = '0';\n    }\n\n    if (!Encodings[resolvedType]) {\n        throw new Error((\"Encoding '\" + type + \"' is not supported.\"));\n    }\n\n    var encoding = new Encodings[resolvedType]();\n    return validate(encoding, size, prefix);\n}\n\nexport default barcodeValidator;\n"]},"metadata":{},"sourceType":"module"}
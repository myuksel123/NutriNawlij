{"ast":null,"code":"import { deepExtend, eventElement, grep, inArray, setDefaultOptions, createHashSet } from '../../common';\nimport { DATE } from '../../common/constants';\nimport { CategoryAxis, DateCategoryAxis, Point } from '../../core';\nimport { HEATMAP } from '../constants';\nimport HeatmapChart from '../heatmap-chart/heatmap-chart';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\nimport SeriesBinder from '../series-binder';\nimport { appendIfNotNull, equalsIgnoreCase, filterSeriesByType, singleItemOrArray } from '../utils';\nimport PlotAreaBase from './plotarea-base';\n\nvar HeatmapPlotArea = function (PlotAreaBase) {\n  function HeatmapPlotArea() {\n    PlotAreaBase.apply(this, arguments);\n  }\n\n  if (PlotAreaBase) HeatmapPlotArea.__proto__ = PlotAreaBase;\n  HeatmapPlotArea.prototype = Object.create(PlotAreaBase && PlotAreaBase.prototype);\n  HeatmapPlotArea.prototype.constructor = HeatmapPlotArea;\n\n  HeatmapPlotArea.prototype.initFields = function initFields() {\n    this.namedXAxes = {};\n    this.namedYAxes = {};\n  };\n\n  HeatmapPlotArea.prototype.render = function render(panes) {\n    if (panes === void 0) panes = this.panes;\n    this.bindCategories();\n    this.createAxes(panes);\n    this.createCharts(panes);\n    this.createAxisLabels();\n  };\n\n  HeatmapPlotArea.prototype.bindCategories = function bindCategories() {\n    var this$1 = this;\n    var series = this.srcSeries || this.series;\n\n    for (var i = 0; i < series.length; i++) {\n      var currentSeries = series[i];\n      var data = currentSeries.data || [];\n      var ref = this$1.seriesAxes(currentSeries);\n      var xAxis = ref.xAxis;\n      var yAxis = ref.yAxis;\n      var xCategories = createHashSet(xAxis.categories || []);\n      var yCategories = createHashSet(yAxis.categories || []);\n\n      for (var pointIndex = 0; pointIndex < data.length; pointIndex++) {\n        var ref$1 = SeriesBinder.current.bindPoint(currentSeries, pointIndex).valueFields;\n        var x = ref$1.x;\n        var y = ref$1.y;\n\n        if (!xCategories.has(x)) {\n          xCategories.add(x);\n        }\n\n        if (!yCategories.has(y)) {\n          yCategories.add(y);\n        }\n      }\n\n      xAxis.categories = xCategories.values();\n      yAxis.categories = yCategories.values();\n    }\n  };\n\n  HeatmapPlotArea.prototype.createCharts = function createCharts(panes) {\n    var this$1 = this;\n    var seriesByPane = this.groupSeriesByPane();\n\n    for (var i = 0; i < panes.length; i++) {\n      var pane = panes[i];\n      var paneSeries = seriesByPane[pane.options.name || \"default\"] || [];\n      this$1.addToLegend(paneSeries);\n      var filteredSeries = this$1.filterVisibleSeries(paneSeries);\n\n      if (!filteredSeries) {\n        continue;\n      }\n\n      this$1.createHeatmapChart(filterSeriesByType(filteredSeries, [HEATMAP]), pane);\n    }\n  };\n\n  HeatmapPlotArea.prototype.createHeatmapChart = function createHeatmapChart(series, pane) {\n    var chart = new HeatmapChart(this, {\n      series: series\n    });\n    this.appendChart(chart, pane);\n  };\n\n  HeatmapPlotArea.prototype.seriesPaneName = function seriesPaneName(series) {\n    var options = this.options;\n    var xAxisName = series.xAxis;\n    var xAxisOptions = [].concat(options.xAxis);\n    var xAxis = grep(xAxisOptions, function (a) {\n      return a.name === xAxisName;\n    })[0];\n    var yAxisName = series.yAxis;\n    var yAxisOptions = [].concat(options.yAxis);\n    var yAxis = grep(yAxisOptions, function (a) {\n      return a.name === yAxisName;\n    })[0];\n    var panes = options.panes || [{}];\n    var defaultPaneName = panes[0].name || \"default\";\n    var paneName = (xAxis || {}).pane || (yAxis || {}).pane || defaultPaneName;\n    return paneName;\n  };\n\n  HeatmapPlotArea.prototype.seriesAxes = function seriesAxes(series) {\n    var xAxis;\n    var yAxis;\n    var options = this.options;\n    var xAxisOptions = [].concat(options.xAxis);\n    var xAxisName = series.xAxis;\n\n    if (xAxisName) {\n      xAxis = xAxisOptions.find(function (axis) {\n        return axis.name === xAxisName;\n      });\n    } else {\n      xAxis = xAxisOptions[0];\n    }\n\n    var yAxisOptions = [].concat(options.yAxis);\n    var yAxisName = series.yAxis;\n\n    if (yAxisName) {\n      yAxis = yAxisOptions.find(function (axis) {\n        return axis.name === yAxisName;\n      });\n    } else {\n      yAxis = yAxisOptions[0];\n    }\n\n    if (!xAxis) {\n      throw new Error(\"Unable to locate X axis with name \" + xAxisName);\n    }\n\n    if (!yAxis) {\n      throw new Error(\"Unable to locate Y axis with name \" + yAxisName);\n    }\n\n    return {\n      xAxis: xAxis,\n      yAxis: yAxis\n    };\n  };\n\n  HeatmapPlotArea.prototype.createAxisLabels = function createAxisLabels() {\n    var axes = this.axes;\n\n    for (var i = 0; i < axes.length; i++) {\n      axes[i].createLabels();\n    }\n  };\n\n  HeatmapPlotArea.prototype.createXYAxis = function createXYAxis(options, vertical, axisIndex) {\n    var axisName = options.name;\n    var namedAxes = vertical ? this.namedYAxes : this.namedXAxes;\n    var axisOptions = Object.assign({\n      axisCrossingValue: 0\n    }, options, {\n      vertical: vertical,\n      reverse: vertical || this.chartService.rtl ? !options.reverse : options.reverse,\n      justified: false\n    });\n    var firstCategory = axisOptions.categories ? axisOptions.categories[0] : null;\n    var typeSamples = [axisOptions.min, axisOptions.max, firstCategory];\n    var series = this.series;\n\n    for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n      var currentSeries = series[seriesIx];\n      var seriesAxisName = currentSeries[vertical ? \"yAxis\" : \"xAxis\"];\n\n      if (seriesAxisName === axisOptions.name || axisIndex === 0 && !seriesAxisName) {\n        var firstPointValue = SeriesBinder.current.bindPoint(currentSeries, 0).valueFields;\n        typeSamples.push(firstPointValue[vertical ? \"y\" : \"x\"]);\n        break;\n      }\n    }\n\n    var inferredDate;\n\n    for (var i = 0; i < typeSamples.length; i++) {\n      if (typeSamples[i] instanceof Date) {\n        inferredDate = true;\n        break;\n      }\n    }\n\n    var axisType;\n\n    if (equalsIgnoreCase(axisOptions.type, DATE) || !axisOptions.type && inferredDate) {\n      axisType = DateCategoryAxis;\n    } else {\n      axisType = CategoryAxis;\n    }\n\n    var axis = new axisType(axisOptions, this.chartService);\n    axis.axisIndex = axisIndex;\n\n    if (axisName) {\n      if (namedAxes[axisName]) {\n        throw new Error((vertical ? \"Y\" : \"X\") + \" axis with name \" + axisName + \" is already defined\");\n      }\n\n      namedAxes[axisName] = axis;\n    }\n\n    this.appendAxis(axis);\n    axis.mapCategories();\n    return axis;\n  };\n\n  HeatmapPlotArea.prototype.createAxes = function createAxes(panes) {\n    var this$1 = this;\n    var options = this.options;\n    var xAxesOptions = [].concat(options.xAxis);\n    var xAxes = [];\n    var yAxesOptions = [].concat(options.yAxis);\n    var yAxes = [];\n\n    for (var idx = 0; idx < xAxesOptions.length; idx++) {\n      var axisPane = this$1.findPane(xAxesOptions[idx].pane);\n\n      if (inArray(axisPane, panes)) {\n        xAxes.push(this$1.createXYAxis(xAxesOptions[idx], false, idx));\n      }\n    }\n\n    for (var idx$1 = 0; idx$1 < yAxesOptions.length; idx$1++) {\n      var axisPane$1 = this$1.findPane(yAxesOptions[idx$1].pane);\n\n      if (inArray(axisPane$1, panes)) {\n        yAxes.push(this$1.createXYAxis(yAxesOptions[idx$1], true, idx$1));\n      }\n    }\n\n    this.axisX = this.axisX || xAxes[0];\n    this.axisY = this.axisY || yAxes[0];\n  };\n\n  HeatmapPlotArea.prototype.removeAxis = function removeAxis(axis) {\n    var axisName = axis.options.name;\n    PlotAreaBase.prototype.removeAxis.call(this, axis);\n\n    if (axis.options.vertical) {\n      delete this.namedYAxes[axisName];\n    } else {\n      delete this.namedXAxes[axisName];\n    }\n\n    if (axis === this.axisX) {\n      delete this.axisX;\n    }\n\n    if (axis === this.axisY) {\n      delete this.axisY;\n    }\n  };\n\n  HeatmapPlotArea.prototype._dispatchEvent = function _dispatchEvent(chart, e, eventType) {\n    var coords = chart._eventCoordinates(e);\n\n    var point = new Point(coords.x, coords.y);\n    var allAxes = this.axes;\n    var length = allAxes.length;\n    var xValues = [];\n    var yValues = [];\n\n    for (var i = 0; i < length; i++) {\n      var axis = allAxes[i];\n      var values = axis.options.vertical ? yValues : xValues;\n      appendIfNotNull(values, axis.getCategory(point));\n    }\n\n    if (xValues.length > 0 && yValues.length > 0) {\n      chart.trigger(eventType, {\n        element: eventElement(e),\n        originalEvent: e,\n        x: singleItemOrArray(xValues),\n        y: singleItemOrArray(yValues)\n      });\n    }\n  };\n\n  HeatmapPlotArea.prototype.updateAxisOptions = function updateAxisOptions$1(axis, options) {\n    var vertical = axis.options.vertical;\n    var axes = this.groupAxes(this.panes);\n    var index = (vertical ? axes.y : axes.x).indexOf(axis);\n    updateAxisOptions(this.options, index, vertical, options);\n    updateAxisOptions(this.originalOptions, index, vertical, options);\n  };\n\n  HeatmapPlotArea.prototype.crosshairOptions = function crosshairOptions(axis) {\n    // Stack the crosshair above the series points.\n    return Object.assign({}, axis.options.crosshair, {\n      zIndex: 0\n    });\n  };\n\n  return HeatmapPlotArea;\n}(PlotAreaBase);\n\nfunction updateAxisOptions(targetOptions, axisIndex, vertical, options) {\n  var axisOptions = [].concat(vertical ? targetOptions.yAxis : targetOptions.xAxis)[axisIndex];\n  deepExtend(axisOptions, options);\n}\n\nsetDefaultOptions(HeatmapPlotArea, {\n  xAxis: {},\n  yAxis: {}\n});\ndeepExtend(HeatmapPlotArea.prototype, PlotAreaEventsMixin);\nexport default HeatmapPlotArea;","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/chart/plotarea/heatmap-plotarea.js"],"names":["deepExtend","eventElement","grep","inArray","setDefaultOptions","createHashSet","DATE","CategoryAxis","DateCategoryAxis","Point","HEATMAP","HeatmapChart","PlotAreaEventsMixin","SeriesBinder","appendIfNotNull","equalsIgnoreCase","filterSeriesByType","singleItemOrArray","PlotAreaBase","HeatmapPlotArea","apply","arguments","__proto__","prototype","Object","create","constructor","initFields","namedXAxes","namedYAxes","render","panes","bindCategories","createAxes","createCharts","createAxisLabels","this$1","series","srcSeries","i","length","currentSeries","data","ref","seriesAxes","xAxis","yAxis","xCategories","categories","yCategories","pointIndex","ref$1","current","bindPoint","valueFields","x","y","has","add","values","seriesByPane","groupSeriesByPane","pane","paneSeries","options","name","addToLegend","filteredSeries","filterVisibleSeries","createHeatmapChart","chart","appendChart","seriesPaneName","xAxisName","xAxisOptions","concat","a","yAxisName","yAxisOptions","defaultPaneName","paneName","find","axis","Error","axes","createLabels","createXYAxis","vertical","axisIndex","axisName","namedAxes","axisOptions","assign","axisCrossingValue","reverse","chartService","rtl","justified","firstCategory","typeSamples","min","max","seriesIx","seriesAxisName","firstPointValue","push","inferredDate","Date","axisType","type","appendAxis","mapCategories","xAxesOptions","xAxes","yAxesOptions","yAxes","idx","axisPane","findPane","idx$1","axisPane$1","axisX","axisY","removeAxis","call","_dispatchEvent","e","eventType","coords","_eventCoordinates","point","allAxes","xValues","yValues","getCategory","trigger","element","originalEvent","updateAxisOptions","updateAxisOptions$1","groupAxes","index","indexOf","originalOptions","crosshairOptions","crosshair","zIndex","targetOptions"],"mappings":"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","sourcesContent":["import { deepExtend, eventElement, grep, inArray, setDefaultOptions, createHashSet } from '../../common';\nimport { DATE } from '../../common/constants';\nimport { CategoryAxis, DateCategoryAxis, Point } from '../../core';\nimport { HEATMAP } from '../constants';\nimport HeatmapChart from '../heatmap-chart/heatmap-chart';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\nimport SeriesBinder from '../series-binder';\nimport { appendIfNotNull, equalsIgnoreCase, filterSeriesByType, singleItemOrArray } from '../utils';\nimport PlotAreaBase from './plotarea-base';\n\n\nvar HeatmapPlotArea = (function (PlotAreaBase) {\n    function HeatmapPlotArea () {\n        PlotAreaBase.apply(this, arguments);\n    }\n\n    if ( PlotAreaBase ) HeatmapPlotArea.__proto__ = PlotAreaBase;\n    HeatmapPlotArea.prototype = Object.create( PlotAreaBase && PlotAreaBase.prototype );\n    HeatmapPlotArea.prototype.constructor = HeatmapPlotArea;\n\n    HeatmapPlotArea.prototype.initFields = function initFields () {\n        this.namedXAxes = {};\n        this.namedYAxes = {};\n    };\n\n    HeatmapPlotArea.prototype.render = function render (panes) {\n        if ( panes === void 0 ) panes = this.panes;\n\n        this.bindCategories();\n        this.createAxes(panes);\n        this.createCharts(panes);\n        this.createAxisLabels();\n    };\n\n    HeatmapPlotArea.prototype.bindCategories = function bindCategories () {\n        var this$1 = this;\n\n        var series = this.srcSeries || this.series;\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            var data = currentSeries.data || [];\n            var ref = this$1.seriesAxes(currentSeries);\n            var xAxis = ref.xAxis;\n            var yAxis = ref.yAxis;\n\n            var xCategories = createHashSet(xAxis.categories || []);\n            var yCategories = createHashSet(yAxis.categories || []);\n\n            for (var pointIndex = 0; pointIndex < data.length; pointIndex++) {\n                var ref$1 = SeriesBinder.current.bindPoint(currentSeries, pointIndex).valueFields;\n                var x = ref$1.x;\n                var y = ref$1.y;\n\n                if (!xCategories.has(x)) {\n                    xCategories.add(x);\n                }\n\n                if (!yCategories.has(y)) {\n                    yCategories.add(y);\n                }\n            }\n\n            xAxis.categories = xCategories.values();\n            yAxis.categories = yCategories.values();\n        }\n    };\n\n    HeatmapPlotArea.prototype.createCharts = function createCharts (panes) {\n        var this$1 = this;\n\n        var seriesByPane = this.groupSeriesByPane();\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            var paneSeries = seriesByPane[pane.options.name || \"default\"] || [];\n            this$1.addToLegend(paneSeries);\n            var filteredSeries = this$1.filterVisibleSeries(paneSeries);\n\n            if (!filteredSeries) {\n                continue;\n            }\n\n            this$1.createHeatmapChart(\n                filterSeriesByType(filteredSeries, [ HEATMAP ]),\n                pane\n            );\n        }\n    };\n\n    HeatmapPlotArea.prototype.createHeatmapChart = function createHeatmapChart (series, pane) {\n        var chart = new HeatmapChart(this, {\n            series: series\n        });\n\n        this.appendChart(chart, pane);\n    };\n\n    HeatmapPlotArea.prototype.seriesPaneName = function seriesPaneName (series) {\n        var options = this.options;\n        var xAxisName = series.xAxis;\n        var xAxisOptions = [].concat(options.xAxis);\n        var xAxis = grep(xAxisOptions, function(a) { return a.name === xAxisName; })[0];\n        var yAxisName = series.yAxis;\n        var yAxisOptions = [].concat(options.yAxis);\n        var yAxis = grep(yAxisOptions, function(a) { return a.name === yAxisName; })[0];\n        var panes = options.panes || [ {} ];\n        var defaultPaneName = panes[0].name || \"default\";\n        var paneName = (xAxis || {}).pane || (yAxis || {}).pane || defaultPaneName;\n\n        return paneName;\n    };\n\n    HeatmapPlotArea.prototype.seriesAxes = function seriesAxes (series) {\n        var xAxis;\n        var yAxis;\n\n        var options = this.options;\n\n        var xAxisOptions = [].concat(options.xAxis);\n        var xAxisName = series.xAxis;\n        if (xAxisName) {\n            xAxis = xAxisOptions.find(function (axis) { return axis.name === xAxisName; });\n        } else {\n            xAxis = xAxisOptions[0];\n        }\n\n        var yAxisOptions = [].concat(options.yAxis);\n        var yAxisName = series.yAxis;\n        if (yAxisName) {\n            yAxis = yAxisOptions.find(function (axis) { return axis.name === yAxisName; });\n        } else {\n            yAxis = yAxisOptions[0];\n        }\n\n        if (!xAxis) {\n            throw new Error(\"Unable to locate X axis with name \" + xAxisName);\n        }\n\n        if (!yAxis) {\n            throw new Error(\"Unable to locate Y axis with name \" + yAxisName);\n        }\n\n        return { xAxis: xAxis, yAxis: yAxis };\n    };\n\n    HeatmapPlotArea.prototype.createAxisLabels = function createAxisLabels () {\n        var axes = this.axes;\n        for (var i = 0; i < axes.length; i++) {\n            axes[i].createLabels();\n        }\n    };\n\n    HeatmapPlotArea.prototype.createXYAxis = function createXYAxis (options, vertical, axisIndex) {\n        var axisName = options.name;\n        var namedAxes = vertical ? this.namedYAxes : this.namedXAxes;\n        var axisOptions = Object.assign({\n            axisCrossingValue: 0\n        }, options, {\n            vertical: vertical,\n            reverse: (vertical || this.chartService.rtl) ? !options.reverse : options.reverse,\n            justified: false\n        });\n        var firstCategory = axisOptions.categories ? axisOptions.categories[0] : null;\n        var typeSamples = [ axisOptions.min, axisOptions.max, firstCategory ];\n        var series = this.series;\n\n        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {\n            var currentSeries = series[seriesIx];\n            var seriesAxisName = currentSeries[vertical ? \"yAxis\" : \"xAxis\"];\n            if ((seriesAxisName === axisOptions.name) || (axisIndex === 0 && !seriesAxisName)) {\n                var firstPointValue = SeriesBinder.current.bindPoint(currentSeries, 0).valueFields;\n                typeSamples.push(firstPointValue[vertical ? \"y\" : \"x\"]);\n\n                break;\n            }\n        }\n\n        var inferredDate;\n\n        for (var i = 0; i < typeSamples.length; i++) {\n            if (typeSamples[i] instanceof Date) {\n                inferredDate = true;\n                break;\n            }\n        }\n\n        var axisType;\n        if (equalsIgnoreCase(axisOptions.type, DATE) || (!axisOptions.type && inferredDate)) {\n            axisType = DateCategoryAxis;\n        } else {\n            axisType = CategoryAxis;\n        }\n\n        var axis = new axisType(axisOptions, this.chartService);\n        axis.axisIndex = axisIndex;\n\n        if (axisName) {\n            if (namedAxes[axisName]) {\n                throw new Error(((vertical ? \"Y\" : \"X\") + \" axis with name \" + axisName + \" is already defined\"));\n            }\n            namedAxes[axisName] = axis;\n        }\n\n        this.appendAxis(axis);\n        axis.mapCategories();\n\n        return axis;\n    };\n\n    HeatmapPlotArea.prototype.createAxes = function createAxes (panes) {\n        var this$1 = this;\n\n        var options = this.options;\n        var xAxesOptions = [].concat(options.xAxis);\n        var xAxes = [];\n        var yAxesOptions = [].concat(options.yAxis);\n        var yAxes = [];\n\n        for (var idx = 0; idx < xAxesOptions.length; idx++) {\n            var axisPane = this$1.findPane(xAxesOptions[idx].pane);\n            if (inArray(axisPane, panes)) {\n                xAxes.push(this$1.createXYAxis(xAxesOptions[idx], false, idx));\n            }\n        }\n\n        for (var idx$1 = 0; idx$1 < yAxesOptions.length; idx$1++) {\n            var axisPane$1 = this$1.findPane(yAxesOptions[idx$1].pane);\n            if (inArray(axisPane$1, panes)) {\n                yAxes.push(this$1.createXYAxis(yAxesOptions[idx$1], true, idx$1));\n            }\n        }\n\n        this.axisX = this.axisX || xAxes[0];\n        this.axisY = this.axisY || yAxes[0];\n    };\n\n    HeatmapPlotArea.prototype.removeAxis = function removeAxis (axis) {\n        var axisName = axis.options.name;\n\n        PlotAreaBase.prototype.removeAxis.call(this, axis);\n\n        if (axis.options.vertical) {\n            delete this.namedYAxes[axisName];\n        } else {\n            delete this.namedXAxes[axisName];\n        }\n\n        if (axis === this.axisX) {\n            delete this.axisX;\n        }\n\n        if (axis === this.axisY) {\n            delete this.axisY;\n        }\n    };\n\n    HeatmapPlotArea.prototype._dispatchEvent = function _dispatchEvent (chart, e, eventType) {\n        var coords = chart._eventCoordinates(e);\n        var point = new Point(coords.x, coords.y);\n        var allAxes = this.axes;\n        var length = allAxes.length;\n        var xValues = [];\n        var yValues = [];\n\n        for (var i = 0; i < length; i++) {\n            var axis = allAxes[i];\n            var values = axis.options.vertical ? yValues : xValues;\n            appendIfNotNull(values, axis.getCategory(point));\n        }\n\n        if (xValues.length > 0 && yValues.length > 0) {\n            chart.trigger(eventType, {\n                element: eventElement(e),\n                originalEvent: e,\n                x: singleItemOrArray(xValues),\n                y: singleItemOrArray(yValues)\n            });\n        }\n    };\n\n    HeatmapPlotArea.prototype.updateAxisOptions = function updateAxisOptions$1 (axis, options) {\n        var vertical = axis.options.vertical;\n        var axes = this.groupAxes(this.panes);\n        var index = (vertical ? axes.y : axes.x).indexOf(axis);\n\n        updateAxisOptions(this.options, index, vertical, options);\n        updateAxisOptions(this.originalOptions, index, vertical, options);\n    };\n\n    HeatmapPlotArea.prototype.crosshairOptions = function crosshairOptions (axis) {\n        // Stack the crosshair above the series points.\n        return Object.assign({}, axis.options.crosshair, { zIndex: 0 });\n    };\n\n    return HeatmapPlotArea;\n}(PlotAreaBase));\n\nfunction updateAxisOptions(targetOptions, axisIndex, vertical, options) {\n    var axisOptions = ([].concat(vertical ? targetOptions.yAxis : targetOptions.xAxis))[axisIndex];\n    deepExtend(axisOptions, options);\n}\n\nsetDefaultOptions(HeatmapPlotArea, {\n    xAxis: {},\n    yAxis: {}\n});\n\ndeepExtend(HeatmapPlotArea.prototype, PlotAreaEventsMixin);\n\nexport default HeatmapPlotArea;\n"]},"metadata":{},"sourceType":"module"}
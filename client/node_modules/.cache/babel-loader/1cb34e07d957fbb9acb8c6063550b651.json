{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString, splitInto } from '../../utils';\nexport var NumericQRDataMode = function (QRDataMode) {\n  function NumericQRDataMode() {\n    QRDataMode.apply(this, arguments);\n  }\n\n  if (QRDataMode) NumericQRDataMode.__proto__ = QRDataMode;\n  NumericQRDataMode.prototype = Object.create(QRDataMode && QRDataMode.prototype);\n  NumericQRDataMode.prototype.constructor = NumericQRDataMode;\n\n  NumericQRDataMode.prototype.initProperties = function initProperties() {\n    QRDataMode.prototype.initProperties.call(this);\n    extend(this, {\n      bitsInCharacterCount: [10, 12, 14],\n      modeIndicator: \"0001\"\n    });\n  };\n\n  NumericQRDataMode.prototype.getValue = function getValue(character) {\n    return parseInt(character, 10);\n  };\n\n  NumericQRDataMode.prototype.encode = function encode(str, version) {\n    var mode = this,\n        parts = splitInto(str, 3),\n        result = mode.getModeCountString(str.length, version);\n    var i;\n\n    for (i = 0; i < parts.length - 1; i++) {\n      result += toBitsString(parts[i], 10);\n    }\n\n    return result + toBitsString(parts[i], 1 + 3 * parts[i].length);\n  };\n\n  NumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength(inputLength, version) {\n    var mod3 = inputLength % 3;\n    return 4 + this.getBitsCharacterCount(version) + 10 * Math.floor(inputLength / 3) + 3 * mod3 + (mod3 === 0 ? 0 : 1);\n  };\n\n  return NumericQRDataMode;\n}(QRDataMode);","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/qrcode/encodings/data-modes/numeric-data-mode.js"],"names":["QRDataMode","extend","toBitsString","splitInto","NumericQRDataMode","apply","arguments","__proto__","prototype","Object","create","constructor","initProperties","call","bitsInCharacterCount","modeIndicator","getValue","character","parseInt","encode","str","version","mode","parts","result","getModeCountString","length","i","getStringBitsLength","inputLength","mod3","getBitsCharacterCount","Math","floor"],"mappings":"AAAA,SAASA,UAAT,QAA2B,gBAA3B;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SACIC,YADJ,EAEIC,SAFJ,QAGO,aAHP;AAKA,OAAO,IAAIC,iBAAiB,GAAI,UAAUJ,UAAV,EAAsB;AAClD,WAASI,iBAAT,GAA8B;AAC1BJ,IAAAA,UAAU,CAACK,KAAX,CAAiB,IAAjB,EAAuBC,SAAvB;AACH;;AAED,MAAKN,UAAL,EAAkBI,iBAAiB,CAACG,SAAlB,GAA8BP,UAA9B;AAClBI,EAAAA,iBAAiB,CAACI,SAAlB,GAA8BC,MAAM,CAACC,MAAP,CAAeV,UAAU,IAAIA,UAAU,CAACQ,SAAxC,CAA9B;AACAJ,EAAAA,iBAAiB,CAACI,SAAlB,CAA4BG,WAA5B,GAA0CP,iBAA1C;;AAEAA,EAAAA,iBAAiB,CAACI,SAAlB,CAA4BI,cAA5B,GAA6C,SAASA,cAAT,GAA2B;AACpEZ,IAAAA,UAAU,CAACQ,SAAX,CAAqBI,cAArB,CAAoCC,IAApC,CAAyC,IAAzC;AAEAZ,IAAAA,MAAM,CAAC,IAAD,EAAO;AACTa,MAAAA,oBAAoB,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADb;AAETC,MAAAA,aAAa,EAAE;AAFN,KAAP,CAAN;AAIH,GAPD;;AASAX,EAAAA,iBAAiB,CAACI,SAAlB,CAA4BQ,QAA5B,GAAuC,SAASA,QAAT,CAAmBC,SAAnB,EAA8B;AACjE,WAAOC,QAAQ,CAACD,SAAD,EAAY,EAAZ,CAAf;AACH,GAFD;;AAIAb,EAAAA,iBAAiB,CAACI,SAAlB,CAA4BW,MAA5B,GAAqC,SAASA,MAAT,CAAiBC,GAAjB,EAAsBC,OAAtB,EAA+B;AAChE,QAAIC,IAAI,GAAG,IAAX;AAAA,QACIC,KAAK,GAAGpB,SAAS,CAACiB,GAAD,EAAM,CAAN,CADrB;AAAA,QAEII,MAAM,GAAGF,IAAI,CAACG,kBAAL,CAAwBL,GAAG,CAACM,MAA5B,EAAoCL,OAApC,CAFb;AAGA,QAAIM,CAAJ;;AAEA,SAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGJ,KAAK,CAACG,MAAN,GAAe,CAA/B,EAAkCC,CAAC,EAAnC,EAAuC;AACnCH,MAAAA,MAAM,IAAItB,YAAY,CAACqB,KAAK,CAACI,CAAD,CAAN,EAAW,EAAX,CAAtB;AACH;;AAED,WAAOH,MAAM,GAAGtB,YAAY,CAACqB,KAAK,CAACI,CAAD,CAAN,EAAW,IAAI,IAAIJ,KAAK,CAACI,CAAD,CAAL,CAASD,MAA5B,CAA5B;AACH,GAXD;;AAaAtB,EAAAA,iBAAiB,CAACI,SAAlB,CAA4BoB,mBAA5B,GAAkD,SAASA,mBAAT,CAA8BC,WAA9B,EAA2CR,OAA3C,EAAoD;AAClG,QAAIS,IAAI,GAAGD,WAAW,GAAG,CAAzB;AACA,WAAO,IAAI,KAAKE,qBAAL,CAA2BV,OAA3B,CAAJ,GAA0C,KAAKW,IAAI,CAACC,KAAL,CAAWJ,WAAW,GAAG,CAAzB,CAA/C,GAA6E,IAAIC,IAAjF,IAAyFA,IAAI,KAAK,CAAT,GAAa,CAAb,GAAiB,CAA1G,CAAP;AACH,GAHD;;AAKA,SAAO1B,iBAAP;AACH,CAzC+B,CAyC9BJ,UAzC8B,CAAzB","sourcesContent":["import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport {\n    toBitsString,\n    splitInto\n} from '../../utils';\n\nexport var NumericQRDataMode = (function (QRDataMode) {\n    function NumericQRDataMode () {\n        QRDataMode.apply(this, arguments);\n    }\n\n    if ( QRDataMode ) NumericQRDataMode.__proto__ = QRDataMode;\n    NumericQRDataMode.prototype = Object.create( QRDataMode && QRDataMode.prototype );\n    NumericQRDataMode.prototype.constructor = NumericQRDataMode;\n\n    NumericQRDataMode.prototype.initProperties = function initProperties () {\n        QRDataMode.prototype.initProperties.call(this);\n\n        extend(this, {\n            bitsInCharacterCount: [10, 12, 14],\n            modeIndicator: \"0001\"\n        });\n    };\n\n    NumericQRDataMode.prototype.getValue = function getValue (character) {\n        return parseInt(character, 10);\n    };\n\n    NumericQRDataMode.prototype.encode = function encode (str, version) {\n        var mode = this,\n            parts = splitInto(str, 3),\n            result = mode.getModeCountString(str.length, version);\n        var i;\n\n        for (i = 0; i < parts.length - 1; i++) {\n            result += toBitsString(parts[i], 10);\n        }\n\n        return result + toBitsString(parts[i], 1 + 3 * parts[i].length);\n    };\n\n    NumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength (inputLength, version) {\n        var mod3 = inputLength % 3;\n        return 4 + this.getBitsCharacterCount(version) + 10 * Math.floor(inputLength / 3) + 3 * mod3 + (mod3 === 0 ? 0 : 1);\n    };\n\n    return NumericQRDataMode;\n}(QRDataMode));\n"]},"metadata":{},"sourceType":"module"}
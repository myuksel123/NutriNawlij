{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement, Box } from '../../core';\nimport Crosshair from '../crosshair/crosshair';\nimport Pane from '../pane';\nimport { hasValue } from '../utils';\nimport { WHITE, BLACK, X, Y, COORD_PRECISION, TOP, BOTTOM, LEFT, RIGHT, START, END } from '../../common/constants';\nimport { append, deepExtend, defined, getSpacing, getTemplate, inArray, isFunction, isString, limitValue, round, setDefaultOptions } from '../../common';\n\nvar PlotAreaBase = function (ChartElement) {\n  function PlotAreaBase(series, options, chartService) {\n    ChartElement.call(this, options);\n    this.initFields(series, options);\n    this.series = series;\n    this.initSeries();\n    this.charts = [];\n    this.options.legend = this.options.legend || {};\n    this.options.legend.items = [];\n    this.axes = [];\n    this.crosshairs = [];\n    this.chartService = chartService;\n    this.originalOptions = options;\n    this.createPanes();\n    this.render();\n    this.createCrosshairs();\n  }\n\n  if (ChartElement) PlotAreaBase.__proto__ = ChartElement;\n  PlotAreaBase.prototype = Object.create(ChartElement && ChartElement.prototype);\n  PlotAreaBase.prototype.constructor = PlotAreaBase;\n\n  PlotAreaBase.prototype.initFields = function initFields() {};\n\n  PlotAreaBase.prototype.initSeries = function initSeries() {\n    var series = this.series;\n\n    for (var i = 0; i < series.length; i++) {\n      series[i].index = i;\n    }\n  };\n\n  PlotAreaBase.prototype.createPanes = function createPanes() {\n    var this$1 = this;\n    var titleOptions = this.options.title || {};\n    var paneDefaults = this.options.paneDefaults;\n    var paneOptions = this.options.panes || [];\n    var panesLength = Math.max(paneOptions.length, 1);\n    var panes = [];\n    var defaults = deepExtend({\n      title: {\n        color: titleOptions.color\n      }\n    }, paneDefaults);\n\n    for (var i = 0; i < panesLength; i++) {\n      var options = deepExtend({}, defaults, paneOptions[i]);\n\n      if (isString(options.title)) {\n        options.title = deepExtend({\n          text: options.title\n        }, defaults.title);\n      }\n\n      var currentPane = new Pane(options);\n      currentPane.paneIndex = i;\n      panes.push(currentPane);\n      this$1.append(currentPane);\n    }\n\n    this.panes = panes;\n  };\n\n  PlotAreaBase.prototype.crosshairOptions = function crosshairOptions(axis) {\n    return axis.options.crosshair;\n  };\n\n  PlotAreaBase.prototype.createCrosshairs = function createCrosshairs(panes) {\n    var this$1 = this;\n    if (panes === void 0) panes = this.panes;\n\n    for (var i = 0; i < panes.length; i++) {\n      var pane = panes[i];\n\n      for (var j = 0; j < pane.axes.length; j++) {\n        var axis = pane.axes[j];\n        var options = this$1.crosshairOptions(axis);\n\n        if (options && options.visible) {\n          var currentCrosshair = new Crosshair(this$1.chartService, axis, options);\n          this$1.crosshairs.push(currentCrosshair);\n          pane.content.append(currentCrosshair);\n        }\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.removeCrosshairs = function removeCrosshairs(pane) {\n    var crosshairs = this.crosshairs;\n    var axes = pane.axes;\n\n    for (var i = crosshairs.length - 1; i >= 0; i--) {\n      for (var j = 0; j < axes.length; j++) {\n        if (crosshairs[i].axis === axes[j]) {\n          crosshairs.splice(i, 1);\n          break;\n        }\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.hideCrosshairs = function hideCrosshairs() {\n    var crosshairs = this.crosshairs;\n\n    for (var idx = 0; idx < crosshairs.length; idx++) {\n      crosshairs[idx].hide();\n    }\n  };\n\n  PlotAreaBase.prototype.findPane = function findPane(name) {\n    var panes = this.panes;\n    var matchingPane;\n\n    for (var i = 0; i < panes.length; i++) {\n      if (panes[i].options.name === name) {\n        matchingPane = panes[i];\n        break;\n      }\n    }\n\n    return matchingPane || panes[0];\n  };\n\n  PlotAreaBase.prototype.findPointPane = function findPointPane(point) {\n    var panes = this.panes;\n    var matchingPane;\n\n    for (var i = 0; i < panes.length; i++) {\n      if (panes[i].box.containsPoint(point)) {\n        matchingPane = panes[i];\n        break;\n      }\n    }\n\n    return matchingPane;\n  };\n\n  PlotAreaBase.prototype.appendAxis = function appendAxis(axis) {\n    var pane = this.findPane(axis.options.pane);\n    pane.appendAxis(axis);\n    this.axes.push(axis);\n    axis.plotArea = this;\n  };\n\n  PlotAreaBase.prototype.removeAxis = function removeAxis(axisToRemove) {\n    var this$1 = this;\n    var filteredAxes = [];\n\n    for (var i = 0; i < this.axes.length; i++) {\n      var axis = this$1.axes[i];\n\n      if (axisToRemove !== axis) {\n        filteredAxes.push(axis);\n      } else {\n        axis.destroy();\n      }\n    }\n\n    this.axes = filteredAxes;\n  };\n\n  PlotAreaBase.prototype.appendChart = function appendChart(chart, pane) {\n    this.charts.push(chart);\n\n    if (pane) {\n      pane.appendChart(chart);\n    } else {\n      this.append(chart);\n    }\n  };\n\n  PlotAreaBase.prototype.removeChart = function removeChart(chartToRemove) {\n    var this$1 = this;\n    var filteredCharts = [];\n\n    for (var i = 0; i < this.charts.length; i++) {\n      var chart = this$1.charts[i];\n\n      if (chart !== chartToRemove) {\n        filteredCharts.push(chart);\n      } else {\n        chart.destroy();\n      }\n    }\n\n    this.charts = filteredCharts;\n  };\n\n  PlotAreaBase.prototype.addToLegend = function addToLegend(series) {\n    var count = series.length;\n    var legend = this.options.legend;\n    var labels = legend.labels || {};\n    var inactiveItems = legend.inactiveItems || {};\n    var inactiveItemsLabels = inactiveItems.labels || {};\n    var data = [];\n\n    for (var i = 0; i < count; i++) {\n      var currentSeries = series[i];\n      var seriesVisible = currentSeries.visible !== false;\n\n      if (currentSeries.visibleInLegend === false) {\n        continue;\n      }\n\n      var text = currentSeries.name;\n      var labelTemplate = seriesVisible ? getTemplate(labels) : getTemplate(inactiveItemsLabels) || getTemplate(labels);\n\n      if (labelTemplate) {\n        text = labelTemplate({\n          text: hasValue(text) ? text : \"\",\n          series: currentSeries\n        });\n      }\n\n      var defaults = currentSeries._defaults;\n      var color = currentSeries.color;\n\n      if (isFunction(color) && defaults) {\n        color = defaults.color;\n      }\n\n      var itemLabelOptions = void 0,\n          markerColor = void 0;\n\n      if (seriesVisible) {\n        itemLabelOptions = {};\n        markerColor = color;\n      } else {\n        itemLabelOptions = {\n          color: inactiveItemsLabels.color,\n          font: inactiveItemsLabels.font\n        };\n        markerColor = inactiveItems.markers.color;\n      }\n\n      if (hasValue(text) && text !== \"\") {\n        data.push({\n          text: text,\n          labels: itemLabelOptions,\n          markerColor: markerColor,\n          series: currentSeries,\n          active: seriesVisible\n        });\n      }\n    }\n\n    append(legend.items, data);\n  };\n\n  PlotAreaBase.prototype.groupAxes = function groupAxes(panes) {\n    var xAxes = [];\n    var yAxes = [];\n\n    for (var paneIx = 0; paneIx < panes.length; paneIx++) {\n      var paneAxes = panes[paneIx].axes;\n\n      for (var axisIx = 0; axisIx < paneAxes.length; axisIx++) {\n        var axis = paneAxes[axisIx];\n\n        if (axis.options.vertical) {\n          yAxes.push(axis);\n        } else {\n          xAxes.push(axis);\n        }\n      }\n    }\n\n    return {\n      x: xAxes,\n      y: yAxes,\n      any: xAxes.concat(yAxes)\n    };\n  };\n\n  PlotAreaBase.prototype.groupSeriesByPane = function groupSeriesByPane() {\n    var this$1 = this;\n    var series = this.series;\n    var seriesByPane = {};\n\n    for (var i = 0; i < series.length; i++) {\n      var currentSeries = series[i];\n      var pane = this$1.seriesPaneName(currentSeries);\n\n      if (seriesByPane[pane]) {\n        seriesByPane[pane].push(currentSeries);\n      } else {\n        seriesByPane[pane] = [currentSeries];\n      }\n    }\n\n    return seriesByPane;\n  };\n\n  PlotAreaBase.prototype.filterVisibleSeries = function filterVisibleSeries(series) {\n    var result = [];\n\n    for (var i = 0; i < series.length; i++) {\n      var currentSeries = series[i];\n\n      if (currentSeries.visible !== false) {\n        result.push(currentSeries);\n      }\n    }\n\n    return result;\n  };\n\n  PlotAreaBase.prototype.reflow = function reflow(targetBox) {\n    var options = this.options.plotArea;\n    var panes = this.panes;\n    var margin = getSpacing(options.margin);\n    this.box = targetBox.clone().unpad(margin);\n    this.reflowPanes();\n    this.detachLabels();\n    this.reflowAxes(panes);\n    this.reflowCharts(panes);\n  };\n\n  PlotAreaBase.prototype.redraw = function redraw(panes) {\n    var this$1 = this;\n    var panesArray = [].concat(panes);\n    this.initSeries(); //prevents leak during partial redraws. the cached gradients observers retain reference to the destroyed elements.\n\n    var root = this.getRoot();\n\n    if (root) {\n      root.cleanGradients();\n    }\n\n    for (var i = 0; i < panesArray.length; i++) {\n      this$1.removeCrosshairs(panesArray[i]);\n      panesArray[i].empty();\n    }\n\n    this.render(panesArray);\n    this.detachLabels();\n    this.reflowAxes(this.panes);\n    this.reflowCharts(panesArray);\n    this.createCrosshairs(panesArray);\n\n    for (var i$1 = 0; i$1 < panesArray.length; i$1++) {\n      panesArray[i$1].refresh();\n    }\n  };\n\n  PlotAreaBase.prototype.axisCrossingValues = function axisCrossingValues(axis, crossingAxes) {\n    var options = axis.options;\n    var crossingValues = [].concat(options.axisCrossingValues || options.axisCrossingValue);\n    var valuesToAdd = crossingAxes.length - crossingValues.length;\n    var defaultValue = crossingValues[0] || 0;\n\n    for (var i = 0; i < valuesToAdd; i++) {\n      crossingValues.push(defaultValue);\n    }\n\n    return crossingValues;\n  };\n\n  PlotAreaBase.prototype.alignAxisTo = function alignAxisTo(axis, targetAxis, crossingValue, targetCrossingValue) {\n    var slot = axis.getSlot(crossingValue, crossingValue, true);\n    var slotEdge = axis.options.reverse ? 2 : 1;\n    var targetSlot = targetAxis.getSlot(targetCrossingValue, targetCrossingValue, true);\n    var targetEdge = targetAxis.options.reverse ? 2 : 1;\n    var axisBox = axis.box.translate(targetSlot[X + targetEdge] - slot[X + slotEdge], targetSlot[Y + targetEdge] - slot[Y + slotEdge]);\n\n    if (axis.pane !== targetAxis.pane) {\n      axisBox.translate(0, axis.pane.box.y1 - targetAxis.pane.box.y1);\n    }\n\n    axis.reflow(axisBox);\n  };\n\n  PlotAreaBase.prototype.alignAxes = function alignAxes(xAxes, yAxes) {\n    var this$1 = this;\n    var xAnchor = xAxes[0];\n    var yAnchor = yAxes[0];\n    var xAnchorCrossings = this.axisCrossingValues(xAnchor, yAxes);\n    var yAnchorCrossings = this.axisCrossingValues(yAnchor, xAxes);\n    var leftAnchors = {};\n    var rightAnchors = {};\n    var topAnchors = {};\n    var bottomAnchors = {};\n\n    for (var i = 0; i < yAxes.length; i++) {\n      var axis = yAxes[i];\n      var pane = axis.pane;\n      var paneId = pane.id;\n      var visible = axis.options.visible !== false; // Locate pane anchor, if any, and use its axisCrossingValues\n\n      var anchor = paneAnchor(xAxes, pane) || xAnchor;\n      var anchorCrossings = xAnchorCrossings;\n\n      if (anchor !== xAnchor) {\n        anchorCrossings = this$1.axisCrossingValues(anchor, yAxes);\n      }\n\n      this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n      if (axis.options._overlap) {\n        continue;\n      }\n\n      if (round(axis.lineBox().x1) === round(anchor.lineBox().x1)) {\n        // Push the axis to the left the previous y-axis so they don't overlap\n        if (leftAnchors[paneId]) {\n          axis.reflow(axis.box.alignTo(leftAnchors[paneId].box, LEFT).translate(-axis.options.margin, 0));\n        }\n\n        if (visible) {\n          leftAnchors[paneId] = axis;\n        }\n      }\n\n      if (round(axis.lineBox().x2) === round(anchor.lineBox().x2)) {\n        // Flip the labels on the right if we're at the right end of the pane\n        if (!axis._mirrored) {\n          axis.options.labels.mirror = !axis.options.labels.mirror;\n          axis._mirrored = true;\n        }\n\n        this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]); // Push the axis to the right the previous y-axis so they don't overlap\n\n        if (rightAnchors[paneId]) {\n          axis.reflow(axis.box.alignTo(rightAnchors[paneId].box, RIGHT).translate(axis.options.margin, 0));\n        }\n\n        if (visible) {\n          rightAnchors[paneId] = axis;\n        }\n      }\n\n      if (i !== 0 && yAnchor.pane === axis.pane) {\n        axis.alignTo(yAnchor);\n        axis.reflow(axis.box);\n      }\n    }\n\n    for (var i$1 = 0; i$1 < xAxes.length; i$1++) {\n      var axis$1 = xAxes[i$1];\n      var pane$1 = axis$1.pane;\n      var paneId$1 = pane$1.id;\n      var visible$1 = axis$1.options.visible !== false; // Locate pane anchor and use its axisCrossingValues\n\n      var anchor$1 = paneAnchor(yAxes, pane$1) || yAnchor;\n      var anchorCrossings$1 = yAnchorCrossings;\n\n      if (anchor$1 !== yAnchor) {\n        anchorCrossings$1 = this$1.axisCrossingValues(anchor$1, xAxes);\n      }\n\n      this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);\n\n      if (axis$1.options._overlap) {\n        continue;\n      }\n\n      if (round(axis$1.lineBox().y1) === round(anchor$1.lineBox().y1)) {\n        // Flip the labels on top if we're at the top of the pane\n        if (!axis$1._mirrored) {\n          axis$1.options.labels.mirror = !axis$1.options.labels.mirror;\n          axis$1._mirrored = true;\n        }\n\n        this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]); // Push the axis above the previous x-axis so they don't overlap\n\n        if (topAnchors[paneId$1]) {\n          axis$1.reflow(axis$1.box.alignTo(topAnchors[paneId$1].box, TOP).translate(0, -axis$1.options.margin));\n        }\n\n        if (visible$1) {\n          topAnchors[paneId$1] = axis$1;\n        }\n      }\n\n      if (round(axis$1.lineBox().y2, COORD_PRECISION) === round(anchor$1.lineBox().y2, COORD_PRECISION)) {\n        // Push the axis below the previous x-axis so they don't overlap\n        if (bottomAnchors[paneId$1]) {\n          axis$1.reflow(axis$1.box.alignTo(bottomAnchors[paneId$1].box, BOTTOM).translate(0, axis$1.options.margin));\n        }\n\n        if (visible$1) {\n          bottomAnchors[paneId$1] = axis$1;\n        }\n      }\n\n      if (i$1 !== 0) {\n        axis$1.alignTo(xAnchor);\n        axis$1.reflow(axis$1.box);\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.shrinkAxisWidth = function shrinkAxisWidth(panes) {\n    var axes = this.groupAxes(panes).any;\n    var axisBox = axisGroupBox(axes);\n    var overflowX = 0;\n\n    for (var i = 0; i < panes.length; i++) {\n      var currentPane = panes[i];\n\n      if (currentPane.axes.length > 0) {\n        overflowX = Math.max(overflowX, axisBox.width() - currentPane.contentBox.width());\n      }\n    }\n\n    if (overflowX !== 0) {\n      for (var i$1 = 0; i$1 < axes.length; i$1++) {\n        var currentAxis = axes[i$1];\n\n        if (!currentAxis.options.vertical) {\n          currentAxis.reflow(currentAxis.box.shrink(overflowX, 0));\n        }\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.shrinkAxisHeight = function shrinkAxisHeight(panes) {\n    var shrinked;\n\n    for (var i = 0; i < panes.length; i++) {\n      var currentPane = panes[i];\n      var axes = currentPane.axes;\n      var overflowY = Math.max(0, axisGroupBox(axes).height() - currentPane.contentBox.height());\n\n      if (overflowY !== 0) {\n        for (var j = 0; j < axes.length; j++) {\n          var currentAxis = axes[j];\n\n          if (currentAxis.options.vertical) {\n            currentAxis.reflow(currentAxis.box.shrink(0, overflowY));\n          }\n        }\n\n        shrinked = true;\n      }\n    }\n\n    return shrinked;\n  };\n\n  PlotAreaBase.prototype.fitAxes = function fitAxes(panes) {\n    var axes = this.groupAxes(panes).any;\n    var offsetX = 0;\n\n    for (var i = 0; i < panes.length; i++) {\n      var currentPane = panes[i];\n      var paneAxes = currentPane.axes;\n      var paneBox = currentPane.contentBox;\n\n      if (paneAxes.length > 0) {\n        var axisBox = axisGroupBox(paneAxes); // OffsetY is calculated and applied per pane\n\n        var offsetY = Math.max(paneBox.y1 - axisBox.y1, paneBox.y2 - axisBox.y2); // OffsetX is calculated and applied globally\n\n        offsetX = Math.max(offsetX, paneBox.x1 - axisBox.x1);\n\n        for (var j = 0; j < paneAxes.length; j++) {\n          var currentAxis = paneAxes[j];\n          currentAxis.reflow(currentAxis.box.translate(0, offsetY));\n        }\n      }\n    }\n\n    for (var i$1 = 0; i$1 < axes.length; i$1++) {\n      var currentAxis$1 = axes[i$1];\n      currentAxis$1.reflow(currentAxis$1.box.translate(offsetX, 0));\n    }\n  };\n\n  PlotAreaBase.prototype.reflowAxes = function reflowAxes(panes) {\n    var this$1 = this;\n    var axes = this.groupAxes(panes);\n\n    for (var i = 0; i < panes.length; i++) {\n      this$1.reflowPaneAxes(panes[i]);\n    }\n\n    if (axes.x.length > 0 && axes.y.length > 0) {\n      this.alignAxes(axes.x, axes.y);\n      this.shrinkAxisWidth(panes);\n      this.autoRotateAxisLabels(axes);\n      this.alignAxes(axes.x, axes.y);\n\n      if (this.shrinkAxisWidth(panes)) {\n        this.alignAxes(axes.x, axes.y);\n      }\n\n      this.shrinkAxisHeight(panes);\n      this.alignAxes(axes.x, axes.y);\n\n      if (this.shrinkAxisHeight(panes)) {\n        this.alignAxes(axes.x, axes.y);\n      }\n\n      this.fitAxes(panes);\n    }\n  };\n\n  PlotAreaBase.prototype.autoRotateAxisLabels = function autoRotateAxisLabels(groupedAxes) {\n    var this$1 = this;\n    var ref = this;\n    var panes = ref.panes;\n    var axes = allPaneAxes(panes);\n    var rotated;\n\n    for (var idx = 0; idx < axes.length; idx++) {\n      var axis = axes[idx];\n\n      if (axis.autoRotateLabels()) {\n        rotated = true;\n      }\n    }\n\n    if (rotated) {\n      for (var idx$1 = 0; idx$1 < panes.length; idx$1++) {\n        this$1.reflowPaneAxes(panes[idx$1]);\n      }\n\n      if (groupedAxes.x.length > 0 && groupedAxes.y.length > 0) {\n        this.alignAxes(groupedAxes.x, groupedAxes.y);\n        this.shrinkAxisWidth(panes);\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.reflowPaneAxes = function reflowPaneAxes(pane) {\n    var axes = pane.axes;\n    var length = axes.length;\n\n    if (length > 0) {\n      for (var i = 0; i < length; i++) {\n        axes[i].reflow(pane.contentBox);\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.reflowCharts = function reflowCharts(panes) {\n    var charts = this.charts;\n    var count = charts.length;\n    var box = this.box;\n\n    for (var i = 0; i < count; i++) {\n      var chartPane = charts[i].pane;\n\n      if (!chartPane || inArray(chartPane, panes)) {\n        charts[i].reflow(box);\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.reflowPanes = function reflowPanes() {\n    var ref = this;\n    var box = ref.box;\n    var panes = ref.panes;\n    var panesLength = panes.length;\n    var remainingHeight = box.height();\n    var remainingPanes = panesLength;\n    var autoHeightPanes = 0;\n    var top = box.y1;\n\n    for (var i = 0; i < panesLength; i++) {\n      var currentPane = panes[i];\n      var height = currentPane.options.height;\n      currentPane.options.width = box.width();\n\n      if (!currentPane.options.height) {\n        autoHeightPanes++;\n      } else {\n        if (height.indexOf && height.indexOf(\"%\")) {\n          var percents = parseInt(height, 10) / 100;\n          currentPane.options.height = percents * box.height();\n        }\n\n        currentPane.reflow(box.clone());\n        remainingHeight -= currentPane.options.height;\n      }\n    }\n\n    for (var i$1 = 0; i$1 < panesLength; i$1++) {\n      var currentPane$1 = panes[i$1];\n\n      if (!currentPane$1.options.height) {\n        currentPane$1.options.height = remainingHeight / autoHeightPanes;\n      }\n    }\n\n    for (var i$2 = 0; i$2 < panesLength; i$2++) {\n      var currentPane$2 = panes[i$2];\n      var paneBox = box.clone().move(box.x1, top);\n      currentPane$2.reflow(paneBox);\n      remainingPanes--;\n      top += currentPane$2.options.height;\n    }\n  };\n\n  PlotAreaBase.prototype.backgroundBox = function backgroundBox() {\n    var axes = this.axes;\n    var axesCount = axes.length;\n    var box;\n\n    for (var i = 0; i < axesCount; i++) {\n      var axisA = axes[i];\n\n      for (var j = 0; j < axesCount; j++) {\n        var axisB = axes[j];\n\n        if (axisA.options.vertical !== axisB.options.vertical) {\n          var lineBox = axisA.lineBox().clone().wrap(axisB.lineBox());\n\n          if (!box) {\n            box = lineBox;\n          } else {\n            box = box.wrap(lineBox);\n          }\n        }\n      }\n    }\n\n    return box || this.box;\n  };\n\n  PlotAreaBase.prototype.chartsBoxes = function chartsBoxes() {\n    var panes = this.panes;\n    var boxes = [];\n\n    for (var idx = 0; idx < panes.length; idx++) {\n      boxes.push(panes[idx].chartsBox());\n    }\n\n    return boxes;\n  };\n\n  PlotAreaBase.prototype.addBackgroundPaths = function addBackgroundPaths(multipath) {\n    var boxes = this.chartsBoxes();\n\n    for (var idx = 0; idx < boxes.length; idx++) {\n      multipath.paths.push(draw.Path.fromRect(boxes[idx].toRect()));\n    }\n  };\n\n  PlotAreaBase.prototype.backgroundContainsPoint = function backgroundContainsPoint(point) {\n    var boxes = this.chartsBoxes();\n\n    for (var idx = 0; idx < boxes.length; idx++) {\n      if (boxes[idx].containsPoint(point)) {\n        return true;\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.createVisual = function createVisual() {\n    ChartElement.prototype.createVisual.call(this);\n    var options = this.options.plotArea;\n    var opacity = options.opacity;\n    var background = options.background;\n    var border = options.border;\n    if (border === void 0) border = {};\n\n    if (isTransparent(background)) {\n      background = WHITE;\n      opacity = 0;\n    }\n\n    var bg = this._bgVisual = new draw.MultiPath({\n      fill: {\n        color: background,\n        opacity: opacity\n      },\n      stroke: {\n        color: border.width ? border.color : \"\",\n        width: border.width,\n        dashType: border.dashType\n      },\n      zIndex: -1\n    });\n    this.addBackgroundPaths(bg);\n    this.appendVisual(bg);\n  };\n\n  PlotAreaBase.prototype.pointsByCategoryIndex = function pointsByCategoryIndex(categoryIndex) {\n    var charts = this.charts;\n    var result = [];\n\n    if (categoryIndex !== null) {\n      for (var i = 0; i < charts.length; i++) {\n        var chart = charts[i];\n\n        if (chart.pane.options.name === \"_navigator\") {\n          continue;\n        }\n\n        var points = charts[i].categoryPoints[categoryIndex];\n\n        if (points && points.length) {\n          for (var j = 0; j < points.length; j++) {\n            var point = points[j];\n\n            if (point && defined(point.value) && point.value !== null) {\n              result.push(point);\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  PlotAreaBase.prototype.pointsBySeriesIndex = function pointsBySeriesIndex(seriesIndex) {\n    return this.filterPoints(function (point) {\n      return point.series.index === seriesIndex;\n    });\n  };\n\n  PlotAreaBase.prototype.pointsBySeriesName = function pointsBySeriesName(name) {\n    return this.filterPoints(function (point) {\n      return point.series.name === name;\n    });\n  };\n\n  PlotAreaBase.prototype.filterPoints = function filterPoints(callback) {\n    var charts = this.charts;\n    var result = [];\n\n    for (var i = 0; i < charts.length; i++) {\n      var chart = charts[i];\n      var points = chart.points;\n\n      for (var j = 0; j < points.length; j++) {\n        var point = points[j];\n\n        if (point && point.visible !== false && callback(point)) {\n          result.push(point);\n        }\n      }\n    }\n\n    return result;\n  };\n\n  PlotAreaBase.prototype.findPoint = function findPoint(callback) {\n    var charts = this.charts;\n\n    for (var i = 0; i < charts.length; i++) {\n      var chart = charts[i];\n      var points = chart.points;\n\n      for (var j = 0; j < points.length; j++) {\n        var point = points[j];\n\n        if (point && point.visible !== false && callback(point)) {\n          return point;\n        }\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.paneByPoint = function paneByPoint(point) {\n    var panes = this.panes;\n\n    for (var i = 0; i < panes.length; i++) {\n      var pane = panes[i];\n\n      if (pane.box.containsPoint(point)) {\n        return pane;\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.detachLabels = function detachLabels() {\n    var axes = this.groupAxes(this.panes);\n    var xAxes = axes.x;\n    var yAxes = axes.y;\n    this.detachAxisGroupLabels(yAxes, xAxes);\n    this.detachAxisGroupLabels(xAxes, yAxes);\n  };\n\n  PlotAreaBase.prototype.detachAxisGroupLabels = function detachAxisGroupLabels(axes, crossingAxes) {\n    var this$1 = this;\n    var labelAxisCount = 0;\n\n    for (var i = 0; i < axes.length; i++) {\n      var axis = axes[i];\n      var pane = axis.pane;\n      var anchor = paneAnchor(crossingAxes, pane) || crossingAxes[0];\n      var axisIndex = i + labelAxisCount;\n      var labelAxis = this$1.createLabelAxis(axis, axisIndex, anchor);\n\n      if (labelAxis) {\n        labelAxisCount++;\n        var pos = pane.axes.indexOf(axis) + labelAxisCount;\n        pane.appendAxisAt(labelAxis, pos);\n      }\n    }\n  };\n\n  PlotAreaBase.prototype.createLabelAxis = function createLabelAxis(axis, axisIndex, anchor) {\n    var labelOptions = axis.options.labels;\n    var position = labelOptions.position;\n    var onAxis = position !== END && position !== START;\n    var visible = labelOptions.visible;\n\n    if (onAxis || visible === false) {\n      return null;\n    }\n\n    var allAxes = this.groupAxes(this.panes);\n    var crossingAxes = anchor.options.vertical ? allAxes.x : allAxes.y;\n    var anchorCrossings = this.axisCrossingValues(anchor, crossingAxes);\n    var end = position === END;\n    var range = anchor.range();\n    var edge = end ? range.max : range.min;\n    var crossingValue = limitValue(anchorCrossings[axisIndex], range.min, range.max);\n\n    if (crossingValue - edge === 0) {\n      return null;\n    }\n\n    anchorCrossings.splice(axisIndex + 1, 0, edge);\n    anchor.options.axisCrossingValues = anchorCrossings;\n    var labelAxis = axis.clone();\n    axis.clear();\n    labelAxis.options.name = undefined;\n    labelAxis.options.line.visible = false;\n    labelAxis.options.crosshair = undefined;\n    labelAxis.options.notes = undefined;\n    labelAxis.options.plotBands = undefined;\n    return labelAxis;\n  };\n\n  return PlotAreaBase;\n}(ChartElement);\n\nfunction isSingleAxis(axis) {\n  return !axis.pane.axes.some(function (a) {\n    return a.options.vertical === axis.options.vertical && a !== axis && a.options.visible !== false;\n  });\n}\n\nfunction axisGroupBox(axes) {\n  var length = axes.length;\n  var box;\n\n  for (var i = 0; i < length; i++) {\n    var axis = axes[i];\n    var visible = axis.options.visible !== false;\n\n    if (visible || isSingleAxis(axis)) {\n      var axisBox = visible ? axis.contentBox() : axis.lineBox();\n\n      if (!box) {\n        box = axisBox.clone();\n      } else {\n        box.wrap(axisBox);\n      }\n    }\n  }\n\n  return box || new Box();\n}\n\nfunction paneAnchor(axes, pane) {\n  for (var i = 0; i < axes.length; i++) {\n    var anchor = axes[i];\n\n    if (anchor && anchor.pane === pane) {\n      return anchor;\n    }\n  }\n}\n\nfunction isTransparent(color) {\n  return color === \"\" || color === null || color === \"none\" || color === \"transparent\" || !defined(color);\n}\n\nvar allPaneAxes = function (panes) {\n  return panes.reduce(function (acc, pane) {\n    return acc.concat(pane.axes);\n  }, []);\n};\n\nsetDefaultOptions(PlotAreaBase, {\n  series: [],\n  plotArea: {\n    margin: {}\n  },\n  background: \"\",\n  border: {\n    color: BLACK,\n    width: 0\n  },\n  paneDefaults: {\n    title: {}\n  },\n  legend: {\n    inactiveItems: {\n      labels: {\n        color: \"#919191\"\n      },\n      markers: {\n        color: \"#919191\"\n      }\n    }\n  }\n});\nexport default PlotAreaBase;","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/chart/plotarea/plotarea-base.js"],"names":["drawing","draw","ChartElement","Box","Crosshair","Pane","hasValue","WHITE","BLACK","X","Y","COORD_PRECISION","TOP","BOTTOM","LEFT","RIGHT","START","END","append","deepExtend","defined","getSpacing","getTemplate","inArray","isFunction","isString","limitValue","round","setDefaultOptions","PlotAreaBase","series","options","chartService","call","initFields","initSeries","charts","legend","items","axes","crosshairs","originalOptions","createPanes","render","createCrosshairs","__proto__","prototype","Object","create","constructor","i","length","index","this$1","titleOptions","title","paneDefaults","paneOptions","panes","panesLength","Math","max","defaults","color","text","currentPane","paneIndex","push","crosshairOptions","axis","crosshair","pane","j","visible","currentCrosshair","content","removeCrosshairs","splice","hideCrosshairs","idx","hide","findPane","name","matchingPane","findPointPane","point","box","containsPoint","appendAxis","plotArea","removeAxis","axisToRemove","filteredAxes","destroy","appendChart","chart","removeChart","chartToRemove","filteredCharts","addToLegend","count","labels","inactiveItems","inactiveItemsLabels","data","currentSeries","seriesVisible","visibleInLegend","labelTemplate","_defaults","itemLabelOptions","markerColor","font","markers","active","groupAxes","xAxes","yAxes","paneIx","paneAxes","axisIx","vertical","x","y","any","concat","groupSeriesByPane","seriesByPane","seriesPaneName","filterVisibleSeries","result","reflow","targetBox","margin","clone","unpad","reflowPanes","detachLabels","reflowAxes","reflowCharts","redraw","panesArray","root","getRoot","cleanGradients","empty","i$1","refresh","axisCrossingValues","crossingAxes","crossingValues","axisCrossingValue","valuesToAdd","defaultValue","alignAxisTo","targetAxis","crossingValue","targetCrossingValue","slot","getSlot","slotEdge","reverse","targetSlot","targetEdge","axisBox","translate","y1","alignAxes","xAnchor","yAnchor","xAnchorCrossings","yAnchorCrossings","leftAnchors","rightAnchors","topAnchors","bottomAnchors","paneId","id","anchor","paneAnchor","anchorCrossings","_overlap","lineBox","x1","alignTo","x2","_mirrored","mirror","axis$1","pane$1","paneId$1","visible$1","anchor$1","anchorCrossings$1","y2","shrinkAxisWidth","axisGroupBox","overflowX","width","contentBox","currentAxis","shrink","shrinkAxisHeight","shrinked","overflowY","height","fitAxes","offsetX","paneBox","offsetY","currentAxis$1","reflowPaneAxes","autoRotateAxisLabels","groupedAxes","ref","allPaneAxes","rotated","autoRotateLabels","idx$1","chartPane","remainingHeight","remainingPanes","autoHeightPanes","top","indexOf","percents","parseInt","currentPane$1","i$2","currentPane$2","move","backgroundBox","axesCount","axisA","axisB","wrap","chartsBoxes","boxes","chartsBox","addBackgroundPaths","multipath","paths","Path","fromRect","toRect","backgroundContainsPoint","createVisual","opacity","background","border","isTransparent","bg","_bgVisual","MultiPath","fill","stroke","dashType","zIndex","appendVisual","pointsByCategoryIndex","categoryIndex","points","categoryPoints","value","pointsBySeriesIndex","seriesIndex","filterPoints","pointsBySeriesName","callback","findPoint","paneByPoint","detachAxisGroupLabels","labelAxisCount","axisIndex","labelAxis","createLabelAxis","pos","appendAxisAt","labelOptions","position","onAxis","allAxes","end","range","edge","min","clear","undefined","line","notes","plotBands","isSingleAxis","some","a","reduce","acc"],"mappings":"AAAA,SAASA,OAAO,IAAIC,IAApB,QAAgC,yBAAhC;AAEA,SAASC,YAAT,EAAuBC,GAAvB,QAAkC,YAAlC;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,QAAT,QAAyB,UAAzB;AAEA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,CAAvB,EAA0BC,CAA1B,EAA6BC,eAA7B,EAA8CC,GAA9C,EAAmDC,MAAnD,EAA2DC,IAA3D,EAAiEC,KAAjE,EAAwEC,KAAxE,EAA+EC,GAA/E,QAA0F,wBAA1F;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,OAA7B,EAAsCC,UAAtC,EAAkDC,WAAlD,EAA+DC,OAA/D,EAAwEC,UAAxE,EAAoFC,QAApF,EAA8FC,UAA9F,EAA0GC,KAA1G,EAAiHC,iBAAjH,QAA0I,cAA1I;;AAEA,IAAIC,YAAY,GAAI,UAAU3B,YAAV,EAAwB;AACxC,WAAS2B,YAAT,CAAsBC,MAAtB,EAA8BC,OAA9B,EAAuCC,YAAvC,EAAqD;AACjD9B,IAAAA,YAAY,CAAC+B,IAAb,CAAkB,IAAlB,EAAwBF,OAAxB;AAEA,SAAKG,UAAL,CAAgBJ,MAAhB,EAAwBC,OAAxB;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKK,UAAL;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKL,OAAL,CAAaM,MAAb,GAAsB,KAAKN,OAAL,CAAaM,MAAb,IAAuB,EAA7C;AACA,SAAKN,OAAL,CAAaM,MAAb,CAAoBC,KAApB,GAA4B,EAA5B;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKR,YAAL,GAAoBA,YAApB;AACA,SAAKS,eAAL,GAAuBV,OAAvB;AAEA,SAAKW,WAAL;AACA,SAAKC,MAAL;AACA,SAAKC,gBAAL;AACH;;AAED,MAAK1C,YAAL,EAAoB2B,YAAY,CAACgB,SAAb,GAAyB3C,YAAzB;AACpB2B,EAAAA,YAAY,CAACiB,SAAb,GAAyBC,MAAM,CAACC,MAAP,CAAe9C,YAAY,IAAIA,YAAY,CAAC4C,SAA5C,CAAzB;AACAjB,EAAAA,YAAY,CAACiB,SAAb,CAAuBG,WAAvB,GAAqCpB,YAArC;;AAEAA,EAAAA,YAAY,CAACiB,SAAb,CAAuBZ,UAAvB,GAAoC,SAASA,UAAT,GAAuB,CAAG,CAA9D;;AAEAL,EAAAA,YAAY,CAACiB,SAAb,CAAuBX,UAAvB,GAAoC,SAASA,UAAT,GAAuB;AACvD,QAAIL,MAAM,GAAG,KAAKA,MAAlB;;AAEA,SAAK,IAAIoB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,MAAM,CAACqB,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpCpB,MAAAA,MAAM,CAACoB,CAAD,CAAN,CAAUE,KAAV,GAAkBF,CAAlB;AACH;AACJ,GAND;;AAQArB,EAAAA,YAAY,CAACiB,SAAb,CAAuBJ,WAAvB,GAAqC,SAASA,WAAT,GAAwB;AACzD,QAAIW,MAAM,GAAG,IAAb;AAEA,QAAIC,YAAY,GAAG,KAAKvB,OAAL,CAAawB,KAAb,IAAsB,EAAzC;AACA,QAAIC,YAAY,GAAG,KAAKzB,OAAL,CAAayB,YAAhC;AACA,QAAIC,WAAW,GAAG,KAAK1B,OAAL,CAAa2B,KAAb,IAAsB,EAAxC;AACA,QAAIC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASJ,WAAW,CAACN,MAArB,EAA6B,CAA7B,CAAlB;AACA,QAAIO,KAAK,GAAG,EAAZ;AAEA,QAAII,QAAQ,GAAG3C,UAAU,CAAC;AACtBoC,MAAAA,KAAK,EAAE;AACHQ,QAAAA,KAAK,EAAET,YAAY,CAACS;AADjB;AADe,KAAD,EAItBP,YAJsB,CAAzB;;AAMA,SAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,WAApB,EAAiCT,CAAC,EAAlC,EAAsC;AAClC,UAAInB,OAAO,GAAGZ,UAAU,CAAC,EAAD,EAAK2C,QAAL,EAAeL,WAAW,CAACP,CAAD,CAA1B,CAAxB;;AACA,UAAIzB,QAAQ,CAACM,OAAO,CAACwB,KAAT,CAAZ,EAA6B;AACzBxB,QAAAA,OAAO,CAACwB,KAAR,GAAgBpC,UAAU,CAAC;AAAE6C,UAAAA,IAAI,EAAEjC,OAAO,CAACwB;AAAhB,SAAD,EAA0BO,QAAQ,CAACP,KAAnC,CAA1B;AACH;;AAED,UAAIU,WAAW,GAAG,IAAI5D,IAAJ,CAAS0B,OAAT,CAAlB;AACAkC,MAAAA,WAAW,CAACC,SAAZ,GAAwBhB,CAAxB;AAEAQ,MAAAA,KAAK,CAACS,IAAN,CAAWF,WAAX;AACAZ,MAAAA,MAAM,CAACnC,MAAP,CAAc+C,WAAd;AACH;;AAED,SAAKP,KAAL,GAAaA,KAAb;AACH,GA7BD;;AA+BA7B,EAAAA,YAAY,CAACiB,SAAb,CAAuBsB,gBAAvB,GAA0C,SAASA,gBAAT,CAA2BC,IAA3B,EAAiC;AACvE,WAAOA,IAAI,CAACtC,OAAL,CAAauC,SAApB;AACH,GAFD;;AAIAzC,EAAAA,YAAY,CAACiB,SAAb,CAAuBF,gBAAvB,GAA0C,SAASA,gBAAT,CAA2Bc,KAA3B,EAAkC;AACxE,QAAIL,MAAM,GAAG,IAAb;AACA,QAAKK,KAAK,KAAK,KAAK,CAApB,EAAwBA,KAAK,GAAG,KAAKA,KAAb;;AAExB,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAAK,CAACP,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIqB,IAAI,GAAGb,KAAK,CAACR,CAAD,CAAhB;;AACA,WAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAAChC,IAAL,CAAUY,MAA9B,EAAsCqB,CAAC,EAAvC,EAA2C;AACvC,YAAIH,IAAI,GAAGE,IAAI,CAAChC,IAAL,CAAUiC,CAAV,CAAX;AACA,YAAIzC,OAAO,GAAGsB,MAAM,CAACe,gBAAP,CAAwBC,IAAxB,CAAd;;AACA,YAAItC,OAAO,IAAIA,OAAO,CAAC0C,OAAvB,EAAgC;AAC5B,cAAIC,gBAAgB,GAAG,IAAItE,SAAJ,CAAciD,MAAM,CAACrB,YAArB,EAAmCqC,IAAnC,EAAyCtC,OAAzC,CAAvB;AAEAsB,UAAAA,MAAM,CAACb,UAAP,CAAkB2B,IAAlB,CAAuBO,gBAAvB;AACAH,UAAAA,IAAI,CAACI,OAAL,CAAazD,MAAb,CAAoBwD,gBAApB;AACH;AACJ;AACJ;AACJ,GAjBD;;AAmBA7C,EAAAA,YAAY,CAACiB,SAAb,CAAuB8B,gBAAvB,GAA0C,SAASA,gBAAT,CAA2BL,IAA3B,EAAiC;AACvE,QAAI/B,UAAU,GAAG,KAAKA,UAAtB;AACA,QAAID,IAAI,GAAGgC,IAAI,CAAChC,IAAhB;;AAEA,SAAK,IAAIW,CAAC,GAAGV,UAAU,CAACW,MAAX,GAAoB,CAAjC,EAAoCD,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC7C,WAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjC,IAAI,CAACY,MAAzB,EAAiCqB,CAAC,EAAlC,EAAsC;AAClC,YAAIhC,UAAU,CAACU,CAAD,CAAV,CAAcmB,IAAd,KAAuB9B,IAAI,CAACiC,CAAD,CAA/B,EAAoC;AAChChC,UAAAA,UAAU,CAACqC,MAAX,CAAkB3B,CAAlB,EAAqB,CAArB;AACA;AACH;AACJ;AACJ;AACJ,GAZD;;AAcArB,EAAAA,YAAY,CAACiB,SAAb,CAAuBgC,cAAvB,GAAwC,SAASA,cAAT,GAA2B;AAC/D,QAAItC,UAAU,GAAG,KAAKA,UAAtB;;AACA,SAAK,IAAIuC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGvC,UAAU,CAACW,MAAnC,EAA2C4B,GAAG,EAA9C,EAAkD;AAC9CvC,MAAAA,UAAU,CAACuC,GAAD,CAAV,CAAgBC,IAAhB;AACH;AACJ,GALD;;AAOAnD,EAAAA,YAAY,CAACiB,SAAb,CAAuBmC,QAAvB,GAAkC,SAASA,QAAT,CAAmBC,IAAnB,EAAyB;AACvD,QAAIxB,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAIyB,YAAJ;;AAEA,SAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAAK,CAACP,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIQ,KAAK,CAACR,CAAD,CAAL,CAASnB,OAAT,CAAiBmD,IAAjB,KAA0BA,IAA9B,EAAoC;AAChCC,QAAAA,YAAY,GAAGzB,KAAK,CAACR,CAAD,CAApB;AACA;AACH;AACJ;;AAED,WAAOiC,YAAY,IAAIzB,KAAK,CAAC,CAAD,CAA5B;AACH,GAZD;;AAcA7B,EAAAA,YAAY,CAACiB,SAAb,CAAuBsC,aAAvB,GAAuC,SAASA,aAAT,CAAwBC,KAAxB,EAA+B;AAClE,QAAI3B,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAIyB,YAAJ;;AAEA,SAAK,IAAIjC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAAK,CAACP,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIQ,KAAK,CAACR,CAAD,CAAL,CAASoC,GAAT,CAAaC,aAAb,CAA2BF,KAA3B,CAAJ,EAAuC;AACnCF,QAAAA,YAAY,GAAGzB,KAAK,CAACR,CAAD,CAApB;AACA;AACH;AACJ;;AAED,WAAOiC,YAAP;AACH,GAZD;;AAcAtD,EAAAA,YAAY,CAACiB,SAAb,CAAuB0C,UAAvB,GAAoC,SAASA,UAAT,CAAqBnB,IAArB,EAA2B;AAC3D,QAAIE,IAAI,GAAG,KAAKU,QAAL,CAAcZ,IAAI,CAACtC,OAAL,CAAawC,IAA3B,CAAX;AAEAA,IAAAA,IAAI,CAACiB,UAAL,CAAgBnB,IAAhB;AACA,SAAK9B,IAAL,CAAU4B,IAAV,CAAeE,IAAf;AACAA,IAAAA,IAAI,CAACoB,QAAL,GAAgB,IAAhB;AACH,GAND;;AAQA5D,EAAAA,YAAY,CAACiB,SAAb,CAAuB4C,UAAvB,GAAoC,SAASA,UAAT,CAAqBC,YAArB,EAAmC;AACnE,QAAItC,MAAM,GAAG,IAAb;AAEA,QAAIuC,YAAY,GAAG,EAAnB;;AAEA,SAAK,IAAI1C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,IAAL,CAAUY,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,UAAImB,IAAI,GAAGhB,MAAM,CAACd,IAAP,CAAYW,CAAZ,CAAX;;AACA,UAAIyC,YAAY,KAAKtB,IAArB,EAA2B;AACvBuB,QAAAA,YAAY,CAACzB,IAAb,CAAkBE,IAAlB;AACH,OAFD,MAEO;AACHA,QAAAA,IAAI,CAACwB,OAAL;AACH;AACJ;;AAED,SAAKtD,IAAL,GAAYqD,YAAZ;AACH,GAfD;;AAiBA/D,EAAAA,YAAY,CAACiB,SAAb,CAAuBgD,WAAvB,GAAqC,SAASA,WAAT,CAAsBC,KAAtB,EAA6BxB,IAA7B,EAAmC;AACpE,SAAKnC,MAAL,CAAY+B,IAAZ,CAAiB4B,KAAjB;;AACA,QAAIxB,IAAJ,EAAU;AACNA,MAAAA,IAAI,CAACuB,WAAL,CAAiBC,KAAjB;AACH,KAFD,MAEO;AACH,WAAK7E,MAAL,CAAY6E,KAAZ;AACH;AACJ,GAPD;;AASAlE,EAAAA,YAAY,CAACiB,SAAb,CAAuBkD,WAAvB,GAAqC,SAASA,WAAT,CAAsBC,aAAtB,EAAqC;AACtE,QAAI5C,MAAM,GAAG,IAAb;AAEA,QAAI6C,cAAc,GAAG,EAArB;;AAEA,SAAK,IAAIhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKd,MAAL,CAAYe,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AACzC,UAAI6C,KAAK,GAAG1C,MAAM,CAACjB,MAAP,CAAcc,CAAd,CAAZ;;AACA,UAAI6C,KAAK,KAAKE,aAAd,EAA6B;AACzBC,QAAAA,cAAc,CAAC/B,IAAf,CAAoB4B,KAApB;AACH,OAFD,MAEO;AACHA,QAAAA,KAAK,CAACF,OAAN;AACH;AACJ;;AAED,SAAKzD,MAAL,GAAc8D,cAAd;AACH,GAfD;;AAiBArE,EAAAA,YAAY,CAACiB,SAAb,CAAuBqD,WAAvB,GAAqC,SAASA,WAAT,CAAsBrE,MAAtB,EAA8B;AAC/D,QAAIsE,KAAK,GAAGtE,MAAM,CAACqB,MAAnB;AACA,QAAId,MAAM,GAAG,KAAKN,OAAL,CAAaM,MAA1B;AACA,QAAIgE,MAAM,GAAGhE,MAAM,CAACgE,MAAP,IAAiB,EAA9B;AACA,QAAIC,aAAa,GAAGjE,MAAM,CAACiE,aAAP,IAAwB,EAA5C;AACA,QAAIC,mBAAmB,GAAGD,aAAa,CAACD,MAAd,IAAwB,EAAlD;AACA,QAAIG,IAAI,GAAG,EAAX;;AAEA,SAAK,IAAItD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,KAApB,EAA2BlD,CAAC,EAA5B,EAAgC;AAC5B,UAAIuD,aAAa,GAAG3E,MAAM,CAACoB,CAAD,CAA1B;AACA,UAAIwD,aAAa,GAAGD,aAAa,CAAChC,OAAd,KAA0B,KAA9C;;AACA,UAAIgC,aAAa,CAACE,eAAd,KAAkC,KAAtC,EAA6C;AACzC;AACH;;AAED,UAAI3C,IAAI,GAAGyC,aAAa,CAACvB,IAAzB;AACA,UAAI0B,aAAa,GAAGF,aAAa,GAAGpF,WAAW,CAAC+E,MAAD,CAAd,GAAyB/E,WAAW,CAACiF,mBAAD,CAAX,IAAoCjF,WAAW,CAAC+E,MAAD,CAAzG;;AACA,UAAIO,aAAJ,EAAmB;AACf5C,QAAAA,IAAI,GAAG4C,aAAa,CAAC;AACjB5C,UAAAA,IAAI,EAAE1D,QAAQ,CAAC0D,IAAD,CAAR,GAAiBA,IAAjB,GAAwB,EADb;AAEjBlC,UAAAA,MAAM,EAAE2E;AAFS,SAAD,CAApB;AAIH;;AAED,UAAI3C,QAAQ,GAAG2C,aAAa,CAACI,SAA7B;AACA,UAAI9C,KAAK,GAAG0C,aAAa,CAAC1C,KAA1B;;AACA,UAAIvC,UAAU,CAACuC,KAAD,CAAV,IAAqBD,QAAzB,EAAmC;AAC/BC,QAAAA,KAAK,GAAGD,QAAQ,CAACC,KAAjB;AACH;;AAED,UAAI+C,gBAAgB,GAAI,KAAK,CAA7B;AAAA,UAAiCC,WAAW,GAAI,KAAK,CAArD;;AACA,UAAIL,aAAJ,EAAmB;AACfI,QAAAA,gBAAgB,GAAG,EAAnB;AACAC,QAAAA,WAAW,GAAGhD,KAAd;AACH,OAHD,MAGO;AACH+C,QAAAA,gBAAgB,GAAG;AACf/C,UAAAA,KAAK,EAAEwC,mBAAmB,CAACxC,KADZ;AAEfiD,UAAAA,IAAI,EAAET,mBAAmB,CAACS;AAFX,SAAnB;AAIAD,QAAAA,WAAW,GAAGT,aAAa,CAACW,OAAd,CAAsBlD,KAApC;AACH;;AAED,UAAIzD,QAAQ,CAAC0D,IAAD,CAAR,IAAkBA,IAAI,KAAK,EAA/B,EAAmC;AAC/BwC,QAAAA,IAAI,CAACrC,IAAL,CAAU;AACNH,UAAAA,IAAI,EAAEA,IADA;AAENqC,UAAAA,MAAM,EAAES,gBAFF;AAGNC,UAAAA,WAAW,EAAEA,WAHP;AAINjF,UAAAA,MAAM,EAAE2E,aAJF;AAKNS,UAAAA,MAAM,EAAER;AALF,SAAV;AAOH;AACJ;;AAEDxF,IAAAA,MAAM,CAACmB,MAAM,CAACC,KAAR,EAAekE,IAAf,CAAN;AACH,GAtDD;;AAwDA3E,EAAAA,YAAY,CAACiB,SAAb,CAAuBqE,SAAvB,GAAmC,SAASA,SAAT,CAAoBzD,KAApB,EAA2B;AAC1D,QAAI0D,KAAK,GAAG,EAAZ;AACA,QAAIC,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAG5D,KAAK,CAACP,MAApC,EAA4CmE,MAAM,EAAlD,EAAsD;AAClD,UAAIC,QAAQ,GAAG7D,KAAK,CAAC4D,MAAD,CAAL,CAAc/E,IAA7B;;AACA,WAAK,IAAIiF,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGD,QAAQ,CAACpE,MAAvC,EAA+CqE,MAAM,EAArD,EAAyD;AACrD,YAAInD,IAAI,GAAGkD,QAAQ,CAACC,MAAD,CAAnB;;AACA,YAAInD,IAAI,CAACtC,OAAL,CAAa0F,QAAjB,EAA2B;AACvBJ,UAAAA,KAAK,CAAClD,IAAN,CAAWE,IAAX;AACH,SAFD,MAEO;AACH+C,UAAAA,KAAK,CAACjD,IAAN,CAAWE,IAAX;AACH;AACJ;AACJ;;AAED,WAAO;AAAEqD,MAAAA,CAAC,EAAEN,KAAL;AAAYO,MAAAA,CAAC,EAAEN,KAAf;AAAsBO,MAAAA,GAAG,EAAER,KAAK,CAACS,MAAN,CAAaR,KAAb;AAA3B,KAAP;AACH,GAjBD;;AAmBAxF,EAAAA,YAAY,CAACiB,SAAb,CAAuBgF,iBAAvB,GAA2C,SAASA,iBAAT,GAA8B;AACrE,QAAIzE,MAAM,GAAG,IAAb;AAEA,QAAIvB,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIiG,YAAY,GAAG,EAAnB;;AAEA,SAAK,IAAI7E,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,MAAM,CAACqB,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,UAAIuD,aAAa,GAAG3E,MAAM,CAACoB,CAAD,CAA1B;AACA,UAAIqB,IAAI,GAAGlB,MAAM,CAAC2E,cAAP,CAAsBvB,aAAtB,CAAX;;AAEA,UAAIsB,YAAY,CAACxD,IAAD,CAAhB,EAAwB;AACpBwD,QAAAA,YAAY,CAACxD,IAAD,CAAZ,CAAmBJ,IAAnB,CAAwBsC,aAAxB;AACH,OAFD,MAEO;AACHsB,QAAAA,YAAY,CAACxD,IAAD,CAAZ,GAAqB,CAAEkC,aAAF,CAArB;AACH;AACJ;;AAED,WAAOsB,YAAP;AACH,GAlBD;;AAoBAlG,EAAAA,YAAY,CAACiB,SAAb,CAAuBmF,mBAAvB,GAA6C,SAASA,mBAAT,CAA8BnG,MAA9B,EAAsC;AAC/E,QAAIoG,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIhF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,MAAM,CAACqB,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,UAAIuD,aAAa,GAAG3E,MAAM,CAACoB,CAAD,CAA1B;;AACA,UAAIuD,aAAa,CAAChC,OAAd,KAA0B,KAA9B,EAAqC;AACjCyD,QAAAA,MAAM,CAAC/D,IAAP,CAAYsC,aAAZ;AACH;AACJ;;AAED,WAAOyB,MAAP;AACH,GAXD;;AAaArG,EAAAA,YAAY,CAACiB,SAAb,CAAuBqF,MAAvB,GAAgC,SAASA,MAAT,CAAiBC,SAAjB,EAA4B;AACxD,QAAIrG,OAAO,GAAG,KAAKA,OAAL,CAAa0D,QAA3B;AACA,QAAI/B,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAI2E,MAAM,GAAGhH,UAAU,CAACU,OAAO,CAACsG,MAAT,CAAvB;AAEA,SAAK/C,GAAL,GAAW8C,SAAS,CAACE,KAAV,GAAkBC,KAAlB,CAAwBF,MAAxB,CAAX;AACA,SAAKG,WAAL;AAEA,SAAKC,YAAL;AACA,SAAKC,UAAL,CAAgBhF,KAAhB;AACA,SAAKiF,YAAL,CAAkBjF,KAAlB;AACH,GAXD;;AAaA7B,EAAAA,YAAY,CAACiB,SAAb,CAAuB8F,MAAvB,GAAgC,SAASA,MAAT,CAAiBlF,KAAjB,EAAwB;AACpD,QAAIL,MAAM,GAAG,IAAb;AAEA,QAAIwF,UAAU,GAAG,GAAGhB,MAAH,CAAUnE,KAAV,CAAjB;AACA,SAAKvB,UAAL,GAJoD,CAMpD;;AACA,QAAI2G,IAAI,GAAG,KAAKC,OAAL,EAAX;;AACA,QAAID,IAAJ,EAAU;AACNA,MAAAA,IAAI,CAACE,cAAL;AACH;;AAED,SAAK,IAAI9F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2F,UAAU,CAAC1F,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCG,MAAAA,MAAM,CAACuB,gBAAP,CAAwBiE,UAAU,CAAC3F,CAAD,CAAlC;AACA2F,MAAAA,UAAU,CAAC3F,CAAD,CAAV,CAAc+F,KAAd;AACH;;AAED,SAAKtG,MAAL,CAAYkG,UAAZ;AACA,SAAKJ,YAAL;AACA,SAAKC,UAAL,CAAgB,KAAKhF,KAArB;AACA,SAAKiF,YAAL,CAAkBE,UAAlB;AAEA,SAAKjG,gBAAL,CAAsBiG,UAAtB;;AAEA,SAAK,IAAIK,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,UAAU,CAAC1F,MAAnC,EAA2C+F,GAAG,EAA9C,EAAkD;AAC9CL,MAAAA,UAAU,CAACK,GAAD,CAAV,CAAgBC,OAAhB;AACH;AACJ,GA3BD;;AA6BAtH,EAAAA,YAAY,CAACiB,SAAb,CAAuBsG,kBAAvB,GAA4C,SAASA,kBAAT,CAA6B/E,IAA7B,EAAmCgF,YAAnC,EAAiD;AACzF,QAAItH,OAAO,GAAGsC,IAAI,CAACtC,OAAnB;AACA,QAAIuH,cAAc,GAAG,GAAGzB,MAAH,CACjB9F,OAAO,CAACqH,kBAAR,IAA8BrH,OAAO,CAACwH,iBADrB,CAArB;AAGA,QAAIC,WAAW,GAAGH,YAAY,CAAClG,MAAb,GAAsBmG,cAAc,CAACnG,MAAvD;AACA,QAAIsG,YAAY,GAAGH,cAAc,CAAC,CAAD,CAAd,IAAqB,CAAxC;;AAEA,SAAK,IAAIpG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsG,WAApB,EAAiCtG,CAAC,EAAlC,EAAsC;AAClCoG,MAAAA,cAAc,CAACnF,IAAf,CAAoBsF,YAApB;AACH;;AAED,WAAOH,cAAP;AACH,GAbD;;AAeAzH,EAAAA,YAAY,CAACiB,SAAb,CAAuB4G,WAAvB,GAAqC,SAASA,WAAT,CAAsBrF,IAAtB,EAA4BsF,UAA5B,EAAwCC,aAAxC,EAAuDC,mBAAvD,EAA4E;AAC7G,QAAIC,IAAI,GAAGzF,IAAI,CAAC0F,OAAL,CAAaH,aAAb,EAA4BA,aAA5B,EAA2C,IAA3C,CAAX;AACA,QAAII,QAAQ,GAAG3F,IAAI,CAACtC,OAAL,CAAakI,OAAb,GAAuB,CAAvB,GAA2B,CAA1C;AACA,QAAIC,UAAU,GAAGP,UAAU,CAACI,OAAX,CAAmBF,mBAAnB,EAAwCA,mBAAxC,EAA6D,IAA7D,CAAjB;AACA,QAAIM,UAAU,GAAGR,UAAU,CAAC5H,OAAX,CAAmBkI,OAAnB,GAA6B,CAA7B,GAAiC,CAAlD;AACA,QAAIG,OAAO,GAAG/F,IAAI,CAACiB,GAAL,CAAS+E,SAAT,CACVH,UAAU,CAACzJ,CAAC,GAAG0J,UAAL,CAAV,GAA6BL,IAAI,CAACrJ,CAAC,GAAGuJ,QAAL,CADvB,EAEVE,UAAU,CAACxJ,CAAC,GAAGyJ,UAAL,CAAV,GAA6BL,IAAI,CAACpJ,CAAC,GAAGsJ,QAAL,CAFvB,CAAd;;AAKA,QAAI3F,IAAI,CAACE,IAAL,KAAcoF,UAAU,CAACpF,IAA7B,EAAmC;AAC/B6F,MAAAA,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqBhG,IAAI,CAACE,IAAL,CAAUe,GAAV,CAAcgF,EAAd,GAAmBX,UAAU,CAACpF,IAAX,CAAgBe,GAAhB,CAAoBgF,EAA5D;AACH;;AAEDjG,IAAAA,IAAI,CAAC8D,MAAL,CAAYiC,OAAZ;AACH,GAfD;;AAiBAvI,EAAAA,YAAY,CAACiB,SAAb,CAAuByH,SAAvB,GAAmC,SAASA,SAAT,CAAoBnD,KAApB,EAA2BC,KAA3B,EAAkC;AACjE,QAAIhE,MAAM,GAAG,IAAb;AAEA,QAAImH,OAAO,GAAGpD,KAAK,CAAC,CAAD,CAAnB;AACA,QAAIqD,OAAO,GAAGpD,KAAK,CAAC,CAAD,CAAnB;AACA,QAAIqD,gBAAgB,GAAG,KAAKtB,kBAAL,CAAwBoB,OAAxB,EAAiCnD,KAAjC,CAAvB;AACA,QAAIsD,gBAAgB,GAAG,KAAKvB,kBAAL,CAAwBqB,OAAxB,EAAiCrD,KAAjC,CAAvB;AACA,QAAIwD,WAAW,GAAG,EAAlB;AACA,QAAIC,YAAY,GAAG,EAAnB;AACA,QAAIC,UAAU,GAAG,EAAjB;AACA,QAAIC,aAAa,GAAG,EAApB;;AAEA,SAAK,IAAI7H,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGmE,KAAK,CAAClE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAImB,IAAI,GAAGgD,KAAK,CAACnE,CAAD,CAAhB;AACA,UAAIqB,IAAI,GAAGF,IAAI,CAACE,IAAhB;AACA,UAAIyG,MAAM,GAAGzG,IAAI,CAAC0G,EAAlB;AACA,UAAIxG,OAAO,GAAGJ,IAAI,CAACtC,OAAL,CAAa0C,OAAb,KAAyB,KAAvC,CAJmC,CAMnC;;AACA,UAAIyG,MAAM,GAAGC,UAAU,CAAC/D,KAAD,EAAQ7C,IAAR,CAAV,IAA2BiG,OAAxC;AACA,UAAIY,eAAe,GAAGV,gBAAtB;;AAEA,UAAIQ,MAAM,KAAKV,OAAf,EAAwB;AACpBY,QAAAA,eAAe,GAAG/H,MAAM,CAAC+F,kBAAP,CAA0B8B,MAA1B,EAAkC7D,KAAlC,CAAlB;AACH;;AAEDhE,MAAAA,MAAM,CAACqG,WAAP,CAAmBrF,IAAnB,EAAyB6G,MAAzB,EAAiCP,gBAAgB,CAACzH,CAAD,CAAjD,EAAsDkI,eAAe,CAAClI,CAAD,CAArE;;AAEA,UAAImB,IAAI,CAACtC,OAAL,CAAasJ,QAAjB,EAA2B;AACvB;AACH;;AAED,UAAI1J,KAAK,CAAC0C,IAAI,CAACiH,OAAL,GAAeC,EAAhB,CAAL,KAA6B5J,KAAK,CAACuJ,MAAM,CAACI,OAAP,GAAiBC,EAAlB,CAAtC,EAA6D;AACzD;AACA,YAAIX,WAAW,CAACI,MAAD,CAAf,EAAyB;AACrB3G,UAAAA,IAAI,CAAC8D,MAAL,CAAY9D,IAAI,CAACiB,GAAL,CACPkG,OADO,CACCZ,WAAW,CAACI,MAAD,CAAX,CAAoB1F,GADrB,EAC0BxE,IAD1B,EAEPuJ,SAFO,CAEG,CAAChG,IAAI,CAACtC,OAAL,CAAasG,MAFjB,EAEyB,CAFzB,CAAZ;AAIH;;AAED,YAAI5D,OAAJ,EAAa;AACTmG,UAAAA,WAAW,CAACI,MAAD,CAAX,GAAsB3G,IAAtB;AACH;AACJ;;AAED,UAAI1C,KAAK,CAAC0C,IAAI,CAACiH,OAAL,GAAeG,EAAhB,CAAL,KAA6B9J,KAAK,CAACuJ,MAAM,CAACI,OAAP,GAAiBG,EAAlB,CAAtC,EAA6D;AACzD;AACA,YAAI,CAACpH,IAAI,CAACqH,SAAV,EAAqB;AACjBrH,UAAAA,IAAI,CAACtC,OAAL,CAAasE,MAAb,CAAoBsF,MAApB,GAA6B,CAACtH,IAAI,CAACtC,OAAL,CAAasE,MAAb,CAAoBsF,MAAlD;AACAtH,UAAAA,IAAI,CAACqH,SAAL,GAAiB,IAAjB;AACH;;AAEDrI,QAAAA,MAAM,CAACqG,WAAP,CAAmBrF,IAAnB,EAAyB6G,MAAzB,EAAiCP,gBAAgB,CAACzH,CAAD,CAAjD,EAAsDkI,eAAe,CAAClI,CAAD,CAArE,EAPyD,CASzD;;AACA,YAAI2H,YAAY,CAACG,MAAD,CAAhB,EAA0B;AACtB3G,UAAAA,IAAI,CAAC8D,MAAL,CAAY9D,IAAI,CAACiB,GAAL,CACPkG,OADO,CACCX,YAAY,CAACG,MAAD,CAAZ,CAAqB1F,GADtB,EAC2BvE,KAD3B,EAEPsJ,SAFO,CAEGhG,IAAI,CAACtC,OAAL,CAAasG,MAFhB,EAEwB,CAFxB,CAAZ;AAIH;;AAED,YAAI5D,OAAJ,EAAa;AACToG,UAAAA,YAAY,CAACG,MAAD,CAAZ,GAAuB3G,IAAvB;AACH;AACJ;;AAED,UAAInB,CAAC,KAAK,CAAN,IAAWuH,OAAO,CAAClG,IAAR,KAAiBF,IAAI,CAACE,IAArC,EAA2C;AACvCF,QAAAA,IAAI,CAACmH,OAAL,CAAaf,OAAb;AACApG,QAAAA,IAAI,CAAC8D,MAAL,CAAY9D,IAAI,CAACiB,GAAjB;AACH;AACJ;;AAED,SAAK,IAAI4D,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG9B,KAAK,CAACjE,MAA9B,EAAsC+F,GAAG,EAAzC,EAA6C;AACzC,UAAI0C,MAAM,GAAGxE,KAAK,CAAC8B,GAAD,CAAlB;AACA,UAAI2C,MAAM,GAAGD,MAAM,CAACrH,IAApB;AACA,UAAIuH,QAAQ,GAAGD,MAAM,CAACZ,EAAtB;AACA,UAAIc,SAAS,GAAGH,MAAM,CAAC7J,OAAP,CAAe0C,OAAf,KAA2B,KAA3C,CAJyC,CAMzC;;AACA,UAAIuH,QAAQ,GAAGb,UAAU,CAAC9D,KAAD,EAAQwE,MAAR,CAAV,IAA6BpB,OAA5C;AACA,UAAIwB,iBAAiB,GAAGtB,gBAAxB;;AACA,UAAIqB,QAAQ,KAAKvB,OAAjB,EAA0B;AACtBwB,QAAAA,iBAAiB,GAAG5I,MAAM,CAAC+F,kBAAP,CAA0B4C,QAA1B,EAAoC5E,KAApC,CAApB;AACH;;AAED/D,MAAAA,MAAM,CAACqG,WAAP,CAAmBkC,MAAnB,EAA2BI,QAA3B,EAAqCtB,gBAAgB,CAACxB,GAAD,CAArD,EAA4D+C,iBAAiB,CAAC/C,GAAD,CAA7E;;AAEA,UAAI0C,MAAM,CAAC7J,OAAP,CAAesJ,QAAnB,EAA6B;AACzB;AACH;;AAED,UAAI1J,KAAK,CAACiK,MAAM,CAACN,OAAP,GAAiBhB,EAAlB,CAAL,KAA+B3I,KAAK,CAACqK,QAAQ,CAACV,OAAT,GAAmBhB,EAApB,CAAxC,EAAiE;AAC7D;AACA,YAAI,CAACsB,MAAM,CAACF,SAAZ,EAAuB;AACnBE,UAAAA,MAAM,CAAC7J,OAAP,CAAesE,MAAf,CAAsBsF,MAAtB,GAA+B,CAACC,MAAM,CAAC7J,OAAP,CAAesE,MAAf,CAAsBsF,MAAtD;AACAC,UAAAA,MAAM,CAACF,SAAP,GAAmB,IAAnB;AACH;;AACDrI,QAAAA,MAAM,CAACqG,WAAP,CAAmBkC,MAAnB,EAA2BI,QAA3B,EAAqCtB,gBAAgB,CAACxB,GAAD,CAArD,EAA4D+C,iBAAiB,CAAC/C,GAAD,CAA7E,EAN6D,CAQ7D;;AACA,YAAI4B,UAAU,CAACgB,QAAD,CAAd,EAA0B;AACtBF,UAAAA,MAAM,CAACzD,MAAP,CAAcyD,MAAM,CAACtG,GAAP,CACTkG,OADS,CACDV,UAAU,CAACgB,QAAD,CAAV,CAAqBxG,GADpB,EACyB1E,GADzB,EAETyJ,SAFS,CAEC,CAFD,EAEI,CAACuB,MAAM,CAAC7J,OAAP,CAAesG,MAFpB,CAAd;AAIH;;AAED,YAAI0D,SAAJ,EAAe;AACXjB,UAAAA,UAAU,CAACgB,QAAD,CAAV,GAAuBF,MAAvB;AACH;AACJ;;AAED,UAAIjK,KAAK,CAACiK,MAAM,CAACN,OAAP,GAAiBY,EAAlB,EAAsBvL,eAAtB,CAAL,KAAgDgB,KAAK,CAACqK,QAAQ,CAACV,OAAT,GAAmBY,EAApB,EAAwBvL,eAAxB,CAAzD,EAAmG;AAC/F;AACA,YAAIoK,aAAa,CAACe,QAAD,CAAjB,EAA6B;AACzBF,UAAAA,MAAM,CAACzD,MAAP,CAAcyD,MAAM,CAACtG,GAAP,CACTkG,OADS,CACDT,aAAa,CAACe,QAAD,CAAb,CAAwBxG,GADvB,EAC4BzE,MAD5B,EAETwJ,SAFS,CAEC,CAFD,EAEIuB,MAAM,CAAC7J,OAAP,CAAesG,MAFnB,CAAd;AAIH;;AAED,YAAI0D,SAAJ,EAAe;AACXhB,UAAAA,aAAa,CAACe,QAAD,CAAb,GAA0BF,MAA1B;AACH;AACJ;;AAED,UAAI1C,GAAG,KAAK,CAAZ,EAAe;AACX0C,QAAAA,MAAM,CAACJ,OAAP,CAAehB,OAAf;AACAoB,QAAAA,MAAM,CAACzD,MAAP,CAAcyD,MAAM,CAACtG,GAArB;AACH;AACJ;AACJ,GArID;;AAuIAzD,EAAAA,YAAY,CAACiB,SAAb,CAAuBqJ,eAAvB,GAAyC,SAASA,eAAT,CAA0BzI,KAA1B,EAAiC;AACtE,QAAInB,IAAI,GAAG,KAAK4E,SAAL,CAAezD,KAAf,EAAsBkE,GAAjC;AACA,QAAIwC,OAAO,GAAGgC,YAAY,CAAC7J,IAAD,CAA1B;AACA,QAAI8J,SAAS,GAAG,CAAhB;;AAEA,SAAK,IAAInJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAAK,CAACP,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIe,WAAW,GAAGP,KAAK,CAACR,CAAD,CAAvB;;AAEA,UAAIe,WAAW,CAAC1B,IAAZ,CAAiBY,MAAjB,GAA0B,CAA9B,EAAiC;AAC7BkJ,QAAAA,SAAS,GAAGzI,IAAI,CAACC,GAAL,CACRwI,SADQ,EAERjC,OAAO,CAACkC,KAAR,KAAkBrI,WAAW,CAACsI,UAAZ,CAAuBD,KAAvB,EAFV,CAAZ;AAIH;AACJ;;AAED,QAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,WAAK,IAAInD,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG3G,IAAI,CAACY,MAA7B,EAAqC+F,GAAG,EAAxC,EAA4C;AACxC,YAAIsD,WAAW,GAAGjK,IAAI,CAAC2G,GAAD,CAAtB;;AAEA,YAAI,CAACsD,WAAW,CAACzK,OAAZ,CAAoB0F,QAAzB,EAAmC;AAC/B+E,UAAAA,WAAW,CAACrE,MAAZ,CAAmBqE,WAAW,CAAClH,GAAZ,CAAgBmH,MAAhB,CAAuBJ,SAAvB,EAAkC,CAAlC,CAAnB;AACH;AACJ;AACJ;AACJ,GAzBD;;AA2BAxK,EAAAA,YAAY,CAACiB,SAAb,CAAuB4J,gBAAvB,GAA0C,SAASA,gBAAT,CAA2BhJ,KAA3B,EAAkC;AACxE,QAAIiJ,QAAJ;;AAEA,SAAK,IAAIzJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAAK,CAACP,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIe,WAAW,GAAGP,KAAK,CAACR,CAAD,CAAvB;AACA,UAAIX,IAAI,GAAG0B,WAAW,CAAC1B,IAAvB;AACA,UAAIqK,SAAS,GAAGhJ,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYuI,YAAY,CAAC7J,IAAD,CAAZ,CAAmBsK,MAAnB,KAA8B5I,WAAW,CAACsI,UAAZ,CAAuBM,MAAvB,EAA1C,CAAhB;;AAEA,UAAID,SAAS,KAAK,CAAlB,EAAqB;AACjB,aAAK,IAAIpI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjC,IAAI,CAACY,MAAzB,EAAiCqB,CAAC,EAAlC,EAAsC;AAClC,cAAIgI,WAAW,GAAGjK,IAAI,CAACiC,CAAD,CAAtB;;AAEA,cAAIgI,WAAW,CAACzK,OAAZ,CAAoB0F,QAAxB,EAAkC;AAC9B+E,YAAAA,WAAW,CAACrE,MAAZ,CACIqE,WAAW,CAAClH,GAAZ,CAAgBmH,MAAhB,CAAuB,CAAvB,EAA0BG,SAA1B,CADJ;AAGH;AACJ;;AACDD,QAAAA,QAAQ,GAAG,IAAX;AACH;AACJ;;AAED,WAAOA,QAAP;AACH,GAvBD;;AAyBA9K,EAAAA,YAAY,CAACiB,SAAb,CAAuBgK,OAAvB,GAAiC,SAASA,OAAT,CAAkBpJ,KAAlB,EAAyB;AACtD,QAAInB,IAAI,GAAG,KAAK4E,SAAL,CAAezD,KAAf,EAAsBkE,GAAjC;AACA,QAAImF,OAAO,GAAG,CAAd;;AAEA,SAAK,IAAI7J,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAAK,CAACP,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIe,WAAW,GAAGP,KAAK,CAACR,CAAD,CAAvB;AACA,UAAIqE,QAAQ,GAAGtD,WAAW,CAAC1B,IAA3B;AACA,UAAIyK,OAAO,GAAG/I,WAAW,CAACsI,UAA1B;;AAEA,UAAIhF,QAAQ,CAACpE,MAAT,GAAkB,CAAtB,EAAyB;AACrB,YAAIiH,OAAO,GAAGgC,YAAY,CAAC7E,QAAD,CAA1B,CADqB,CAErB;;AACA,YAAI0F,OAAO,GAAGrJ,IAAI,CAACC,GAAL,CAASmJ,OAAO,CAAC1C,EAAR,GAAaF,OAAO,CAACE,EAA9B,EAAkC0C,OAAO,CAACd,EAAR,GAAa9B,OAAO,CAAC8B,EAAvD,CAAd,CAHqB,CAKrB;;AACAa,QAAAA,OAAO,GAAGnJ,IAAI,CAACC,GAAL,CAASkJ,OAAT,EAAkBC,OAAO,CAACzB,EAAR,GAAanB,OAAO,CAACmB,EAAvC,CAAV;;AAGA,aAAK,IAAI/G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG+C,QAAQ,CAACpE,MAA7B,EAAqCqB,CAAC,EAAtC,EAA0C;AACtC,cAAIgI,WAAW,GAAGjF,QAAQ,CAAC/C,CAAD,CAA1B;AAEAgI,UAAAA,WAAW,CAACrE,MAAZ,CACIqE,WAAW,CAAClH,GAAZ,CAAgB+E,SAAhB,CAA0B,CAA1B,EAA6B4C,OAA7B,CADJ;AAGH;AACJ;AACJ;;AAED,SAAK,IAAI/D,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG3G,IAAI,CAACY,MAA7B,EAAqC+F,GAAG,EAAxC,EAA4C;AACxC,UAAIgE,aAAa,GAAG3K,IAAI,CAAC2G,GAAD,CAAxB;AAEAgE,MAAAA,aAAa,CAAC/E,MAAd,CACI+E,aAAa,CAAC5H,GAAd,CAAkB+E,SAAlB,CAA4B0C,OAA5B,EAAqC,CAArC,CADJ;AAGH;AACJ,GAnCD;;AAqCAlL,EAAAA,YAAY,CAACiB,SAAb,CAAuB4F,UAAvB,GAAoC,SAASA,UAAT,CAAqBhF,KAArB,EAA4B;AAC5D,QAAIL,MAAM,GAAG,IAAb;AAEA,QAAId,IAAI,GAAG,KAAK4E,SAAL,CAAezD,KAAf,CAAX;;AAEA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAAK,CAACP,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnCG,MAAAA,MAAM,CAAC8J,cAAP,CAAsBzJ,KAAK,CAACR,CAAD,CAA3B;AACH;;AAED,QAAIX,IAAI,CAACmF,CAAL,CAAOvE,MAAP,GAAgB,CAAhB,IAAqBZ,IAAI,CAACoF,CAAL,CAAOxE,MAAP,GAAgB,CAAzC,EAA4C;AACxC,WAAKoH,SAAL,CAAehI,IAAI,CAACmF,CAApB,EAAuBnF,IAAI,CAACoF,CAA5B;AACA,WAAKwE,eAAL,CAAqBzI,KAArB;AAEA,WAAK0J,oBAAL,CAA0B7K,IAA1B;AAEA,WAAKgI,SAAL,CAAehI,IAAI,CAACmF,CAApB,EAAuBnF,IAAI,CAACoF,CAA5B;;AACA,UAAI,KAAKwE,eAAL,CAAqBzI,KAArB,CAAJ,EAAiC;AAC7B,aAAK6G,SAAL,CAAehI,IAAI,CAACmF,CAApB,EAAuBnF,IAAI,CAACoF,CAA5B;AACH;;AAED,WAAK+E,gBAAL,CAAsBhJ,KAAtB;AACA,WAAK6G,SAAL,CAAehI,IAAI,CAACmF,CAApB,EAAuBnF,IAAI,CAACoF,CAA5B;;AAEA,UAAI,KAAK+E,gBAAL,CAAsBhJ,KAAtB,CAAJ,EAAkC;AAC9B,aAAK6G,SAAL,CAAehI,IAAI,CAACmF,CAApB,EAAuBnF,IAAI,CAACoF,CAA5B;AACH;;AAED,WAAKmF,OAAL,CAAapJ,KAAb;AACH;AACJ,GA7BD;;AA+BA7B,EAAAA,YAAY,CAACiB,SAAb,CAAuBsK,oBAAvB,GAA8C,SAASA,oBAAT,CAA+BC,WAA/B,EAA4C;AACtF,QAAIhK,MAAM,GAAG,IAAb;AAEA,QAAIiK,GAAG,GAAG,IAAV;AACA,QAAI5J,KAAK,GAAG4J,GAAG,CAAC5J,KAAhB;AACA,QAAInB,IAAI,GAAGgL,WAAW,CAAC7J,KAAD,CAAtB;AACA,QAAI8J,OAAJ;;AAEA,SAAK,IAAIzI,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGxC,IAAI,CAACY,MAA7B,EAAqC4B,GAAG,EAAxC,EAA4C;AACxC,UAAIV,IAAI,GAAG9B,IAAI,CAACwC,GAAD,CAAf;;AACA,UAAIV,IAAI,CAACoJ,gBAAL,EAAJ,EAA6B;AACzBD,QAAAA,OAAO,GAAG,IAAV;AACH;AACJ;;AAED,QAAIA,OAAJ,EAAa;AACT,WAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGhK,KAAK,CAACP,MAAlC,EAA0CuK,KAAK,EAA/C,EAAmD;AAC/CrK,QAAAA,MAAM,CAAC8J,cAAP,CAAsBzJ,KAAK,CAACgK,KAAD,CAA3B;AACH;;AAED,UAAIL,WAAW,CAAC3F,CAAZ,CAAcvE,MAAd,GAAuB,CAAvB,IAA4BkK,WAAW,CAAC1F,CAAZ,CAAcxE,MAAd,GAAuB,CAAvD,EAA0D;AACtD,aAAKoH,SAAL,CAAe8C,WAAW,CAAC3F,CAA3B,EAA8B2F,WAAW,CAAC1F,CAA1C;AACA,aAAKwE,eAAL,CAAqBzI,KAArB;AACH;AACJ;AACJ,GAzBD;;AA2BA7B,EAAAA,YAAY,CAACiB,SAAb,CAAuBqK,cAAvB,GAAwC,SAASA,cAAT,CAAyB5I,IAAzB,EAA+B;AACnE,QAAIhC,IAAI,GAAGgC,IAAI,CAAChC,IAAhB;AACA,QAAIY,MAAM,GAAGZ,IAAI,CAACY,MAAlB;;AAEA,QAAIA,MAAM,GAAG,CAAb,EAAgB;AACZ,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC7BX,QAAAA,IAAI,CAACW,CAAD,CAAJ,CAAQiF,MAAR,CAAe5D,IAAI,CAACgI,UAApB;AACH;AACJ;AACJ,GATD;;AAWA1K,EAAAA,YAAY,CAACiB,SAAb,CAAuB6F,YAAvB,GAAsC,SAASA,YAAT,CAAuBjF,KAAvB,EAA8B;AAChE,QAAItB,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIgE,KAAK,GAAGhE,MAAM,CAACe,MAAnB;AACA,QAAImC,GAAG,GAAG,KAAKA,GAAf;;AAEA,SAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkD,KAApB,EAA2BlD,CAAC,EAA5B,EAAgC;AAC5B,UAAIyK,SAAS,GAAGvL,MAAM,CAACc,CAAD,CAAN,CAAUqB,IAA1B;;AACA,UAAI,CAACoJ,SAAD,IAAcpM,OAAO,CAACoM,SAAD,EAAYjK,KAAZ,CAAzB,EAA6C;AACzCtB,QAAAA,MAAM,CAACc,CAAD,CAAN,CAAUiF,MAAV,CAAiB7C,GAAjB;AACH;AACJ;AACJ,GAXD;;AAaAzD,EAAAA,YAAY,CAACiB,SAAb,CAAuB0F,WAAvB,GAAqC,SAASA,WAAT,GAAwB;AACzD,QAAI8E,GAAG,GAAG,IAAV;AACA,QAAIhI,GAAG,GAAGgI,GAAG,CAAChI,GAAd;AACA,QAAI5B,KAAK,GAAG4J,GAAG,CAAC5J,KAAhB;AACA,QAAIC,WAAW,GAAGD,KAAK,CAACP,MAAxB;AACA,QAAIyK,eAAe,GAAGtI,GAAG,CAACuH,MAAJ,EAAtB;AACA,QAAIgB,cAAc,GAAGlK,WAArB;AACA,QAAImK,eAAe,GAAG,CAAtB;AACA,QAAIC,GAAG,GAAGzI,GAAG,CAACgF,EAAd;;AAEA,SAAK,IAAIpH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,WAApB,EAAiCT,CAAC,EAAlC,EAAsC;AAClC,UAAIe,WAAW,GAAGP,KAAK,CAACR,CAAD,CAAvB;AACA,UAAI2J,MAAM,GAAG5I,WAAW,CAAClC,OAAZ,CAAoB8K,MAAjC;AAEA5I,MAAAA,WAAW,CAAClC,OAAZ,CAAoBuK,KAApB,GAA4BhH,GAAG,CAACgH,KAAJ,EAA5B;;AAEA,UAAI,CAACrI,WAAW,CAAClC,OAAZ,CAAoB8K,MAAzB,EAAiC;AAC7BiB,QAAAA,eAAe;AAClB,OAFD,MAEO;AACH,YAAIjB,MAAM,CAACmB,OAAP,IAAkBnB,MAAM,CAACmB,OAAP,CAAe,GAAf,CAAtB,EAA2C;AACvC,cAAIC,QAAQ,GAAGC,QAAQ,CAACrB,MAAD,EAAS,EAAT,CAAR,GAAuB,GAAtC;AACA5I,UAAAA,WAAW,CAAClC,OAAZ,CAAoB8K,MAApB,GAA6BoB,QAAQ,GAAG3I,GAAG,CAACuH,MAAJ,EAAxC;AACH;;AAED5I,QAAAA,WAAW,CAACkE,MAAZ,CAAmB7C,GAAG,CAACgD,KAAJ,EAAnB;AAEAsF,QAAAA,eAAe,IAAI3J,WAAW,CAAClC,OAAZ,CAAoB8K,MAAvC;AACH;AACJ;;AAED,SAAK,IAAI3D,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGvF,WAAxB,EAAqCuF,GAAG,EAAxC,EAA4C;AACxC,UAAIiF,aAAa,GAAGzK,KAAK,CAACwF,GAAD,CAAzB;;AAEA,UAAI,CAACiF,aAAa,CAACpM,OAAd,CAAsB8K,MAA3B,EAAmC;AAC/BsB,QAAAA,aAAa,CAACpM,OAAd,CAAsB8K,MAAtB,GAA+Be,eAAe,GAAGE,eAAjD;AACH;AACJ;;AAED,SAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGzK,WAAxB,EAAqCyK,GAAG,EAAxC,EAA4C;AACxC,UAAIC,aAAa,GAAG3K,KAAK,CAAC0K,GAAD,CAAzB;AACA,UAAIpB,OAAO,GAAG1H,GAAG,CACZgD,KADS,GAETgG,IAFS,CAEJhJ,GAAG,CAACiG,EAFA,EAEIwC,GAFJ,CAAd;AAIAM,MAAAA,aAAa,CAAClG,MAAd,CAAqB6E,OAArB;AAEAa,MAAAA,cAAc;AACdE,MAAAA,GAAG,IAAIM,aAAa,CAACtM,OAAd,CAAsB8K,MAA7B;AACH;AACJ,GAjDD;;AAmDAhL,EAAAA,YAAY,CAACiB,SAAb,CAAuByL,aAAvB,GAAuC,SAASA,aAAT,GAA0B;AAC7D,QAAIhM,IAAI,GAAG,KAAKA,IAAhB;AACA,QAAIiM,SAAS,GAAGjM,IAAI,CAACY,MAArB;AACA,QAAImC,GAAJ;;AAEA,SAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsL,SAApB,EAA+BtL,CAAC,EAAhC,EAAoC;AAChC,UAAIuL,KAAK,GAAGlM,IAAI,CAACW,CAAD,CAAhB;;AAEA,WAAK,IAAIsB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgK,SAApB,EAA+BhK,CAAC,EAAhC,EAAoC;AAChC,YAAIkK,KAAK,GAAGnM,IAAI,CAACiC,CAAD,CAAhB;;AAEA,YAAIiK,KAAK,CAAC1M,OAAN,CAAc0F,QAAd,KAA2BiH,KAAK,CAAC3M,OAAN,CAAc0F,QAA7C,EAAuD;AACnD,cAAI6D,OAAO,GAAGmD,KAAK,CAACnD,OAAN,GAAgBhD,KAAhB,GAAwBqG,IAAxB,CAA6BD,KAAK,CAACpD,OAAN,EAA7B,CAAd;;AAEA,cAAI,CAAChG,GAAL,EAAU;AACNA,YAAAA,GAAG,GAAGgG,OAAN;AACH,WAFD,MAEO;AACHhG,YAAAA,GAAG,GAAGA,GAAG,CAACqJ,IAAJ,CAASrD,OAAT,CAAN;AACH;AACJ;AACJ;AACJ;;AAED,WAAOhG,GAAG,IAAI,KAAKA,GAAnB;AACH,GAxBD;;AA0BAzD,EAAAA,YAAY,CAACiB,SAAb,CAAuB8L,WAAvB,GAAqC,SAASA,WAAT,GAAwB;AACzD,QAAIlL,KAAK,GAAG,KAAKA,KAAjB;AACA,QAAImL,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAI9J,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGrB,KAAK,CAACP,MAA9B,EAAsC4B,GAAG,EAAzC,EAA6C;AACzC8J,MAAAA,KAAK,CAAC1K,IAAN,CAAWT,KAAK,CAACqB,GAAD,CAAL,CAAW+J,SAAX,EAAX;AACH;;AAED,WAAOD,KAAP;AACH,GATD;;AAWAhN,EAAAA,YAAY,CAACiB,SAAb,CAAuBiM,kBAAvB,GAA4C,SAASA,kBAAT,CAA6BC,SAA7B,EAAwC;AAChF,QAAIH,KAAK,GAAG,KAAKD,WAAL,EAAZ;;AACA,SAAK,IAAI7J,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG8J,KAAK,CAAC1L,MAA9B,EAAsC4B,GAAG,EAAzC,EAA6C;AACzCiK,MAAAA,SAAS,CAACC,KAAV,CAAgB9K,IAAhB,CAAqBlE,IAAI,CAACiP,IAAL,CAAUC,QAAV,CAAmBN,KAAK,CAAC9J,GAAD,CAAL,CAAWqK,MAAX,EAAnB,CAArB;AACH;AACJ,GALD;;AAOAvN,EAAAA,YAAY,CAACiB,SAAb,CAAuBuM,uBAAvB,GAAiD,SAASA,uBAAT,CAAkChK,KAAlC,EAAyC;AACtF,QAAIwJ,KAAK,GAAG,KAAKD,WAAL,EAAZ;;AACA,SAAK,IAAI7J,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG8J,KAAK,CAAC1L,MAA9B,EAAsC4B,GAAG,EAAzC,EAA6C;AACzC,UAAI8J,KAAK,CAAC9J,GAAD,CAAL,CAAWQ,aAAX,CAAyBF,KAAzB,CAAJ,EAAqC;AACjC,eAAO,IAAP;AACH;AACJ;AACJ,GAPD;;AASAxD,EAAAA,YAAY,CAACiB,SAAb,CAAuBwM,YAAvB,GAAsC,SAASA,YAAT,GAAyB;AAC3DpP,IAAAA,YAAY,CAAC4C,SAAb,CAAuBwM,YAAvB,CAAoCrN,IAApC,CAAyC,IAAzC;AAEA,QAAIF,OAAO,GAAG,KAAKA,OAAL,CAAa0D,QAA3B;AACA,QAAI8J,OAAO,GAAGxN,OAAO,CAACwN,OAAtB;AACA,QAAIC,UAAU,GAAGzN,OAAO,CAACyN,UAAzB;AACA,QAAIC,MAAM,GAAG1N,OAAO,CAAC0N,MAArB;AAA6B,QAAKA,MAAM,KAAK,KAAK,CAArB,EAAyBA,MAAM,GAAG,EAAT;;AACtD,QAAIC,aAAa,CAACF,UAAD,CAAjB,EAA+B;AAC3BA,MAAAA,UAAU,GAAGjP,KAAb;AACAgP,MAAAA,OAAO,GAAG,CAAV;AACH;;AAED,QAAII,EAAE,GAAG,KAAKC,SAAL,GAAiB,IAAI3P,IAAI,CAAC4P,SAAT,CAAmB;AACzCC,MAAAA,IAAI,EAAE;AACF/L,QAAAA,KAAK,EAAEyL,UADL;AAEFD,QAAAA,OAAO,EAAEA;AAFP,OADmC;AAKzCQ,MAAAA,MAAM,EAAE;AACJhM,QAAAA,KAAK,EAAE0L,MAAM,CAACnD,KAAP,GAAemD,MAAM,CAAC1L,KAAtB,GAA8B,EADjC;AAEJuI,QAAAA,KAAK,EAAEmD,MAAM,CAACnD,KAFV;AAGJ0D,QAAAA,QAAQ,EAAEP,MAAM,CAACO;AAHb,OALiC;AAUzCC,MAAAA,MAAM,EAAE,CAAC;AAVgC,KAAnB,CAA1B;AAaA,SAAKlB,kBAAL,CAAwBY,EAAxB;AAEA,SAAKO,YAAL,CAAkBP,EAAlB;AACH,GA5BD;;AA8BA9N,EAAAA,YAAY,CAACiB,SAAb,CAAuBqN,qBAAvB,GAA+C,SAASA,qBAAT,CAAgCC,aAAhC,EAA+C;AAC1F,QAAIhO,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAI8F,MAAM,GAAG,EAAb;;AAEA,QAAIkI,aAAa,KAAK,IAAtB,EAA4B;AACxB,WAAK,IAAIlN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACe,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,YAAI6C,KAAK,GAAG3D,MAAM,CAACc,CAAD,CAAlB;;AACA,YAAI6C,KAAK,CAACxB,IAAN,CAAWxC,OAAX,CAAmBmD,IAAnB,KAA4B,YAAhC,EAA8C;AAC1C;AACH;;AAED,YAAImL,MAAM,GAAGjO,MAAM,CAACc,CAAD,CAAN,CAAUoN,cAAV,CAAyBF,aAAzB,CAAb;;AACA,YAAIC,MAAM,IAAIA,MAAM,CAAClN,MAArB,EAA6B;AACzB,eAAK,IAAIqB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6L,MAAM,CAAClN,MAA3B,EAAmCqB,CAAC,EAApC,EAAwC;AACpC,gBAAIa,KAAK,GAAGgL,MAAM,CAAC7L,CAAD,CAAlB;;AACA,gBAAIa,KAAK,IAAIjE,OAAO,CAACiE,KAAK,CAACkL,KAAP,CAAhB,IAAiClL,KAAK,CAACkL,KAAN,KAAgB,IAArD,EAA2D;AACvDrI,cAAAA,MAAM,CAAC/D,IAAP,CAAYkB,KAAZ;AACH;AACJ;AACJ;AACJ;AACJ;;AAED,WAAO6C,MAAP;AACH,GAxBD;;AA0BArG,EAAAA,YAAY,CAACiB,SAAb,CAAuB0N,mBAAvB,GAA6C,SAASA,mBAAT,CAA8BC,WAA9B,EAA2C;AACpF,WAAO,KAAKC,YAAL,CAAkB,UAASrL,KAAT,EAAgB;AACrC,aAAOA,KAAK,CAACvD,MAAN,CAAasB,KAAb,KAAuBqN,WAA9B;AACH,KAFM,CAAP;AAGH,GAJD;;AAMA5O,EAAAA,YAAY,CAACiB,SAAb,CAAuB6N,kBAAvB,GAA4C,SAASA,kBAAT,CAA6BzL,IAA7B,EAAmC;AAC3E,WAAO,KAAKwL,YAAL,CAAkB,UAASrL,KAAT,EAAgB;AACrC,aAAOA,KAAK,CAACvD,MAAN,CAAaoD,IAAb,KAAsBA,IAA7B;AACH,KAFM,CAAP;AAGH,GAJD;;AAMArD,EAAAA,YAAY,CAACiB,SAAb,CAAuB4N,YAAvB,GAAsC,SAASA,YAAT,CAAuBE,QAAvB,EAAiC;AACnE,QAAIxO,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAI8F,MAAM,GAAG,EAAb;;AAEA,SAAK,IAAIhF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACe,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,UAAI6C,KAAK,GAAG3D,MAAM,CAACc,CAAD,CAAlB;AACA,UAAImN,MAAM,GAAGtK,KAAK,CAACsK,MAAnB;;AACA,WAAK,IAAI7L,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6L,MAAM,CAAClN,MAA3B,EAAmCqB,CAAC,EAApC,EAAwC;AACpC,YAAIa,KAAK,GAAGgL,MAAM,CAAC7L,CAAD,CAAlB;;AACA,YAAIa,KAAK,IAAIA,KAAK,CAACZ,OAAN,KAAkB,KAA3B,IAAoCmM,QAAQ,CAACvL,KAAD,CAAhD,EAAyD;AACrD6C,UAAAA,MAAM,CAAC/D,IAAP,CAAYkB,KAAZ;AACH;AACJ;AACJ;;AAED,WAAO6C,MAAP;AACH,GAhBD;;AAkBArG,EAAAA,YAAY,CAACiB,SAAb,CAAuB+N,SAAvB,GAAmC,SAASA,SAAT,CAAoBD,QAApB,EAA8B;AAC7D,QAAIxO,MAAM,GAAG,KAAKA,MAAlB;;AAEA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACe,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,UAAI6C,KAAK,GAAG3D,MAAM,CAACc,CAAD,CAAlB;AACA,UAAImN,MAAM,GAAGtK,KAAK,CAACsK,MAAnB;;AACA,WAAK,IAAI7L,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6L,MAAM,CAAClN,MAA3B,EAAmCqB,CAAC,EAApC,EAAwC;AACpC,YAAIa,KAAK,GAAGgL,MAAM,CAAC7L,CAAD,CAAlB;;AACA,YAAIa,KAAK,IAAIA,KAAK,CAACZ,OAAN,KAAkB,KAA3B,IAAoCmM,QAAQ,CAACvL,KAAD,CAAhD,EAAyD;AACrD,iBAAOA,KAAP;AACH;AACJ;AACJ;AACJ,GAbD;;AAeAxD,EAAAA,YAAY,CAACiB,SAAb,CAAuBgO,WAAvB,GAAqC,SAASA,WAAT,CAAsBzL,KAAtB,EAA6B;AAC9D,QAAI3B,KAAK,GAAG,KAAKA,KAAjB;;AAEA,SAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAAK,CAACP,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,UAAIqB,IAAI,GAAGb,KAAK,CAACR,CAAD,CAAhB;;AACA,UAAIqB,IAAI,CAACe,GAAL,CAASC,aAAT,CAAuBF,KAAvB,CAAJ,EAAmC;AAC/B,eAAOd,IAAP;AACH;AACJ;AACJ,GATD;;AAWA1C,EAAAA,YAAY,CAACiB,SAAb,CAAuB2F,YAAvB,GAAsC,SAASA,YAAT,GAAyB;AAC3D,QAAIlG,IAAI,GAAG,KAAK4E,SAAL,CAAe,KAAKzD,KAApB,CAAX;AACA,QAAI0D,KAAK,GAAG7E,IAAI,CAACmF,CAAjB;AACA,QAAIL,KAAK,GAAG9E,IAAI,CAACoF,CAAjB;AAEA,SAAKoJ,qBAAL,CAA2B1J,KAA3B,EAAkCD,KAAlC;AACA,SAAK2J,qBAAL,CAA2B3J,KAA3B,EAAkCC,KAAlC;AACH,GAPD;;AASAxF,EAAAA,YAAY,CAACiB,SAAb,CAAuBiO,qBAAvB,GAA+C,SAASA,qBAAT,CAAgCxO,IAAhC,EAAsC8G,YAAtC,EAAoD;AAC/F,QAAIhG,MAAM,GAAG,IAAb;AAEA,QAAI2N,cAAc,GAAG,CAArB;;AAEA,SAAK,IAAI9N,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACY,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,UAAImB,IAAI,GAAG9B,IAAI,CAACW,CAAD,CAAf;AACA,UAAIqB,IAAI,GAAGF,IAAI,CAACE,IAAhB;AACA,UAAI2G,MAAM,GAAGC,UAAU,CAAC9B,YAAD,EAAe9E,IAAf,CAAV,IAAkC8E,YAAY,CAAC,CAAD,CAA3D;AACA,UAAI4H,SAAS,GAAG/N,CAAC,GAAG8N,cAApB;AACA,UAAIE,SAAS,GAAG7N,MAAM,CAAC8N,eAAP,CAAuB9M,IAAvB,EAA6B4M,SAA7B,EAAwC/F,MAAxC,CAAhB;;AAEA,UAAIgG,SAAJ,EAAe;AACXF,QAAAA,cAAc;AAEd,YAAII,GAAG,GAAG7M,IAAI,CAAChC,IAAL,CAAUyL,OAAV,CAAkB3J,IAAlB,IAA0B2M,cAApC;AACAzM,QAAAA,IAAI,CAAC8M,YAAL,CAAkBH,SAAlB,EAA6BE,GAA7B;AACH;AACJ;AACJ,GAnBD;;AAqBAvP,EAAAA,YAAY,CAACiB,SAAb,CAAuBqO,eAAvB,GAAyC,SAASA,eAAT,CAA0B9M,IAA1B,EAAgC4M,SAAhC,EAA2C/F,MAA3C,EAAmD;AACxF,QAAIoG,YAAY,GAAGjN,IAAI,CAACtC,OAAL,CAAasE,MAAhC;AACA,QAAIkL,QAAQ,GAAGD,YAAY,CAACC,QAA5B;AACA,QAAIC,MAAM,GAAGD,QAAQ,KAAKtQ,GAAb,IAAoBsQ,QAAQ,KAAKvQ,KAA9C;AACA,QAAIyD,OAAO,GAAG6M,YAAY,CAAC7M,OAA3B;;AAEA,QAAI+M,MAAM,IAAI/M,OAAO,KAAK,KAA1B,EAAiC;AAC7B,aAAO,IAAP;AACH;;AAED,QAAIgN,OAAO,GAAG,KAAKtK,SAAL,CAAe,KAAKzD,KAApB,CAAd;AACA,QAAI2F,YAAY,GAAG6B,MAAM,CAACnJ,OAAP,CAAe0F,QAAf,GAA0BgK,OAAO,CAAC/J,CAAlC,GAAsC+J,OAAO,CAAC9J,CAAjE;AACA,QAAIyD,eAAe,GAAG,KAAKhC,kBAAL,CAAwB8B,MAAxB,EAAgC7B,YAAhC,CAAtB;AACA,QAAIqI,GAAG,GAAGH,QAAQ,KAAKtQ,GAAvB;AACA,QAAI0Q,KAAK,GAAGzG,MAAM,CAACyG,KAAP,EAAZ;AACA,QAAIC,IAAI,GAAGF,GAAG,GAAGC,KAAK,CAAC9N,GAAT,GAAe8N,KAAK,CAACE,GAAnC;AACA,QAAIjI,aAAa,GAAGlI,UAAU,CAAC0J,eAAe,CAAC6F,SAAD,CAAhB,EAA6BU,KAAK,CAACE,GAAnC,EAAwCF,KAAK,CAAC9N,GAA9C,CAA9B;;AAEA,QAAI+F,aAAa,GAAGgI,IAAhB,KAAyB,CAA7B,EAAgC;AAC5B,aAAO,IAAP;AACH;;AAEDxG,IAAAA,eAAe,CAACvG,MAAhB,CAAuBoM,SAAS,GAAG,CAAnC,EAAsC,CAAtC,EAAyCW,IAAzC;AACA1G,IAAAA,MAAM,CAACnJ,OAAP,CAAeqH,kBAAf,GAAoCgC,eAApC;AAEA,QAAI8F,SAAS,GAAG7M,IAAI,CAACiE,KAAL,EAAhB;AACAjE,IAAAA,IAAI,CAACyN,KAAL;AAEAZ,IAAAA,SAAS,CAACnP,OAAV,CAAkBmD,IAAlB,GAAyB6M,SAAzB;AACAb,IAAAA,SAAS,CAACnP,OAAV,CAAkBiQ,IAAlB,CAAuBvN,OAAvB,GAAiC,KAAjC;AAEAyM,IAAAA,SAAS,CAACnP,OAAV,CAAkBuC,SAAlB,GAA8ByN,SAA9B;AACAb,IAAAA,SAAS,CAACnP,OAAV,CAAkBkQ,KAAlB,GAA0BF,SAA1B;AACAb,IAAAA,SAAS,CAACnP,OAAV,CAAkBmQ,SAAlB,GAA8BH,SAA9B;AAEA,WAAOb,SAAP;AACH,GApCD;;AAsCA,SAAOrP,YAAP;AACH,CAj8BmB,CAi8BlB3B,YAj8BkB,CAApB;;AAm8BA,SAASiS,YAAT,CAAsB9N,IAAtB,EAA4B;AACxB,SAAO,CAACA,IAAI,CAACE,IAAL,CAAUhC,IAAV,CAAe6P,IAAf,CAAoB,UAAUC,CAAV,EAAa;AAAE,WAAOA,CAAC,CAACtQ,OAAF,CAAU0F,QAAV,KAAuBpD,IAAI,CAACtC,OAAL,CAAa0F,QAApC,IAAgD4K,CAAC,KAAKhO,IAAtD,IAA8DgO,CAAC,CAACtQ,OAAF,CAAU0C,OAAV,KAAsB,KAA3F;AAAmG,GAAtI,CAAR;AAEH;;AAED,SAAS2H,YAAT,CAAsB7J,IAAtB,EAA4B;AACxB,MAAIY,MAAM,GAAGZ,IAAI,CAACY,MAAlB;AACA,MAAImC,GAAJ;;AAEA,OAAK,IAAIpC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC7B,QAAImB,IAAI,GAAG9B,IAAI,CAACW,CAAD,CAAf;AACA,QAAIuB,OAAO,GAAGJ,IAAI,CAACtC,OAAL,CAAa0C,OAAb,KAAyB,KAAvC;;AACA,QAAIA,OAAO,IAAI0N,YAAY,CAAC9N,IAAD,CAA3B,EAAmC;AAC/B,UAAI+F,OAAO,GAAG3F,OAAO,GAAGJ,IAAI,CAACkI,UAAL,EAAH,GAAuBlI,IAAI,CAACiH,OAAL,EAA5C;;AAEA,UAAI,CAAChG,GAAL,EAAU;AACNA,QAAAA,GAAG,GAAG8E,OAAO,CAAC9B,KAAR,EAAN;AACH,OAFD,MAEO;AACHhD,QAAAA,GAAG,CAACqJ,IAAJ,CAASvE,OAAT;AACH;AACJ;AACJ;;AAED,SAAO9E,GAAG,IAAI,IAAInF,GAAJ,EAAd;AACH;;AAED,SAASgL,UAAT,CAAoB5I,IAApB,EAA0BgC,IAA1B,EAAgC;AAC5B,OAAK,IAAIrB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,IAAI,CAACY,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAIgI,MAAM,GAAG3I,IAAI,CAACW,CAAD,CAAjB;;AACA,QAAIgI,MAAM,IAAIA,MAAM,CAAC3G,IAAP,KAAgBA,IAA9B,EAAoC;AAChC,aAAO2G,MAAP;AACH;AACJ;AACJ;;AAED,SAASwE,aAAT,CAAuB3L,KAAvB,EAA8B;AAC1B,SAAOA,KAAK,KAAK,EAAV,IAAgBA,KAAK,KAAK,IAA1B,IAAkCA,KAAK,KAAK,MAA5C,IAAsDA,KAAK,KAAK,aAAhE,IAAiF,CAAC3C,OAAO,CAAC2C,KAAD,CAAhG;AACH;;AAED,IAAIwJ,WAAW,GAAG,UAAU7J,KAAV,EAAiB;AAAE,SAAOA,KAAK,CAAC4O,MAAN,CAAa,UAAUC,GAAV,EAAehO,IAAf,EAAqB;AAAE,WAAOgO,GAAG,CAAC1K,MAAJ,CAAWtD,IAAI,CAAChC,IAAhB,CAAP;AAA+B,GAAnE,EAAqE,EAArE,CAAP;AAAkF,CAAvH;;AAEAX,iBAAiB,CAACC,YAAD,EAAe;AAC5BC,EAAAA,MAAM,EAAE,EADoB;AAE5B2D,EAAAA,QAAQ,EAAE;AACN4C,IAAAA,MAAM,EAAE;AADF,GAFkB;AAK5BmH,EAAAA,UAAU,EAAE,EALgB;AAM5BC,EAAAA,MAAM,EAAE;AACJ1L,IAAAA,KAAK,EAAEvD,KADH;AAEJ8L,IAAAA,KAAK,EAAE;AAFH,GANoB;AAU5B9I,EAAAA,YAAY,EAAE;AACVD,IAAAA,KAAK,EAAE;AADG,GAVc;AAa5BlB,EAAAA,MAAM,EAAE;AACJiE,IAAAA,aAAa,EAAE;AACXD,MAAAA,MAAM,EAAE;AACJtC,QAAAA,KAAK,EAAE;AADH,OADG;AAIXkD,MAAAA,OAAO,EAAE;AACLlD,QAAAA,KAAK,EAAE;AADF;AAJE;AADX;AAboB,CAAf,CAAjB;AAyBA,eAAelC,YAAf","sourcesContent":["import { drawing as draw } from '@progress/kendo-drawing';\n\nimport { ChartElement, Box } from '../../core';\nimport Crosshair from '../crosshair/crosshair';\nimport Pane from '../pane';\nimport { hasValue } from '../utils';\n\nimport { WHITE, BLACK, X, Y, COORD_PRECISION, TOP, BOTTOM, LEFT, RIGHT, START, END } from '../../common/constants';\nimport { append, deepExtend, defined, getSpacing, getTemplate, inArray, isFunction, isString, limitValue, round, setDefaultOptions } from '../../common';\n\nvar PlotAreaBase = (function (ChartElement) {\n    function PlotAreaBase(series, options, chartService) {\n        ChartElement.call(this, options);\n\n        this.initFields(series, options);\n        this.series = series;\n        this.initSeries();\n        this.charts = [];\n        this.options.legend = this.options.legend || {};\n        this.options.legend.items = [];\n        this.axes = [];\n        this.crosshairs = [];\n        this.chartService = chartService;\n        this.originalOptions = options;\n\n        this.createPanes();\n        this.render();\n        this.createCrosshairs();\n    }\n\n    if ( ChartElement ) PlotAreaBase.__proto__ = ChartElement;\n    PlotAreaBase.prototype = Object.create( ChartElement && ChartElement.prototype );\n    PlotAreaBase.prototype.constructor = PlotAreaBase;\n\n    PlotAreaBase.prototype.initFields = function initFields () { };\n\n    PlotAreaBase.prototype.initSeries = function initSeries () {\n        var series = this.series;\n\n        for (var i = 0; i < series.length; i++) {\n            series[i].index = i;\n        }\n    };\n\n    PlotAreaBase.prototype.createPanes = function createPanes () {\n        var this$1 = this;\n\n        var titleOptions = this.options.title || {};\n        var paneDefaults = this.options.paneDefaults;\n        var paneOptions = this.options.panes || [];\n        var panesLength = Math.max(paneOptions.length, 1);\n        var panes = [];\n\n        var defaults = deepExtend({\n            title: {\n                color: titleOptions.color\n            }\n        }, paneDefaults);\n\n        for (var i = 0; i < panesLength; i++) {\n            var options = deepExtend({}, defaults, paneOptions[i]);\n            if (isString(options.title)) {\n                options.title = deepExtend({ text: options.title }, defaults.title);\n            }\n\n            var currentPane = new Pane(options);\n            currentPane.paneIndex = i;\n\n            panes.push(currentPane);\n            this$1.append(currentPane);\n        }\n\n        this.panes = panes;\n    };\n\n    PlotAreaBase.prototype.crosshairOptions = function crosshairOptions (axis) {\n        return axis.options.crosshair;\n    };\n\n    PlotAreaBase.prototype.createCrosshairs = function createCrosshairs (panes) {\n        var this$1 = this;\n        if ( panes === void 0 ) panes = this.panes;\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            for (var j = 0; j < pane.axes.length; j++) {\n                var axis = pane.axes[j];\n                var options = this$1.crosshairOptions(axis);\n                if (options && options.visible) {\n                    var currentCrosshair = new Crosshair(this$1.chartService, axis, options);\n\n                    this$1.crosshairs.push(currentCrosshair);\n                    pane.content.append(currentCrosshair);\n                }\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.removeCrosshairs = function removeCrosshairs (pane) {\n        var crosshairs = this.crosshairs;\n        var axes = pane.axes;\n\n        for (var i = crosshairs.length - 1; i >= 0; i--) {\n            for (var j = 0; j < axes.length; j++) {\n                if (crosshairs[i].axis === axes[j]) {\n                    crosshairs.splice(i, 1);\n                    break;\n                }\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.hideCrosshairs = function hideCrosshairs () {\n        var crosshairs = this.crosshairs;\n        for (var idx = 0; idx < crosshairs.length; idx++) {\n            crosshairs[idx].hide();\n        }\n    };\n\n    PlotAreaBase.prototype.findPane = function findPane (name) {\n        var panes = this.panes;\n        var matchingPane;\n\n        for (var i = 0; i < panes.length; i++) {\n            if (panes[i].options.name === name) {\n                matchingPane = panes[i];\n                break;\n            }\n        }\n\n        return matchingPane || panes[0];\n    };\n\n    PlotAreaBase.prototype.findPointPane = function findPointPane (point) {\n        var panes = this.panes;\n        var matchingPane;\n\n        for (var i = 0; i < panes.length; i++) {\n            if (panes[i].box.containsPoint(point)) {\n                matchingPane = panes[i];\n                break;\n            }\n        }\n\n        return matchingPane;\n    };\n\n    PlotAreaBase.prototype.appendAxis = function appendAxis (axis) {\n        var pane = this.findPane(axis.options.pane);\n\n        pane.appendAxis(axis);\n        this.axes.push(axis);\n        axis.plotArea = this;\n    };\n\n    PlotAreaBase.prototype.removeAxis = function removeAxis (axisToRemove) {\n        var this$1 = this;\n\n        var filteredAxes = [];\n\n        for (var i = 0; i < this.axes.length; i++) {\n            var axis = this$1.axes[i];\n            if (axisToRemove !== axis) {\n                filteredAxes.push(axis);\n            } else {\n                axis.destroy();\n            }\n        }\n\n        this.axes = filteredAxes;\n    };\n\n    PlotAreaBase.prototype.appendChart = function appendChart (chart, pane) {\n        this.charts.push(chart);\n        if (pane) {\n            pane.appendChart(chart);\n        } else {\n            this.append(chart);\n        }\n    };\n\n    PlotAreaBase.prototype.removeChart = function removeChart (chartToRemove) {\n        var this$1 = this;\n\n        var filteredCharts = [];\n\n        for (var i = 0; i < this.charts.length; i++) {\n            var chart = this$1.charts[i];\n            if (chart !== chartToRemove) {\n                filteredCharts.push(chart);\n            } else {\n                chart.destroy();\n            }\n        }\n\n        this.charts = filteredCharts;\n    };\n\n    PlotAreaBase.prototype.addToLegend = function addToLegend (series) {\n        var count = series.length;\n        var legend = this.options.legend;\n        var labels = legend.labels || {};\n        var inactiveItems = legend.inactiveItems || {};\n        var inactiveItemsLabels = inactiveItems.labels || {};\n        var data = [];\n\n        for (var i = 0; i < count; i++) {\n            var currentSeries = series[i];\n            var seriesVisible = currentSeries.visible !== false;\n            if (currentSeries.visibleInLegend === false) {\n                continue;\n            }\n\n            var text = currentSeries.name;\n            var labelTemplate = seriesVisible ? getTemplate(labels) : getTemplate(inactiveItemsLabels) || getTemplate(labels);\n            if (labelTemplate) {\n                text = labelTemplate({\n                    text: hasValue(text) ? text : \"\",\n                    series: currentSeries\n                });\n            }\n\n            var defaults = currentSeries._defaults;\n            var color = currentSeries.color;\n            if (isFunction(color) && defaults) {\n                color = defaults.color;\n            }\n\n            var itemLabelOptions = (void 0), markerColor = (void 0);\n            if (seriesVisible) {\n                itemLabelOptions = {};\n                markerColor = color;\n            } else {\n                itemLabelOptions = {\n                    color: inactiveItemsLabels.color,\n                    font: inactiveItemsLabels.font\n                };\n                markerColor = inactiveItems.markers.color;\n            }\n\n            if (hasValue(text) && text !== \"\") {\n                data.push({\n                    text: text,\n                    labels: itemLabelOptions,\n                    markerColor: markerColor,\n                    series: currentSeries,\n                    active: seriesVisible\n                });\n            }\n        }\n\n        append(legend.items, data);\n    };\n\n    PlotAreaBase.prototype.groupAxes = function groupAxes (panes) {\n        var xAxes = [];\n        var yAxes = [];\n\n        for (var paneIx = 0; paneIx < panes.length; paneIx++) {\n            var paneAxes = panes[paneIx].axes;\n            for (var axisIx = 0; axisIx < paneAxes.length; axisIx++) {\n                var axis = paneAxes[axisIx];\n                if (axis.options.vertical) {\n                    yAxes.push(axis);\n                } else {\n                    xAxes.push(axis);\n                }\n            }\n        }\n\n        return { x: xAxes, y: yAxes, any: xAxes.concat(yAxes) };\n    };\n\n    PlotAreaBase.prototype.groupSeriesByPane = function groupSeriesByPane () {\n        var this$1 = this;\n\n        var series = this.series;\n        var seriesByPane = {};\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            var pane = this$1.seriesPaneName(currentSeries);\n\n            if (seriesByPane[pane]) {\n                seriesByPane[pane].push(currentSeries);\n            } else {\n                seriesByPane[pane] = [ currentSeries ];\n            }\n        }\n\n        return seriesByPane;\n    };\n\n    PlotAreaBase.prototype.filterVisibleSeries = function filterVisibleSeries (series) {\n        var result = [];\n\n        for (var i = 0; i < series.length; i++) {\n            var currentSeries = series[i];\n            if (currentSeries.visible !== false) {\n                result.push(currentSeries);\n            }\n        }\n\n        return result;\n    };\n\n    PlotAreaBase.prototype.reflow = function reflow (targetBox) {\n        var options = this.options.plotArea;\n        var panes = this.panes;\n        var margin = getSpacing(options.margin);\n\n        this.box = targetBox.clone().unpad(margin);\n        this.reflowPanes();\n\n        this.detachLabels();\n        this.reflowAxes(panes);\n        this.reflowCharts(panes);\n    };\n\n    PlotAreaBase.prototype.redraw = function redraw (panes) {\n        var this$1 = this;\n\n        var panesArray = [].concat(panes);\n        this.initSeries();\n\n        //prevents leak during partial redraws. the cached gradients observers retain reference to the destroyed elements.\n        var root = this.getRoot();\n        if (root) {\n            root.cleanGradients();\n        }\n\n        for (var i = 0; i < panesArray.length; i++) {\n            this$1.removeCrosshairs(panesArray[i]);\n            panesArray[i].empty();\n        }\n\n        this.render(panesArray);\n        this.detachLabels();\n        this.reflowAxes(this.panes);\n        this.reflowCharts(panesArray);\n\n        this.createCrosshairs(panesArray);\n\n        for (var i$1 = 0; i$1 < panesArray.length; i$1++) {\n            panesArray[i$1].refresh();\n        }\n    };\n\n    PlotAreaBase.prototype.axisCrossingValues = function axisCrossingValues (axis, crossingAxes) {\n        var options = axis.options;\n        var crossingValues = [].concat(\n            options.axisCrossingValues || options.axisCrossingValue\n        );\n        var valuesToAdd = crossingAxes.length - crossingValues.length;\n        var defaultValue = crossingValues[0] || 0;\n\n        for (var i = 0; i < valuesToAdd; i++) {\n            crossingValues.push(defaultValue);\n        }\n\n        return crossingValues;\n    };\n\n    PlotAreaBase.prototype.alignAxisTo = function alignAxisTo (axis, targetAxis, crossingValue, targetCrossingValue) {\n        var slot = axis.getSlot(crossingValue, crossingValue, true);\n        var slotEdge = axis.options.reverse ? 2 : 1;\n        var targetSlot = targetAxis.getSlot(targetCrossingValue, targetCrossingValue, true);\n        var targetEdge = targetAxis.options.reverse ? 2 : 1;\n        var axisBox = axis.box.translate(\n            targetSlot[X + targetEdge] - slot[X + slotEdge],\n            targetSlot[Y + targetEdge] - slot[Y + slotEdge]\n        );\n\n        if (axis.pane !== targetAxis.pane) {\n            axisBox.translate(0, axis.pane.box.y1 - targetAxis.pane.box.y1);\n        }\n\n        axis.reflow(axisBox);\n    };\n\n    PlotAreaBase.prototype.alignAxes = function alignAxes (xAxes, yAxes) {\n        var this$1 = this;\n\n        var xAnchor = xAxes[0];\n        var yAnchor = yAxes[0];\n        var xAnchorCrossings = this.axisCrossingValues(xAnchor, yAxes);\n        var yAnchorCrossings = this.axisCrossingValues(yAnchor, xAxes);\n        var leftAnchors = {};\n        var rightAnchors = {};\n        var topAnchors = {};\n        var bottomAnchors = {};\n\n        for (var i = 0; i < yAxes.length; i++) {\n            var axis = yAxes[i];\n            var pane = axis.pane;\n            var paneId = pane.id;\n            var visible = axis.options.visible !== false;\n\n            // Locate pane anchor, if any, and use its axisCrossingValues\n            var anchor = paneAnchor(xAxes, pane) || xAnchor;\n            var anchorCrossings = xAnchorCrossings;\n\n            if (anchor !== xAnchor) {\n                anchorCrossings = this$1.axisCrossingValues(anchor, yAxes);\n            }\n\n            this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n            if (axis.options._overlap) {\n                continue;\n            }\n\n            if (round(axis.lineBox().x1) === round(anchor.lineBox().x1)) {\n                // Push the axis to the left the previous y-axis so they don't overlap\n                if (leftAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(leftAnchors[paneId].box, LEFT)\n                        .translate(-axis.options.margin, 0)\n                    );\n                }\n\n                if (visible) {\n                    leftAnchors[paneId] = axis;\n                }\n            }\n\n            if (round(axis.lineBox().x2) === round(anchor.lineBox().x2)) {\n                // Flip the labels on the right if we're at the right end of the pane\n                if (!axis._mirrored) {\n                    axis.options.labels.mirror = !axis.options.labels.mirror;\n                    axis._mirrored = true;\n                }\n\n                this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);\n\n                // Push the axis to the right the previous y-axis so they don't overlap\n                if (rightAnchors[paneId]) {\n                    axis.reflow(axis.box\n                        .alignTo(rightAnchors[paneId].box, RIGHT)\n                        .translate(axis.options.margin, 0)\n                    );\n                }\n\n                if (visible) {\n                    rightAnchors[paneId] = axis;\n                }\n            }\n\n            if (i !== 0 && yAnchor.pane === axis.pane) {\n                axis.alignTo(yAnchor);\n                axis.reflow(axis.box);\n            }\n        }\n\n        for (var i$1 = 0; i$1 < xAxes.length; i$1++) {\n            var axis$1 = xAxes[i$1];\n            var pane$1 = axis$1.pane;\n            var paneId$1 = pane$1.id;\n            var visible$1 = axis$1.options.visible !== false;\n\n            // Locate pane anchor and use its axisCrossingValues\n            var anchor$1 = paneAnchor(yAxes, pane$1) || yAnchor;\n            var anchorCrossings$1 = yAnchorCrossings;\n            if (anchor$1 !== yAnchor) {\n                anchorCrossings$1 = this$1.axisCrossingValues(anchor$1, xAxes);\n            }\n\n            this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);\n\n            if (axis$1.options._overlap) {\n                continue;\n            }\n\n            if (round(axis$1.lineBox().y1) === round(anchor$1.lineBox().y1)) {\n                // Flip the labels on top if we're at the top of the pane\n                if (!axis$1._mirrored) {\n                    axis$1.options.labels.mirror = !axis$1.options.labels.mirror;\n                    axis$1._mirrored = true;\n                }\n                this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);\n\n                // Push the axis above the previous x-axis so they don't overlap\n                if (topAnchors[paneId$1]) {\n                    axis$1.reflow(axis$1.box\n                        .alignTo(topAnchors[paneId$1].box, TOP)\n                        .translate(0, -axis$1.options.margin)\n                    );\n                }\n\n                if (visible$1) {\n                    topAnchors[paneId$1] = axis$1;\n                }\n            }\n\n            if (round(axis$1.lineBox().y2, COORD_PRECISION) === round(anchor$1.lineBox().y2, COORD_PRECISION)) {\n                // Push the axis below the previous x-axis so they don't overlap\n                if (bottomAnchors[paneId$1]) {\n                    axis$1.reflow(axis$1.box\n                        .alignTo(bottomAnchors[paneId$1].box, BOTTOM)\n                        .translate(0, axis$1.options.margin)\n                    );\n                }\n\n                if (visible$1) {\n                    bottomAnchors[paneId$1] = axis$1;\n                }\n            }\n\n            if (i$1 !== 0) {\n                axis$1.alignTo(xAnchor);\n                axis$1.reflow(axis$1.box);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.shrinkAxisWidth = function shrinkAxisWidth (panes) {\n        var axes = this.groupAxes(panes).any;\n        var axisBox = axisGroupBox(axes);\n        var overflowX = 0;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n\n            if (currentPane.axes.length > 0) {\n                overflowX = Math.max(\n                    overflowX,\n                    axisBox.width() - currentPane.contentBox.width()\n                );\n            }\n        }\n\n        if (overflowX !== 0) {\n            for (var i$1 = 0; i$1 < axes.length; i$1++) {\n                var currentAxis = axes[i$1];\n\n                if (!currentAxis.options.vertical) {\n                    currentAxis.reflow(currentAxis.box.shrink(overflowX, 0));\n                }\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.shrinkAxisHeight = function shrinkAxisHeight (panes) {\n        var shrinked;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n            var axes = currentPane.axes;\n            var overflowY = Math.max(0, axisGroupBox(axes).height() - currentPane.contentBox.height());\n\n            if (overflowY !== 0) {\n                for (var j = 0; j < axes.length; j++) {\n                    var currentAxis = axes[j];\n\n                    if (currentAxis.options.vertical) {\n                        currentAxis.reflow(\n                            currentAxis.box.shrink(0, overflowY)\n                        );\n                    }\n                }\n                shrinked = true;\n            }\n        }\n\n        return shrinked;\n    };\n\n    PlotAreaBase.prototype.fitAxes = function fitAxes (panes) {\n        var axes = this.groupAxes(panes).any;\n        var offsetX = 0;\n\n        for (var i = 0; i < panes.length; i++) {\n            var currentPane = panes[i];\n            var paneAxes = currentPane.axes;\n            var paneBox = currentPane.contentBox;\n\n            if (paneAxes.length > 0) {\n                var axisBox = axisGroupBox(paneAxes);\n                // OffsetY is calculated and applied per pane\n                var offsetY = Math.max(paneBox.y1 - axisBox.y1, paneBox.y2 - axisBox.y2);\n\n                // OffsetX is calculated and applied globally\n                offsetX = Math.max(offsetX, paneBox.x1 - axisBox.x1);\n\n\n                for (var j = 0; j < paneAxes.length; j++) {\n                    var currentAxis = paneAxes[j];\n\n                    currentAxis.reflow(\n                        currentAxis.box.translate(0, offsetY)\n                    );\n                }\n            }\n        }\n\n        for (var i$1 = 0; i$1 < axes.length; i$1++) {\n            var currentAxis$1 = axes[i$1];\n\n            currentAxis$1.reflow(\n                currentAxis$1.box.translate(offsetX, 0)\n            );\n        }\n    };\n\n    PlotAreaBase.prototype.reflowAxes = function reflowAxes (panes) {\n        var this$1 = this;\n\n        var axes = this.groupAxes(panes);\n\n        for (var i = 0; i < panes.length; i++) {\n            this$1.reflowPaneAxes(panes[i]);\n        }\n\n        if (axes.x.length > 0 && axes.y.length > 0) {\n            this.alignAxes(axes.x, axes.y);\n            this.shrinkAxisWidth(panes);\n\n            this.autoRotateAxisLabels(axes);\n\n            this.alignAxes(axes.x, axes.y);\n            if (this.shrinkAxisWidth(panes)) {\n                this.alignAxes(axes.x, axes.y);\n            }\n\n            this.shrinkAxisHeight(panes);\n            this.alignAxes(axes.x, axes.y);\n\n            if (this.shrinkAxisHeight(panes)) {\n                this.alignAxes(axes.x, axes.y);\n            }\n\n            this.fitAxes(panes);\n        }\n    };\n\n    PlotAreaBase.prototype.autoRotateAxisLabels = function autoRotateAxisLabels (groupedAxes) {\n        var this$1 = this;\n\n        var ref = this;\n        var panes = ref.panes;\n        var axes = allPaneAxes(panes);\n        var rotated;\n\n        for (var idx = 0; idx < axes.length; idx++) {\n            var axis = axes[idx];\n            if (axis.autoRotateLabels()) {\n                rotated = true;\n            }\n        }\n\n        if (rotated) {\n            for (var idx$1 = 0; idx$1 < panes.length; idx$1++) {\n                this$1.reflowPaneAxes(panes[idx$1]);\n            }\n\n            if (groupedAxes.x.length > 0 && groupedAxes.y.length > 0) {\n                this.alignAxes(groupedAxes.x, groupedAxes.y);\n                this.shrinkAxisWidth(panes);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.reflowPaneAxes = function reflowPaneAxes (pane) {\n        var axes = pane.axes;\n        var length = axes.length;\n\n        if (length > 0) {\n            for (var i = 0; i < length; i++) {\n                axes[i].reflow(pane.contentBox);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.reflowCharts = function reflowCharts (panes) {\n        var charts = this.charts;\n        var count = charts.length;\n        var box = this.box;\n\n        for (var i = 0; i < count; i++) {\n            var chartPane = charts[i].pane;\n            if (!chartPane || inArray(chartPane, panes)) {\n                charts[i].reflow(box);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.reflowPanes = function reflowPanes () {\n        var ref = this;\n        var box = ref.box;\n        var panes = ref.panes;\n        var panesLength = panes.length;\n        var remainingHeight = box.height();\n        var remainingPanes = panesLength;\n        var autoHeightPanes = 0;\n        var top = box.y1;\n\n        for (var i = 0; i < panesLength; i++) {\n            var currentPane = panes[i];\n            var height = currentPane.options.height;\n\n            currentPane.options.width = box.width();\n\n            if (!currentPane.options.height) {\n                autoHeightPanes++;\n            } else {\n                if (height.indexOf && height.indexOf(\"%\")) {\n                    var percents = parseInt(height, 10) / 100;\n                    currentPane.options.height = percents * box.height();\n                }\n\n                currentPane.reflow(box.clone());\n\n                remainingHeight -= currentPane.options.height;\n            }\n        }\n\n        for (var i$1 = 0; i$1 < panesLength; i$1++) {\n            var currentPane$1 = panes[i$1];\n\n            if (!currentPane$1.options.height) {\n                currentPane$1.options.height = remainingHeight / autoHeightPanes;\n            }\n        }\n\n        for (var i$2 = 0; i$2 < panesLength; i$2++) {\n            var currentPane$2 = panes[i$2];\n            var paneBox = box\n                .clone()\n                .move(box.x1, top);\n\n            currentPane$2.reflow(paneBox);\n\n            remainingPanes--;\n            top += currentPane$2.options.height;\n        }\n    };\n\n    PlotAreaBase.prototype.backgroundBox = function backgroundBox () {\n        var axes = this.axes;\n        var axesCount = axes.length;\n        var box;\n\n        for (var i = 0; i < axesCount; i++) {\n            var axisA = axes[i];\n\n            for (var j = 0; j < axesCount; j++) {\n                var axisB = axes[j];\n\n                if (axisA.options.vertical !== axisB.options.vertical) {\n                    var lineBox = axisA.lineBox().clone().wrap(axisB.lineBox());\n\n                    if (!box) {\n                        box = lineBox;\n                    } else {\n                        box = box.wrap(lineBox);\n                    }\n                }\n            }\n        }\n\n        return box || this.box;\n    };\n\n    PlotAreaBase.prototype.chartsBoxes = function chartsBoxes () {\n        var panes = this.panes;\n        var boxes = [];\n\n        for (var idx = 0; idx < panes.length; idx++) {\n            boxes.push(panes[idx].chartsBox());\n        }\n\n        return boxes;\n    };\n\n    PlotAreaBase.prototype.addBackgroundPaths = function addBackgroundPaths (multipath) {\n        var boxes = this.chartsBoxes();\n        for (var idx = 0; idx < boxes.length; idx++) {\n            multipath.paths.push(draw.Path.fromRect(boxes[idx].toRect()));\n        }\n    };\n\n    PlotAreaBase.prototype.backgroundContainsPoint = function backgroundContainsPoint (point) {\n        var boxes = this.chartsBoxes();\n        for (var idx = 0; idx < boxes.length; idx++) {\n            if (boxes[idx].containsPoint(point)) {\n                return true;\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.createVisual = function createVisual () {\n        ChartElement.prototype.createVisual.call(this);\n\n        var options = this.options.plotArea;\n        var opacity = options.opacity;\n        var background = options.background;\n        var border = options.border; if ( border === void 0 ) border = {};\n        if (isTransparent(background)) {\n            background = WHITE;\n            opacity = 0;\n        }\n\n        var bg = this._bgVisual = new draw.MultiPath({\n            fill: {\n                color: background,\n                opacity: opacity\n            },\n            stroke: {\n                color: border.width ? border.color : \"\",\n                width: border.width,\n                dashType: border.dashType\n            },\n            zIndex: -1\n        });\n\n        this.addBackgroundPaths(bg);\n\n        this.appendVisual(bg);\n    };\n\n    PlotAreaBase.prototype.pointsByCategoryIndex = function pointsByCategoryIndex (categoryIndex) {\n        var charts = this.charts;\n        var result = [];\n\n        if (categoryIndex !== null) {\n            for (var i = 0; i < charts.length; i++) {\n                var chart = charts[i];\n                if (chart.pane.options.name === \"_navigator\") {\n                    continue;\n                }\n\n                var points = charts[i].categoryPoints[categoryIndex];\n                if (points && points.length) {\n                    for (var j = 0; j < points.length; j++) {\n                        var point = points[j];\n                        if (point && defined(point.value) && point.value !== null) {\n                            result.push(point);\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n    PlotAreaBase.prototype.pointsBySeriesIndex = function pointsBySeriesIndex (seriesIndex) {\n        return this.filterPoints(function(point) {\n            return point.series.index === seriesIndex;\n        });\n    };\n\n    PlotAreaBase.prototype.pointsBySeriesName = function pointsBySeriesName (name) {\n        return this.filterPoints(function(point) {\n            return point.series.name === name;\n        });\n    };\n\n    PlotAreaBase.prototype.filterPoints = function filterPoints (callback) {\n        var charts = this.charts;\n        var result = [];\n\n        for (var i = 0; i < charts.length; i++) {\n            var chart = charts[i];\n            var points = chart.points;\n            for (var j = 0; j < points.length; j++) {\n                var point = points[j];\n                if (point && point.visible !== false && callback(point)) {\n                    result.push(point);\n                }\n            }\n        }\n\n        return result;\n    };\n\n    PlotAreaBase.prototype.findPoint = function findPoint (callback) {\n        var charts = this.charts;\n\n        for (var i = 0; i < charts.length; i++) {\n            var chart = charts[i];\n            var points = chart.points;\n            for (var j = 0; j < points.length; j++) {\n                var point = points[j];\n                if (point && point.visible !== false && callback(point)) {\n                    return point;\n                }\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.paneByPoint = function paneByPoint (point) {\n        var panes = this.panes;\n\n        for (var i = 0; i < panes.length; i++) {\n            var pane = panes[i];\n            if (pane.box.containsPoint(point)) {\n                return pane;\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.detachLabels = function detachLabels () {\n        var axes = this.groupAxes(this.panes);\n        var xAxes = axes.x;\n        var yAxes = axes.y;\n\n        this.detachAxisGroupLabels(yAxes, xAxes);\n        this.detachAxisGroupLabels(xAxes, yAxes);\n    };\n\n    PlotAreaBase.prototype.detachAxisGroupLabels = function detachAxisGroupLabels (axes, crossingAxes) {\n        var this$1 = this;\n\n        var labelAxisCount = 0;\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i];\n            var pane = axis.pane;\n            var anchor = paneAnchor(crossingAxes, pane) || crossingAxes[0];\n            var axisIndex = i + labelAxisCount;\n            var labelAxis = this$1.createLabelAxis(axis, axisIndex, anchor);\n\n            if (labelAxis) {\n                labelAxisCount++;\n\n                var pos = pane.axes.indexOf(axis) + labelAxisCount;\n                pane.appendAxisAt(labelAxis, pos);\n            }\n        }\n    };\n\n    PlotAreaBase.prototype.createLabelAxis = function createLabelAxis (axis, axisIndex, anchor) {\n        var labelOptions = axis.options.labels;\n        var position = labelOptions.position;\n        var onAxis = position !== END && position !== START;\n        var visible = labelOptions.visible;\n\n        if (onAxis || visible === false) {\n            return null;\n        }\n\n        var allAxes = this.groupAxes(this.panes);\n        var crossingAxes = anchor.options.vertical ? allAxes.x : allAxes.y;\n        var anchorCrossings = this.axisCrossingValues(anchor, crossingAxes);\n        var end = position === END;\n        var range = anchor.range();\n        var edge = end ? range.max : range.min;\n        var crossingValue = limitValue(anchorCrossings[axisIndex], range.min, range.max);\n\n        if (crossingValue - edge === 0) {\n            return null;\n        }\n\n        anchorCrossings.splice(axisIndex + 1, 0, edge);\n        anchor.options.axisCrossingValues = anchorCrossings;\n\n        var labelAxis = axis.clone();\n        axis.clear();\n\n        labelAxis.options.name = undefined;\n        labelAxis.options.line.visible = false;\n\n        labelAxis.options.crosshair = undefined;\n        labelAxis.options.notes = undefined;\n        labelAxis.options.plotBands = undefined;\n\n        return labelAxis;\n    };\n\n    return PlotAreaBase;\n}(ChartElement));\n\nfunction isSingleAxis(axis) {\n    return !axis.pane.axes.some(function (a) { return a.options.vertical === axis.options.vertical && a !== axis && a.options.visible !== false; }\n    );\n}\n\nfunction axisGroupBox(axes) {\n    var length = axes.length;\n    var box;\n\n    for (var i = 0; i < length; i++) {\n        var axis = axes[i];\n        var visible = axis.options.visible !== false;\n        if (visible || isSingleAxis(axis)) {\n            var axisBox = visible ? axis.contentBox() : axis.lineBox();\n\n            if (!box) {\n                box = axisBox.clone();\n            } else {\n                box.wrap(axisBox);\n            }\n        }\n    }\n\n    return box || new Box();\n}\n\nfunction paneAnchor(axes, pane) {\n    for (var i = 0; i < axes.length; i++) {\n        var anchor = axes[i];\n        if (anchor && anchor.pane === pane) {\n            return anchor;\n        }\n    }\n}\n\nfunction isTransparent(color) {\n    return color === \"\" || color === null || color === \"none\" || color === \"transparent\" || !defined(color);\n}\n\nvar allPaneAxes = function (panes) { return panes.reduce(function (acc, pane) { return acc.concat(pane.axes); }, []); };\n\nsetDefaultOptions(PlotAreaBase, {\n    series: [],\n    plotArea: {\n        margin: {}\n    },\n    background: \"\",\n    border: {\n        color: BLACK,\n        width: 0\n    },\n    paneDefaults: {\n        title: {}\n    },\n    legend: {\n        inactiveItems: {\n            labels: {\n                color: \"#919191\"\n            },\n            markers: {\n                color: \"#919191\"\n            }\n        }\n    }\n});\n\nexport default PlotAreaBase;\n"]},"metadata":{},"sourceType":"module"}
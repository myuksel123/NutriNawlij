{"ast":null,"code":"var _jsxFileName = \"/home/meryem/repos/Movie_Trend_Visualizer/client/src/LineChart.js\",\n    _s = $RefreshSig$();\n\n// Code sourced from Urvashi in Better Programming\n// https://betterprogramming.pub/react-d3-plotting-a-line-chart-with-tooltips-ed41a4c31f4f\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LineChart(props) {\n  _s();\n\n  // LineChart accepts three props: data (the data to plot on the chart), width, and height of the chart.\n  const {\n    data,\n    width,\n    height\n  } = props; // Added useEffect Hook that will call drawChart() function\n  // Hook depends on data props since we want to redraw the chart every time the data changes\n\n  useEffect(() => {\n    drawChart();\n  }, [data]);\n\n  function drawChart() {\n    // Remove the old chart\n    d3.select('#container').select('svg').remove(); // Remove the old tooltip\n\n    d3.select('#container').select('.tooltip').remove(); // Add logic to draw the chart here\n    // First define some constants\n\n    const margin = {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 100\n    };\n    const yMinValue = d3.min(data, d => d.value);\n    const yMaxValue = d3.max(data, d => d.value);\n    const xMinValue = d3.min(data, d => d.label);\n    const xMaxValue = d3.max(data, d => d.label); // Define the axes scales and the line/path generator\n    // d3.scaleLinear() maps any given number within the given domain to the given range\n\n    const xScale = d3.scaleLinear().domain([xMinValue, xMaxValue]).range([0, width]);\n    const yScale = d3.scaleLinear().range([height, 0]).domain([yMinValue, yMaxValue]);\n    const line = d3.line().x(d => xScale(d.label)).y(d => yScale(d.value)).curve(d3.curveMonotoneX); // Add SVG element\n\n    const svg = d3.select('#container') // select the #container element\n    .append('svg') // apppend an SVG inside it\n    .attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g') // append a g element to group other SVG elements\n    .attr('transform', `translate(${margin.left},${margin.top})`); // translate it, leaving the top and left margins\n    // Draw the gridlines, the X-axis, and the Y-axis as well as the data line\n\n    svg.append('g') // First append another group of SVG elements that will contain the gridlines along the Y-axis\n    .attr('class', 'grid').attr('transform', `translate(0,${height})`) // Height of gridlines is set equal to the height of the chart\n    .call(d3.axisBottom(xScale).tickSize(-height) // Add '-' so that they are drawn above the axisBottom and not below it\n    .tickFormat('') // set tickFormat as empty string becuase don't want any lables drawn with them\n    );\n    svg.append('g').attr('class', 'grid').call(d3.axisLeft(yScale).tickSize(-width).tickFormat(''));\n    svg.append('g').attr('class', 'x-axis').attr('transform', `translate(0,${height})`).call(d3.axisBottom().scale(xScale).tickSize(15));\n    svg.append('g').attr('class', 'y-axis').call(d3.axisLeft(yScale));\n    svg.append('path').datum(data).attr('fill', 'none').attr('stroke', '#f6c3d0').attr('stroke-width', 4).attr('class', 'line').attr('d', line); // Add circle marker for the point we are hovering over\n\n    const focus = svg.append('g').attr('class', 'focus').style('display', 'none');\n    focus.append('circle').attr('r', 5).attr('class', 'circle'); // Define tooltip element\n\n    const tooltip = d3.select('#container').append('div') // Append div element which will contain our tooltipContent\n    .attr('class', 'tooltip').style('opacity', 0); // Tooltip opacity initially set to 0 and circle marker will not be displayed unless some mouse event happens\n    // Append a rect over our chart to capture mouse events\n    // Will not be visible, set opacity to 0\n\n    svg.append('rect').attr('class', 'overlay').attr('width', width).attr('height', height).style('opacity', 0).on('mouseover', () => {\n      focus.style('display', null);\n    }).on('mouseout', () => {\n      tooltip.transition().duration(300).style('opacity', 0);\n    }).on('mousemove', mousemove); // mousemove() function responsible for finding out position of cursor, figuring out nearest plot point, and translating tooltip as well as circle marker to nearest point\n\n    function mousemove(event) {\n      const bisect = d3.bisector(d => d.label).left; // bisect help find nearest point to left of invert point\n\n      const xPos = d3.mouse(this)[0];\n      const x0 = bisect(data, xScale.invert(xPos)); // xScale.invert takes a nubmer from the scale's range (width of chart) and maps it to the scale's domain (i.e., a number b/w the values on the X-axis)\n\n      const d0 = data[x0];\n      focus.attr('transform', `translate(${xScale(d0.label)},${yScale(d0.value)})`);\n      tooltip.transition().duration(300).style('opacity', 0.9);\n      tooltip.html(d0.tooltipContent || d0.label).style('transform', `translate(${xScale(d0.label) + 30}px,${yScale(d0.value) - 30}px)`);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 12\n  }, this); // Contains SVG elements\n}\n\n_s(LineChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/src/LineChart.js"],"names":["React","useEffect","d3","LineChart","props","data","width","height","drawChart","select","remove","margin","top","right","bottom","left","yMinValue","min","d","value","yMaxValue","max","xMinValue","label","xMaxValue","xScale","scaleLinear","domain","range","yScale","line","x","y","curve","curveMonotoneX","svg","append","attr","call","axisBottom","tickSize","tickFormat","axisLeft","scale","datum","focus","style","tooltip","on","transition","duration","mousemove","event","bisect","bisector","xPos","mouse","x0","invert","d0","html","tooltipContent"],"mappings":"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","sourcesContent":["// Code sourced from Urvashi in Better Programming\n// https://betterprogramming.pub/react-d3-plotting-a-line-chart-with-tooltips-ed41a4c31f4f\n\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\n\nimport './index.css';\n\nfunction LineChart(props) {\n    // LineChart accepts three props: data (the data to plot on the chart), width, and height of the chart.\n    const { data, width, height } = props;\n\n    // Added useEffect Hook that will call drawChart() function\n    // Hook depends on data props since we want to redraw the chart every time the data changes\n    useEffect(() => {\n        drawChart();\n    }, [data]);\n\n    function drawChart() {\n        // Remove the old chart\n        d3.select('#container')\n            .select('svg')\n            .remove();\n\n        // Remove the old tooltip\n        d3.select('#container')\n            .select('.tooltip')\n            .remove();\n\n        // Add logic to draw the chart here\n\n        // First define some constants\n        const margin = { top: 50, right: 50, bottom: 50, left: 100 };\n        const yMinValue = d3.min(data, d => d.value);\n        const yMaxValue = d3.max(data, d => d.value);\n        const xMinValue = d3.min(data, d => d.label);\n        const xMaxValue = d3.max(data, d => d.label);\n\n        // Define the axes scales and the line/path generator\n        // d3.scaleLinear() maps any given number within the given domain to the given range\n        const xScale = d3\n            .scaleLinear()\n            .domain([xMinValue, xMaxValue])\n            .range([0, width]);\n        const yScale = d3\n            .scaleLinear()\n            .range([height, 0])\n            .domain([yMinValue, yMaxValue]);\n        const line = d3\n            .line()\n            .x(d => xScale(d.label))\n            .y(d => yScale(d.value))\n            .curve(d3.curveMonotoneX);\n\n        // Add SVG element\n        const svg = d3\n            .select('#container') // select the #container element\n            .append('svg') // apppend an SVG inside it\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n            .append('g') // append a g element to group other SVG elements\n            .attr('transform', `translate(${margin.left},${margin.top})`); // translate it, leaving the top and left margins\n\n        // Draw the gridlines, the X-axis, and the Y-axis as well as the data line\n        svg\n            .append('g') // First append another group of SVG elements that will contain the gridlines along the Y-axis\n            .attr('class', 'grid')\n            .attr('transform', `translate(0,${height})`) // Height of gridlines is set equal to the height of the chart\n            .call(\n                d3.axisBottom(xScale)\n                    .tickSize(-height) // Add '-' so that they are drawn above the axisBottom and not below it\n                    .tickFormat(''), // set tickFormat as empty string becuase don't want any lables drawn with them\n            );\n        svg\n            .append('g')\n            .attr('class', 'grid')\n            .call(\n                d3.axisLeft(yScale)\n                    .tickSize(-width)\n                    .tickFormat(''),\n            );\n        svg\n            .append('g')\n            .attr('class', 'x-axis')\n            .attr('transform', `translate(0,${height})`)\n            .call(d3.axisBottom().scale(xScale).tickSize(15))\n        svg\n            .append('g')\n            .attr('class', 'y-axis')\n            .call(d3.axisLeft(yScale));\n        svg\n            .append('path')\n            .datum(data)\n            .attr('fill', 'none')\n            .attr('stroke', '#f6c3d0')\n            .attr('stroke-width', 4)\n            .attr('class', 'line')\n            .attr('d', line);\n            \n        // Add circle marker for the point we are hovering over\n        const focus = svg\n            .append('g')\n            .attr('class', 'focus')\n            .style('display', 'none');\n        focus.append('circle').attr('r', 5).attr('class', 'circle');\n\n        // Define tooltip element\n        const tooltip = d3\n            .select('#container')\n            .append('div') // Append div element which will contain our tooltipContent\n            .attr('class', 'tooltip')\n            .style('opacity', 0); // Tooltip opacity initially set to 0 and circle marker will not be displayed unless some mouse event happens\n\n        // Append a rect over our chart to capture mouse events\n        // Will not be visible, set opacity to 0\n        svg\n            .append('rect')\n            .attr('class', 'overlay')\n            .attr('width', width)\n            .attr('height', height)\n            .style('opacity', 0)\n            .on('mouseover', () => {\n                focus.style('display', null);\n            })\n            .on('mouseout', () => {\n                tooltip\n                    .transition()\n                    .duration(300)\n                    .style('opacity', 0);\n            })\n            .on('mousemove', mousemove); // mousemove() function responsible for finding out position of cursor, figuring out nearest plot point, and translating tooltip as well as circle marker to nearest point\n        function mousemove(event) {\n            const bisect = d3.bisector(d => d.label).left; // bisect help find nearest point to left of invert point\n            const xPos = d3.mouse(this)[0];\n            const x0 = bisect(data, xScale.invert(xPos)); // xScale.invert takes a nubmer from the scale's range (width of chart) and maps it to the scale's domain (i.e., a number b/w the values on the X-axis)\n            const d0 = data[x0];\n            focus.attr(\n                'transform',\n                `translate(${xScale(d0.label)},${yScale(d0.value)})`,\n            );\n            tooltip\n                .transition()\n                .duration(300)\n                .style('opacity', 0.9);\n            tooltip\n                .html(d0.tooltipContent || d0.label)\n                .style(\n                    'transform',\n                    `translate(${xScale(d0.label) + 30}px,${yScale(d0.value) - 30}px)`,\n                );\n        }\n\n    }\n    return <div id=\"container\" />; // Contains SVG elements\n}\n\nexport default LineChart;"]},"metadata":{},"sourceType":"module"}
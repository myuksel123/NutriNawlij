{"ast":null,"code":"/**\n * Returns the axis with the specified name.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {string} name - The axis name.\n * @returns {ChartAxis} - The axis with a corresponding name.\n */\nvar findAxisByName = function (chartComponent, name) {\n  if (chartComponent && chartComponent.chartInstance !== null) {\n    return chartComponent.chartInstance.findAxisByName(name);\n  }\n};\n/**\n * Returns the pane at the specified index.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {number} index - The pane index.\n * @returns {ChartPane} - The pane at the specified index.\n */\n\n\nvar findPaneByIndex = function (chartComponent, index) {\n  if (chartComponent && chartComponent.chartInstance !== null) {\n    return chartComponent.chartInstance.findPaneByIndex(index);\n  }\n};\n/**\n * Returns the pane with the specified name.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {string} name - The name of the pane.\n * @returns {ChartPane} - The pane with the provided name.\n */\n\n\nvar findPaneByName = function (chartComponent, name) {\n  if (chartComponent && chartComponent.chartInstance !== null) {\n    return chartComponent.chartInstance.findPaneByName(name);\n  }\n};\n/**\n * Exports a Chart component as a Drawing `Scene`.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {any} options - The parameters for the export operation.\n * @returns {Group} - The root Group of the scene.\n */\n\n\nvar exportVisual = function (chartComponent, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (chartComponent && chartComponent.chartInstance !== null) {\n    return chartComponent.chartInstance.exportVisual(options);\n  }\n};\n\nexport { findAxisByName, findPaneByIndex, findPaneByName, exportVisual };","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-react-charts/dist/es/methods/index.js"],"names":["findAxisByName","chartComponent","name","chartInstance","findPaneByIndex","index","findPaneByName","exportVisual","options"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,cAAc,GAAG,UAAUC,cAAV,EAA0BC,IAA1B,EAAgC;AACjD,MAAID,cAAc,IAAIA,cAAc,CAACE,aAAf,KAAiC,IAAvD,EAA6D;AACzD,WAAOF,cAAc,CAACE,aAAf,CAA6BH,cAA7B,CAA4CE,IAA5C,CAAP;AACH;AACJ,CAJD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIE,eAAe,GAAG,UAAUH,cAAV,EAA0BI,KAA1B,EAAiC;AACnD,MAAIJ,cAAc,IAAIA,cAAc,CAACE,aAAf,KAAiC,IAAvD,EAA6D;AACzD,WAAOF,cAAc,CAACE,aAAf,CAA6BC,eAA7B,CAA6CC,KAA7C,CAAP;AACH;AACJ,CAJD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,cAAc,GAAG,UAAUL,cAAV,EAA0BC,IAA1B,EAAgC;AACjD,MAAID,cAAc,IAAIA,cAAc,CAACE,aAAf,KAAiC,IAAvD,EAA6D;AACzD,WAAOF,cAAc,CAACE,aAAf,CAA6BG,cAA7B,CAA4CJ,IAA5C,CAAP;AACH;AACJ,CAJD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,YAAY,GAAG,UAAUN,cAAV,EAA0BO,OAA1B,EAAmC;AAClD,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AAAEA,IAAAA,OAAO,GAAG,EAAV;AAAe;;AACzC,MAAIP,cAAc,IAAIA,cAAc,CAACE,aAAf,KAAiC,IAAvD,EAA6D;AACzD,WAAOF,cAAc,CAACE,aAAf,CAA6BI,YAA7B,CAA0CC,OAA1C,CAAP;AACH;AACJ,CALD;;AAMA,SAASR,cAAT,EAAyBI,eAAzB,EAA0CE,cAA1C,EAA0DC,YAA1D","sourcesContent":["/**\n * Returns the axis with the specified name.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {string} name - The axis name.\n * @returns {ChartAxis} - The axis with a corresponding name.\n */\nvar findAxisByName = function (chartComponent, name) {\n    if (chartComponent && chartComponent.chartInstance !== null) {\n        return chartComponent.chartInstance.findAxisByName(name);\n    }\n};\n/**\n * Returns the pane at the specified index.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {number} index - The pane index.\n * @returns {ChartPane} - The pane at the specified index.\n */\nvar findPaneByIndex = function (chartComponent, index) {\n    if (chartComponent && chartComponent.chartInstance !== null) {\n        return chartComponent.chartInstance.findPaneByIndex(index);\n    }\n};\n/**\n * Returns the pane with the specified name.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {string} name - The name of the pane.\n * @returns {ChartPane} - The pane with the provided name.\n */\nvar findPaneByName = function (chartComponent, name) {\n    if (chartComponent && chartComponent.chartInstance !== null) {\n        return chartComponent.chartInstance.findPaneByName(name);\n    }\n};\n/**\n * Exports a Chart component as a Drawing `Scene`.\n *\n * @param {Chart} chartComponent - The instance of the KendoReact Chart component.\n * @param {any} options - The parameters for the export operation.\n * @returns {Group} - The root Group of the scene.\n */\nvar exportVisual = function (chartComponent, options) {\n    if (options === void 0) { options = {}; }\n    if (chartComponent && chartComponent.chartInstance !== null) {\n        return chartComponent.chartInstance.exportVisual(options);\n    }\n};\nexport { findAxisByName, findPaneByIndex, findPaneByName, exportVisual };\n"]},"metadata":{},"sourceType":"module"}
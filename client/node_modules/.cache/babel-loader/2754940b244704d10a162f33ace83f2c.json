{"ast":null,"code":"import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport { toBitsString, splitInto } from '../../utils';\nexport var AlphaNumericQRDataMode = function (QRDataMode) {\n  function AlphaNumericQRDataMode() {\n    QRDataMode.apply(this, arguments);\n  }\n\n  if (QRDataMode) AlphaNumericQRDataMode.__proto__ = QRDataMode;\n  AlphaNumericQRDataMode.prototype = Object.create(QRDataMode && QRDataMode.prototype);\n  AlphaNumericQRDataMode.prototype.constructor = AlphaNumericQRDataMode;\n\n  AlphaNumericQRDataMode.prototype.initProperties = function initProperties() {\n    QRDataMode.prototype.initProperties.call(this);\n    extend(this, {\n      characters: {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\": 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\": 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\": 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"E\": 14,\n        \"F\": 15,\n        \"G\": 16,\n        \"H\": 17,\n        \"I\": 18,\n        \"J\": 19,\n        \"K\": 20,\n        \"L\": 21,\n        \"M\": 22,\n        \"N\": 23,\n        \"O\": 24,\n        \"P\": 25,\n        \"Q\": 26,\n        \"R\": 27,\n        \"S\": 28,\n        \"T\": 29,\n        \"U\": 30,\n        \"V\": 31,\n        \"W\": 32,\n        \"X\": 33,\n        \"Y\": 34,\n        \"Z\": 35,\n        \" \": 36,\n        \"$\": 37,\n        \"%\": 38,\n        \"*\": 39,\n        \"+\": 40,\n        \"-\": 41,\n        \".\": 42,\n        \"/\": 43,\n        \":\": 44\n      },\n      bitsInCharacterCount: [9, 11, 13],\n      modeIndicator: \"0010\"\n    });\n  };\n\n  AlphaNumericQRDataMode.prototype.getValue = function getValue(character) {\n    return this.characters[character];\n  };\n\n  AlphaNumericQRDataMode.prototype.encode = function encode(str, version) {\n    var this$1 = this;\n    var parts = splitInto(str, 2),\n        result = this.getModeCountString(str.length, version),\n        value;\n    var i;\n\n    for (i = 0; i < parts.length - 1; i++) {\n      value = 45 * this$1.getValue(parts[i].charAt(0)) + this$1.getValue(parts[i].charAt(1));\n      result += toBitsString(value, 11);\n    }\n\n    value = parts[i].length === 2 ? 45 * this.getValue(parts[i].charAt(0)) + this.getValue(parts[i].charAt(1)) : this.getValue(parts[i].charAt(0));\n    return result + toBitsString(value, 1 + 5 * parts[i].length);\n  };\n\n  AlphaNumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength(inputLength, version) {\n    return 4 + this.getBitsCharacterCount(version) + 11 * Math.floor(inputLength / 2) + 6 * (inputLength % 2);\n  };\n\n  return AlphaNumericQRDataMode;\n}(QRDataMode);","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/qrcode/encodings/data-modes/alpha-numeric-data-mode.js"],"names":["QRDataMode","extend","toBitsString","splitInto","AlphaNumericQRDataMode","apply","arguments","__proto__","prototype","Object","create","constructor","initProperties","call","characters","bitsInCharacterCount","modeIndicator","getValue","character","encode","str","version","this$1","parts","result","getModeCountString","length","value","i","charAt","getStringBitsLength","inputLength","getBitsCharacterCount","Math","floor"],"mappings":"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","sourcesContent":["import { QRDataMode } from './qr-data-mode';\nimport { extend } from '../../utils';\nimport {\n    toBitsString,\n    splitInto\n} from '../../utils';\n\nexport var AlphaNumericQRDataMode = (function (QRDataMode) {\n    function AlphaNumericQRDataMode () {\n        QRDataMode.apply(this, arguments);\n    }\n\n    if ( QRDataMode ) AlphaNumericQRDataMode.__proto__ = QRDataMode;\n    AlphaNumericQRDataMode.prototype = Object.create( QRDataMode && QRDataMode.prototype );\n    AlphaNumericQRDataMode.prototype.constructor = AlphaNumericQRDataMode;\n\n    AlphaNumericQRDataMode.prototype.initProperties = function initProperties () {\n        QRDataMode.prototype.initProperties.call(this);\n\n        extend(this, {\n            characters: {\n                \"0\": 0,\n                \"1\": 1,\n                \"2\": 2,\n                \"3\": 3,\n                \"4\": 4,\n                \"5\": 5,\n                \"6\": 6,\n                \"7\": 7,\n                \"8\": 8,\n                \"9\": 9,\n                \"A\": 10,\n                \"B\": 11,\n                \"C\": 12,\n                \"D\": 13,\n                \"E\": 14,\n                \"F\": 15,\n                \"G\": 16,\n                \"H\": 17,\n                \"I\": 18,\n                \"J\": 19,\n                \"K\": 20,\n                \"L\": 21,\n                \"M\": 22,\n                \"N\": 23,\n                \"O\": 24,\n                \"P\": 25,\n                \"Q\": 26,\n                \"R\": 27,\n                \"S\": 28,\n                \"T\": 29,\n                \"U\": 30,\n                \"V\": 31,\n                \"W\": 32,\n                \"X\": 33,\n                \"Y\": 34,\n                \"Z\": 35,\n                \" \": 36,\n                \"$\": 37,\n                \"%\": 38,\n                \"*\": 39,\n                \"+\": 40,\n                \"-\": 41,\n                \".\": 42,\n                \"/\": 43,\n                \":\": 44\n            },\n            bitsInCharacterCount: [9, 11, 13],\n            modeIndicator: \"0010\"\n        });\n    };\n\n    AlphaNumericQRDataMode.prototype.getValue = function getValue (character) {\n        return this.characters[character];\n    };\n\n    AlphaNumericQRDataMode.prototype.encode = function encode (str, version) {\n        var this$1 = this;\n\n        var\n            parts = splitInto(str, 2),\n            result = this.getModeCountString(str.length, version),\n            value;\n        var i;\n\n        for (i = 0; i < parts.length - 1; i++) {\n            value = 45 * this$1.getValue(parts[i].charAt(0)) + this$1.getValue(parts[i].charAt(1));\n            result += toBitsString(value, 11);\n        }\n\n        value = parts[i].length === 2 ?\n            45 * this.getValue(parts[i].charAt(0)) + this.getValue(parts[i].charAt(1)) :\n            this.getValue(parts[i].charAt(0));\n\n        return result + toBitsString(value, 1 + 5 * parts[i].length);\n    };\n\n    AlphaNumericQRDataMode.prototype.getStringBitsLength = function getStringBitsLength (inputLength, version) {\n        return 4 + this.getBitsCharacterCount(version) + 11 * Math.floor(inputLength / 2) + 6 * (inputLength % 2);\n    };\n\n    return AlphaNumericQRDataMode;\n}(QRDataMode));\n"]},"metadata":{},"sourceType":"module"}
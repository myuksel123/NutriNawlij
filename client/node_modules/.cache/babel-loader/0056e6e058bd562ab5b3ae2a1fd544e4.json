{"ast":null,"code":"import { Class } from '../../../common';\nimport { EncodingResult } from '../encoding-result';\nimport { DataModeInstances } from '../data-modes/data-mode-instances';\nimport { extend } from '../../utils';\nimport { toBitsString } from '../../utils';\nimport { getVersion } from '../encoding';\nvar BYTE = \"byte\";\nexport var Utf8Encoder = function (Class) {\n  function Utf8Encoder() {\n    Class.call(this);\n    this.initProperties();\n    this.mode = DataModeInstances[this.encodingMode];\n  }\n\n  if (Class) Utf8Encoder.__proto__ = Class;\n  Utf8Encoder.prototype = Object.create(Class && Class.prototype);\n  Utf8Encoder.prototype.constructor = Utf8Encoder;\n\n  Utf8Encoder.prototype.initProperties = function initProperties() {\n    extend(this, {\n      encodingMode: BYTE,\n      utfBOM: \"111011111011101110111111\",\n      initialModeCountStringLength: 20,\n      ranges: [128, 2048, 65536, 2097152, 67108864]\n    });\n  };\n\n  Utf8Encoder.prototype.getEncodingResult = function getEncodingResult(inputString, errorCorrectionLevel) {\n    var data = this.encode(inputString),\n        dataCodewordsCount = this.getDataCodewordsCount(data),\n        version = getVersion(dataCodewordsCount, errorCorrectionLevel),\n        dataString = this.mode.getModeCountString(data.length / 8, version) + data;\n    return new EncodingResult(dataString, version);\n  };\n\n  Utf8Encoder.prototype.getDataCodewordsCount = function getDataCodewordsCount(data) {\n    var dataLength = data.length,\n        dataCodewordsCount = Math.ceil((this.initialModeCountStringLength + dataLength) / 8);\n    return dataCodewordsCount;\n  };\n\n  Utf8Encoder.prototype.encode = function encode(str) {\n    var this$1 = this;\n    var result = this.utfBOM;\n\n    for (var i = 0; i < str.length; i++) {\n      result += this$1.encodeCharacter(str.charCodeAt(i));\n    }\n\n    return result;\n  };\n\n  Utf8Encoder.prototype.encodeCharacter = function encodeCharacter(code) {\n    var bytesCount = this.getBytesCount(code),\n        bc = bytesCount - 1,\n        result = \"\";\n\n    if (bytesCount === 1) {\n      result = toBitsString(code, 8);\n    } else {\n      var significantOnes = 8 - bytesCount;\n\n      for (var i = 0; i < bc; i++) {\n        result = toBitsString(code >> i * 6 & 63 | 128, 8) + result;\n      }\n\n      result = (code >> bc * 6 | 255 >> significantOnes << significantOnes).toString(2) + result;\n    }\n\n    return result;\n  };\n\n  Utf8Encoder.prototype.getBytesCount = function getBytesCount(code) {\n    var ranges = this.ranges;\n\n    for (var i = 0; i < ranges.length; i++) {\n      if (code < ranges[i]) {\n        return i + 1;\n      }\n    }\n  };\n\n  return Utf8Encoder;\n}(Class);","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/qrcode/encodings/encoders/utf8-encoder.js"],"names":["Class","EncodingResult","DataModeInstances","extend","toBitsString","getVersion","BYTE","Utf8Encoder","call","initProperties","mode","encodingMode","__proto__","prototype","Object","create","constructor","utfBOM","initialModeCountStringLength","ranges","getEncodingResult","inputString","errorCorrectionLevel","data","encode","dataCodewordsCount","getDataCodewordsCount","version","dataString","getModeCountString","length","dataLength","Math","ceil","str","this$1","result","i","encodeCharacter","charCodeAt","code","bytesCount","getBytesCount","bc","significantOnes","toString"],"mappings":"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","sourcesContent":["import { Class } from '../../../common';\nimport { EncodingResult } from '../encoding-result';\nimport { DataModeInstances } from '../data-modes/data-mode-instances';\nimport { extend } from '../../utils';\nimport { toBitsString } from '../../utils';\nimport { getVersion } from '../encoding';\n\nvar BYTE = \"byte\";\n\nexport var Utf8Encoder = (function (Class) {\n    function Utf8Encoder() {\n        Class.call(this);\n\n        this.initProperties();\n\n        this.mode = DataModeInstances[this.encodingMode];\n    }\n\n    if ( Class ) Utf8Encoder.__proto__ = Class;\n    Utf8Encoder.prototype = Object.create( Class && Class.prototype );\n    Utf8Encoder.prototype.constructor = Utf8Encoder;\n\n    Utf8Encoder.prototype.initProperties = function initProperties () {\n        extend(this, {\n            encodingMode: BYTE,\n            utfBOM: \"111011111011101110111111\",\n            initialModeCountStringLength: 20,\n            ranges: [128, 2048, 65536, 2097152, 67108864]\n        });\n    };\n\n    Utf8Encoder.prototype.getEncodingResult = function getEncodingResult (inputString, errorCorrectionLevel) {\n        var data = this.encode(inputString),\n            dataCodewordsCount = this.getDataCodewordsCount(data),\n            version = getVersion(dataCodewordsCount, errorCorrectionLevel),\n            dataString = this.mode.getModeCountString(data.length / 8, version) + data;\n\n        return new EncodingResult(dataString, version);\n    };\n\n    Utf8Encoder.prototype.getDataCodewordsCount = function getDataCodewordsCount (data) {\n        var dataLength = data.length,\n            dataCodewordsCount = Math.ceil((this.initialModeCountStringLength + dataLength) / 8);\n\n        return dataCodewordsCount;\n    };\n\n    Utf8Encoder.prototype.encode = function encode (str) {\n        var this$1 = this;\n\n        var result = this.utfBOM;\n\n        for (var i = 0; i < str.length; i++) {\n            result += this$1.encodeCharacter(str.charCodeAt(i));\n        }\n\n        return result;\n    };\n\n    Utf8Encoder.prototype.encodeCharacter = function encodeCharacter (code) {\n        var bytesCount = this.getBytesCount(code),\n            bc = bytesCount - 1,\n            result = \"\";\n\n        if (bytesCount === 1) {\n            result = toBitsString(code, 8);\n        } else {\n            var significantOnes = 8 - bytesCount;\n\n            for (var i = 0; i < bc; i++) {\n                result = toBitsString(code >> (i * 6) & 63 | 128, 8) + result;\n            }\n\n            result = ((code >> bc * 6) | ((255 >> significantOnes) << significantOnes)).toString(2) + result;\n        }\n\n        return result;\n    };\n\n    Utf8Encoder.prototype.getBytesCount = function getBytesCount (code) {\n        var ranges = this.ranges;\n\n        for (var i = 0; i < ranges.length; i++) {\n            if (code < ranges[i]) {\n                return i + 1;\n            }\n        }\n    };\n\n    return Utf8Encoder;\n}(Class));\n"]},"metadata":{},"sourceType":"module"}
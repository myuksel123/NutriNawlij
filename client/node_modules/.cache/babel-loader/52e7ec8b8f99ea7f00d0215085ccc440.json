{"ast":null,"code":"var _jsxFileName = \"/home/meryem/repos/NutriNear2/client/src/pages/Catalog.jsx\",\n    _s = $RefreshSig$();\n\nimport { checkPropTypes } from \"prop-types\";\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Catalog = props => {\n  _s();\n\n  //post data to SQL?\n  const [data, setData] = useState([]);\n  console.log(JSON.stringify(props.location.state));\n  useEffect(() => {\n    fetch('/data', {\n      method: 'post',\n      body: JSON.stringify(props.location.state)\n    });\n  }, []);\n  /* const [VitaminA, setVitaminA] = useState([]);\n   const [VitaminB1, setVitaminB1] = useState([]);\n   const [VitaminB2, setVitaminB2] = useState([]);\n   const [VitaminB3, setVitaminB3] = useState([]);\n   const [VitaminB5, setVitaminB5] = useState([]);\n   const [VitaminB6, setVitaminB6] = useState([]);\n   const [VitaminB7, setVitaminB7] = useState([]);\n   const [VitaminB9, setVitaminB9] = useState([]);\n   const [VitaminB12, setVitaminB12] = useState([]);\n   const[Calcium,setCalcium]=useState([]);\n   const[Phosphorus,setPhosporus]=useState([]);\n   const [Magnesium,setMagnesium] = useState([]);\n   const [Sod,Sodset] = useState([]);\n   const [Chlo,Chloset] = useState([]);\n   const [Pot,Potset] = useState([]);\n   const [Sul,Sulset] = useState([]);\n   const [Ir,Ironset] = useState([]);\n   const [Mang,Mangset] = useState([]);\n   const [Cop,Copset] = useState([]);\n   const [Zi,Ziset] = useState([]);\n   const [Io,Ioset] = useState([]);\n   const [Flo,Floset] = useState([]);\n   const [Sel,Selset] = useState([]);\n     \n   const [results, setResults] = useState([]);\n   //console.log(props.location.state);\n    useEffect(()=>{\n       if(props.location.state.vitA){\n   fetch(\"/VitaminA\").then(\n       res=>res.json())\n       .then(VitaminA=>setVitaminA(VitaminA));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.vitB1){\n   fetch(\"/VitaminB1\").then(\n       res=>res.json())\n       .then(VitaminB1=>setVitaminB1(VitaminB1));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.vitB2){\n   fetch(\"/VitaminB2\").then(\n       res=>res.json())\n       .then(VitaminB2=>setVitaminB2(VitaminB2));\n   }\n   }, []);\n   \n   useEffect(()=>{\n       if(props.location.state.vitB3){\n   fetch(\"/VitaminB3\").then(\n       res=>res.json())\n       .then(VitaminB3=>setVitaminB3(VitaminB3));\n   }\n   }, []);\n   \n   useEffect(()=>{\n       if(props.location.state.vitB5){\n   fetch(\"/VitaminB5\").then(\n       res=>res.json())\n       .then(VitaminB5=>setVitaminB5(VitaminB5));\n   }\n   }, []);\n   \n   useEffect(()=>{\n       if(props.location.state.vitB6){\n   fetch(\"/VitaminB6\").then(\n       res=>res.json())\n       .then(VitaminB6=>setVitaminB6(VitaminB6));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.vitB7){\n   fetch(\"/VitaminB7\").then(\n       res=>res.json())\n       .then(VitaminB7=>setVitaminB7(VitaminB7));\n   }\n   }, []);\n   \n   useEffect(()=>{\n       if(props.location.state.vitB9){\n   fetch(\"/VitaminB9\").then(\n       res=>res.json())\n       .then(VitaminB1=>setVitaminB9(VitaminB9));\n   }\n   }, []);\n   \n   useEffect(()=>{\n       if(props.location.state.vitB12){\n   fetch(\"/VitaminB12\").then(\n       res=>res.json())\n       .then(VitaminB12=>setVitaminB12(VitaminB12));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.Calcium){\n   fetch(\"/Calcium\").then(\n       res=>res.json())\n       .then(Calcium=>setCalcium(Calcium));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.Phos){\n   fetch(\"/Phosphorus\").then(\n       res=>res.json())\n       .then(Phosphorus=>setPhosporus(Phosphorus));\n   }\n   }, []);\n     useEffect(()=>{\n       if(props.location.state.Mag){\n   fetch(\"/Magnesium\").then(\n       res=>res.json())\n       .then(Magnesium=>setMagnesium(Magnesium));\n   }\n   }, []);\n     useEffect(()=>{\n       if(props.location.state.Sod){\n   fetch(\"/Sodium\").then(\n       res=>res.json())\n       .then(Sod=>Sodset(Sod));\n   }\n   }  , []);\n     useEffect(()=>{\n       if(props.location.state.Chlo){\n   fetch(\"/Chloride\").then(\n       res=>res.json())\n       .then(Chlo =>Chloset(Chlo));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.Pot){\n   fetch(\"/Potassium\").then(\n       res=>res.json())\n       .then(Pot =>Potset(Pot));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.Sul){\n   fetch(\"/Sulfur\").then(\n       res=>res.json())\n       .then(Sul =>Sulset(Sul));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.Ir){\n   fetch(\"/Iron\").then(\n       res=>res.json())\n       .then(Ir =>Ironset(Ir));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.Mang){\n   fetch(\"/Manganese\").then(\n       res=>res.json())\n       .then(Mang =>Mangset(Mang));\n   }\n   }, []);\n   \n   useEffect(()=>{\n       if(props.location.state.Cop){\n   fetch(\"/Copper\").then(\n       res=>res.json())\n       .then(Cop =>Copset(Cop));\n   }\n   }, []);\n   \n   useEffect(()=>{\n       if(props.location.state.Zi){\n   fetch(\"/Zinc\").then(\n       res=>res.json())\n       .then(Zi =>Ziset(Zi));\n   }\n   }, []);\n   \n   useEffect(()=>{\n       if(props.location.state.Io){\n   fetch(\"/Iodine\").then(\n       res=>res.json())\n       .then(Io =>Ioset(Io));\n   }\n   }, []);\n    useEffect(()=>{\n       if(props.location.state.Sel){\n   fetch(\"/Selenium\").then(\n       res=>res.json())\n       .then(Sel =>Selset(Sel));\n   }\n   }, []);\n    if(props.location.state.vitA){\n   for(let i =0; i<VitaminA.rowCount;i++){\n       data.push({\n           description: VitaminA.rows[i].description,\n           amount: VitaminA.rows[i].amount,\n           unit: VitaminA.rows[i].unit,\n           name: \"Vitamin A\",\n       })\n   }\n  }\n  console.log(data);\n  for(let i=0; i<data.length; i++){\n   results.push(<div class =\"options\">{data[i].description} has {\n      data[i].amount} {data[i].unit} {data[i].name}  per 100g</div>);\n   }*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Catalog, \"FTfFkLfVdcj0Uk2EahF49AUIgmY=\");\n\n_c = Catalog;\nexport default Catalog;\n\nvar _c;\n\n$RefreshReg$(_c, \"Catalog\");","map":{"version":3,"sources":["/home/meryem/repos/NutriNear2/client/src/pages/Catalog.jsx"],"names":["checkPropTypes","React","useState","useEffect","useLocation","Catalog","props","data","setData","console","log","JSON","stringify","location","state","fetch","method","body"],"mappings":";;;AAAA,SAASA,cAAT,QAA+B,YAA/B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;AACA,SAAQC,WAAR,QAA0B,kBAA1B;;;AAGA,MAAMC,OAAO,GAAIC,KAAD,IAAU;AAAA;;AAEtB;AACA,QAAK,CAACC,IAAD,EAAMC,OAAN,IAAiBN,QAAQ,CAAC,EAAD,CAA9B;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeN,KAAK,CAACO,QAAN,CAAeC,KAA9B,CAAZ;AACAX,EAAAA,SAAS,CAAC,MAAI;AACdY,IAAAA,KAAK,CAAC,OAAD,EAAS;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,IAAI,EAAEN,IAAI,CAACC,SAAL,CAAeN,KAAK,CAACO,QAAN,CAAewBI,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAIH,CAlPD;;GAAMT,O;;KAAAA,O;AAmPN,eAAeA,OAAf","sourcesContent":["import { checkPropTypes } from \"prop-types\";\nimport React from \"react\";\nimport {useState,useEffect} from 'react';\nimport {useLocation} from 'react-router-dom'\n\n\nconst Catalog = (props) =>{\n\n    //post data to SQL?\n    const[data,setData] = useState([]);\n    console.log(JSON.stringify(props.location.state))\n    useEffect(()=>{\n    fetch('/data',{\n        method: 'post',\n        body: JSON.stringify(props.location.state)\n    })\n    }, []);\n\n   /* const [VitaminA, setVitaminA] = useState([]);\n    const [VitaminB1, setVitaminB1] = useState([]);\n    const [VitaminB2, setVitaminB2] = useState([]);\n    const [VitaminB3, setVitaminB3] = useState([]);\n    const [VitaminB5, setVitaminB5] = useState([]);\n    const [VitaminB6, setVitaminB6] = useState([]);\n    const [VitaminB7, setVitaminB7] = useState([]);\n    const [VitaminB9, setVitaminB9] = useState([]);\n    const [VitaminB12, setVitaminB12] = useState([]);\n    const[Calcium,setCalcium]=useState([]);\n    const[Phosphorus,setPhosporus]=useState([]);\n    const [Magnesium,setMagnesium] = useState([]);\n    const [Sod,Sodset] = useState([]);\n    const [Chlo,Chloset] = useState([]);\n    const [Pot,Potset] = useState([]);\n    const [Sul,Sulset] = useState([]);\n    const [Ir,Ironset] = useState([]);\n    const [Mang,Mangset] = useState([]);\n    const [Cop,Copset] = useState([]);\n    const [Zi,Ziset] = useState([]);\n    const [Io,Ioset] = useState([]);\n    const [Flo,Floset] = useState([]);\n    const [Sel,Selset] = useState([]);\n\n\n    \n    const [results, setResults] = useState([]);\n    //console.log(props.location.state);\n\n    useEffect(()=>{\n        if(props.location.state.vitA){\n    fetch(\"/VitaminA\").then(\n        res=>res.json())\n        .then(VitaminA=>setVitaminA(VitaminA));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.vitB1){\n    fetch(\"/VitaminB1\").then(\n        res=>res.json())\n        .then(VitaminB1=>setVitaminB1(VitaminB1));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.vitB2){\n    fetch(\"/VitaminB2\").then(\n        res=>res.json())\n        .then(VitaminB2=>setVitaminB2(VitaminB2));\n    }\n    }, []);\n    \n    useEffect(()=>{\n        if(props.location.state.vitB3){\n    fetch(\"/VitaminB3\").then(\n        res=>res.json())\n        .then(VitaminB3=>setVitaminB3(VitaminB3));\n    }\n    }, []);\n    \n    useEffect(()=>{\n        if(props.location.state.vitB5){\n    fetch(\"/VitaminB5\").then(\n        res=>res.json())\n        .then(VitaminB5=>setVitaminB5(VitaminB5));\n    }\n    }, []);\n    \n    useEffect(()=>{\n        if(props.location.state.vitB6){\n    fetch(\"/VitaminB6\").then(\n        res=>res.json())\n        .then(VitaminB6=>setVitaminB6(VitaminB6));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.vitB7){\n    fetch(\"/VitaminB7\").then(\n        res=>res.json())\n        .then(VitaminB7=>setVitaminB7(VitaminB7));\n    }\n    }, []);\n    \n    useEffect(()=>{\n        if(props.location.state.vitB9){\n    fetch(\"/VitaminB9\").then(\n        res=>res.json())\n        .then(VitaminB1=>setVitaminB9(VitaminB9));\n    }\n    }, []);\n    \n    useEffect(()=>{\n        if(props.location.state.vitB12){\n    fetch(\"/VitaminB12\").then(\n        res=>res.json())\n        .then(VitaminB12=>setVitaminB12(VitaminB12));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.Calcium){\n    fetch(\"/Calcium\").then(\n        res=>res.json())\n        .then(Calcium=>setCalcium(Calcium));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.Phos){\n    fetch(\"/Phosphorus\").then(\n        res=>res.json())\n        .then(Phosphorus=>setPhosporus(Phosphorus));\n    }\n    }, []);\n\n\n    useEffect(()=>{\n        if(props.location.state.Mag){\n    fetch(\"/Magnesium\").then(\n        res=>res.json())\n        .then(Magnesium=>setMagnesium(Magnesium));\n    }\n    }, []);\n\n\n    useEffect(()=>{\n        if(props.location.state.Sod){\n    fetch(\"/Sodium\").then(\n        res=>res.json())\n        .then(Sod=>Sodset(Sod));\n    }\n    }  , []);\n\n\n    useEffect(()=>{\n        if(props.location.state.Chlo){\n    fetch(\"/Chloride\").then(\n        res=>res.json())\n        .then(Chlo =>Chloset(Chlo));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.Pot){\n    fetch(\"/Potassium\").then(\n        res=>res.json())\n        .then(Pot =>Potset(Pot));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.Sul){\n    fetch(\"/Sulfur\").then(\n        res=>res.json())\n        .then(Sul =>Sulset(Sul));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.Ir){\n    fetch(\"/Iron\").then(\n        res=>res.json())\n        .then(Ir =>Ironset(Ir));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.Mang){\n    fetch(\"/Manganese\").then(\n        res=>res.json())\n        .then(Mang =>Mangset(Mang));\n    }\n    }, []);\n    \n    useEffect(()=>{\n        if(props.location.state.Cop){\n    fetch(\"/Copper\").then(\n        res=>res.json())\n        .then(Cop =>Copset(Cop));\n    }\n    }, []);\n    \n    useEffect(()=>{\n        if(props.location.state.Zi){\n    fetch(\"/Zinc\").then(\n        res=>res.json())\n        .then(Zi =>Ziset(Zi));\n    }\n    }, []);\n    \n    useEffect(()=>{\n        if(props.location.state.Io){\n    fetch(\"/Iodine\").then(\n        res=>res.json())\n        .then(Io =>Ioset(Io));\n    }\n    }, []);\n\n    useEffect(()=>{\n        if(props.location.state.Sel){\n    fetch(\"/Selenium\").then(\n        res=>res.json())\n        .then(Sel =>Selset(Sel));\n    }\n    }, []);\n\n    if(props.location.state.vitA){\n    for(let i =0; i<VitaminA.rowCount;i++){\n        data.push({\n            description: VitaminA.rows[i].description,\n            amount: VitaminA.rows[i].amount,\n            unit: VitaminA.rows[i].unit,\n            name: \"Vitamin A\",\n        })\n    }\n}\n\nconsole.log(data);\n\n for(let i=0; i<data.length; i++){\n    results.push(<div class =\"options\">{data[i].description} has {\n       data[i].amount} {data[i].unit} {data[i].name}  per 100g</div>);\n    }*/\n\n    return(\n        <div>\n        </div>\n    );\n}\nexport default Catalog;"]},"metadata":{},"sourceType":"module"}
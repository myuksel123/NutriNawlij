{"ast":null,"code":"import Axis from './axis';\nimport NumericAxis from './numeric-axis';\nimport AxisLabel from './axis-label';\nimport { DateLabelFormats } from './constants';\nimport { BLACK, DATE, COORD_PRECISION, DEFAULT_PRECISION } from '../common/constants';\nimport { setDefaultOptions, deepExtend, limitValue, round } from '../common';\nimport autoMajorUnit from './utils/auto-major-unit';\nimport ceil from './utils/ceil';\nimport { toDate, toTime, floorDate, ceilDate, duration, addDuration, addTicks, dateDiff, absoluteDateDiff, dateComparer, parseDate, parseDates, firstDay } from '../date-utils';\nimport { HOURS, DAYS, WEEKS, MONTHS, YEARS, TIME_PER_DAY, TIME_PER_WEEK, TIME_PER_MONTH, TIME_PER_YEAR, TIME_PER_UNIT } from '../date-utils/constants';\nvar MIN_VALUE_RANGE = 1000;\n\nvar DateValueAxis = function (Axis) {\n  function DateValueAxis(seriesMin, seriesMax, axisOptions, chartService) {\n    var min = toDate(seriesMin);\n    var max = toDate(seriesMax);\n    var intlService = chartService.intl;\n    var options = axisOptions || {};\n    options = deepExtend(options || {}, {\n      min: parseDate(intlService, options.min),\n      max: parseDate(intlService, options.max),\n      axisCrossingValue: parseDates(intlService, options.axisCrossingValues || options.axisCrossingValue),\n      weekStartDay: firstDay(options, intlService)\n    });\n    options = applyDefaults(min, max, options);\n    Axis.call(this, options, chartService);\n    this.intlService = intlService;\n    this.seriesMin = min;\n    this.seriesMax = max;\n    var weekStartDay = options.weekStartDay || 0;\n    this.totalMin = toTime(floorDate(toTime(min) - 1, options.baseUnit, weekStartDay));\n    this.totalMax = toTime(ceilDate(toTime(max) + 1, options.baseUnit, weekStartDay));\n  }\n\n  if (Axis) DateValueAxis.__proto__ = Axis;\n  DateValueAxis.prototype = Object.create(Axis && Axis.prototype);\n  DateValueAxis.prototype.constructor = DateValueAxis;\n\n  DateValueAxis.prototype.clone = function clone() {\n    return new DateValueAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);\n  };\n\n  DateValueAxis.prototype.range = function range() {\n    var options = this.options;\n    return {\n      min: options.min,\n      max: options.max\n    };\n  };\n\n  DateValueAxis.prototype.getDivisions = function getDivisions(stepValue) {\n    var options = this.options;\n    return Math.floor(duration(options.min, options.max, options.baseUnit) / stepValue + 1);\n  };\n\n  DateValueAxis.prototype.getTickPositions = function getTickPositions(step) {\n    var options = this.options;\n    var ref = this.lineInfo();\n    var dir = ref.axisDir;\n    var lineSize = ref.lineSize;\n    var start = ref.lineStart;\n    var divisions = this.getDivisions(step);\n    var timeRange = dateDiff(options.max, options.min);\n    var scale = lineSize / timeRange;\n    var weekStartDay = options.weekStartDay || 0;\n    var positions = [start];\n\n    for (var i = 1; i < divisions; i++) {\n      var date = addDuration(options.min, i * step, options.baseUnit, weekStartDay);\n      var pos = start + dateDiff(date, options.min) * scale * dir;\n      positions.push(round(pos, COORD_PRECISION));\n    }\n\n    return positions;\n  };\n\n  DateValueAxis.prototype.getMajorTickPositions = function getMajorTickPositions() {\n    return this.getTickPositions(this.options.majorUnit);\n  };\n\n  DateValueAxis.prototype.getMinorTickPositions = function getMinorTickPositions() {\n    return this.getTickPositions(this.options.minorUnit);\n  };\n\n  DateValueAxis.prototype.getSlot = function getSlot(a, b, limit) {\n    return NumericAxis.prototype.getSlot.call(this, parseDate(this.intlService, a), parseDate(this.intlService, b), limit);\n  };\n\n  DateValueAxis.prototype.getValue = function getValue(point) {\n    var value = NumericAxis.prototype.getValue.call(this, point);\n    return value !== null ? toDate(value) : null;\n  };\n\n  DateValueAxis.prototype.labelsCount = function labelsCount() {\n    return this.getDivisions(this.options.majorUnit);\n  };\n\n  DateValueAxis.prototype.createAxisLabel = function createAxisLabel(index, labelOptions, labelContext) {\n    var options = this.options;\n    var offset = index * options.majorUnit;\n    var weekStartDay = options.weekStartDay || 0;\n    var date = options.min;\n\n    if (offset > 0) {\n      date = addDuration(date, offset, options.baseUnit, weekStartDay);\n    }\n\n    var unitFormat = labelOptions.dateFormats[options.baseUnit];\n    labelOptions.format = labelOptions.format || unitFormat;\n    var text = this.axisLabelText(date, labelOptions, labelContext);\n    return new AxisLabel(date, text, index, null, labelOptions);\n  };\n\n  DateValueAxis.prototype.translateRange = function translateRange(delta) {\n    var options = this.options;\n    var lineBox = this.lineBox();\n    var vertical = options.vertical;\n    var reverse = options.reverse;\n    var size = vertical ? lineBox.height() : lineBox.width();\n    var range = this.range();\n    var scale = size / dateDiff(range.max, range.min);\n    var offset = round(delta / scale, DEFAULT_PRECISION);\n\n    if ((vertical || reverse) && !(vertical && reverse)) {\n      offset = -offset;\n    }\n\n    var from = addTicks(options.min, offset);\n    var to = addTicks(options.max, offset);\n    return {\n      min: from,\n      max: to,\n      offset: offset\n    };\n  };\n\n  DateValueAxis.prototype.shouldRenderNote = function shouldRenderNote(value) {\n    var range = this.range();\n    return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0;\n  };\n\n  DateValueAxis.prototype.pan = function pan(delta) {\n    var range = this.translateRange(delta, true);\n    var limittedRange = this.limitRange(toTime(range.min), toTime(range.max), this.totalMin, this.totalMax, range.offset);\n\n    if (limittedRange) {\n      return {\n        min: toDate(limittedRange.min),\n        max: toDate(limittedRange.max)\n      };\n    }\n  };\n\n  DateValueAxis.prototype.pointsRange = function pointsRange(start, end) {\n    var startValue = this.getValue(start);\n    var endValue = this.getValue(end);\n    var min = Math.min(startValue, endValue);\n    var max = Math.max(startValue, endValue);\n    return {\n      min: toDate(min),\n      max: toDate(max)\n    };\n  };\n\n  DateValueAxis.prototype.scaleRange = function scaleRange(scale, cursor) {\n    var position = Math.abs(this.pointOffset(cursor));\n    var range = this.options.max - this.options.min;\n    var delta = this.scaleToDelta(scale, range);\n    var minDelta = position * delta;\n    var maxDelta = (1 - position) * delta;\n    var min = toDate(toTime(this.options.min) + minDelta);\n    var max = toDate(toTime(this.options.max) - maxDelta);\n\n    if (max - min < MIN_VALUE_RANGE) {\n      max = toDate(toTime(min) + MIN_VALUE_RANGE);\n    }\n\n    return {\n      min: min,\n      max: max\n    };\n  };\n\n  DateValueAxis.prototype.zoomRange = function zoomRange(scale, cursor) {\n    var range = this.scaleRange(scale, cursor);\n    var min = toDate(limitValue(toTime(range.min), this.totalMin, this.totalMax));\n    var max = toDate(limitValue(toTime(range.max), this.totalMin, this.totalMax));\n    return {\n      min: min,\n      max: max\n    };\n  };\n\n  return DateValueAxis;\n}(Axis);\n\nfunction timeUnits(delta) {\n  var unit = HOURS;\n\n  if (delta >= TIME_PER_YEAR) {\n    unit = YEARS;\n  } else if (delta >= TIME_PER_MONTH) {\n    unit = MONTHS;\n  } else if (delta >= TIME_PER_WEEK) {\n    unit = WEEKS;\n  } else if (delta >= TIME_PER_DAY) {\n    unit = DAYS;\n  }\n\n  return unit;\n}\n\nfunction applyDefaults(seriesMin, seriesMax, options) {\n  var min = options.min || seriesMin;\n  var max = options.max || seriesMax;\n  var baseUnit = options.baseUnit || (max && min ? timeUnits(absoluteDateDiff(max, min)) : HOURS);\n  var baseUnitTime = TIME_PER_UNIT[baseUnit];\n  var weekStartDay = options.weekStartDay || 0;\n  var autoMin = floorDate(toTime(min) - 1, baseUnit, weekStartDay) || toDate(max);\n  var autoMax = ceilDate(toTime(max) + 1, baseUnit, weekStartDay);\n  var userMajorUnit = options.majorUnit ? options.majorUnit : undefined;\n  var majorUnit = userMajorUnit || ceil(autoMajorUnit(autoMin.getTime(), autoMax.getTime()), baseUnitTime) / baseUnitTime;\n  var actualUnits = duration(autoMin, autoMax, baseUnit);\n  var totalUnits = ceil(actualUnits, majorUnit);\n  var unitsToAdd = totalUnits - actualUnits;\n  var head = Math.floor(unitsToAdd / 2);\n  var tail = unitsToAdd - head;\n\n  if (!options.baseUnit) {\n    delete options.baseUnit;\n  }\n\n  options.baseUnit = options.baseUnit || baseUnit;\n  options.min = options.min || addDuration(autoMin, -head, baseUnit, weekStartDay);\n  options.max = options.max || addDuration(autoMax, tail, baseUnit, weekStartDay);\n  options.minorUnit = options.minorUnit || majorUnit / 5;\n  options.majorUnit = majorUnit;\n  return options;\n}\n\nsetDefaultOptions(DateValueAxis, {\n  type: DATE,\n  majorGridLines: {\n    visible: true,\n    width: 1,\n    color: BLACK\n  },\n  labels: {\n    dateFormats: DateLabelFormats\n  }\n});\nexport default DateValueAxis;","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/core/date-value-axis.js"],"names":["Axis","NumericAxis","AxisLabel","DateLabelFormats","BLACK","DATE","COORD_PRECISION","DEFAULT_PRECISION","setDefaultOptions","deepExtend","limitValue","round","autoMajorUnit","ceil","toDate","toTime","floorDate","ceilDate","duration","addDuration","addTicks","dateDiff","absoluteDateDiff","dateComparer","parseDate","parseDates","firstDay","HOURS","DAYS","WEEKS","MONTHS","YEARS","TIME_PER_DAY","TIME_PER_WEEK","TIME_PER_MONTH","TIME_PER_YEAR","TIME_PER_UNIT","MIN_VALUE_RANGE","DateValueAxis","seriesMin","seriesMax","axisOptions","chartService","min","max","intlService","intl","options","axisCrossingValue","axisCrossingValues","weekStartDay","applyDefaults","call","totalMin","baseUnit","totalMax","__proto__","prototype","Object","create","constructor","clone","assign","range","getDivisions","stepValue","Math","floor","getTickPositions","step","ref","lineInfo","dir","axisDir","lineSize","start","lineStart","divisions","timeRange","scale","positions","i","date","pos","push","getMajorTickPositions","majorUnit","getMinorTickPositions","minorUnit","getSlot","a","b","limit","getValue","point","value","labelsCount","createAxisLabel","index","labelOptions","labelContext","offset","unitFormat","dateFormats","format","text","axisLabelText","translateRange","delta","lineBox","vertical","reverse","size","height","width","from","to","shouldRenderNote","pan","limittedRange","limitRange","pointsRange","end","startValue","endValue","scaleRange","cursor","position","abs","pointOffset","scaleToDelta","minDelta","maxDelta","zoomRange","timeUnits","unit","baseUnitTime","autoMin","autoMax","userMajorUnit","undefined","getTime","actualUnits","totalUnits","unitsToAdd","head","tail","type","majorGridLines","visible","color","labels"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AAEA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,eAAtB,EAAuCC,iBAAvC,QAAgE,qBAAhE;AACA,SAASC,iBAAT,EAA4BC,UAA5B,EAAwCC,UAAxC,EAAoDC,KAApD,QAAiE,WAAjE;AAEA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,IAAP,MAAiB,cAAjB;AAEA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,SAAzB,EAAoCC,QAApC,EAA8CC,QAA9C,EAAwDC,WAAxD,EAAqEC,QAArE,EAA+EC,QAA/E,EAAyFC,gBAAzF,EAA2GC,YAA3G,EAAyHC,SAAzH,EAAoIC,UAApI,EAAgJC,QAAhJ,QAAgK,eAAhK;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqCC,KAArC,EAA4CC,YAA5C,EAA0DC,aAA1D,EAAyEC,cAAzE,EAAyFC,aAAzF,EAAwGC,aAAxG,QAA6H,yBAA7H;AAEA,IAAIC,eAAe,GAAG,IAAtB;;AAEA,IAAIC,aAAa,GAAI,UAAUtC,IAAV,EAAgB;AACjC,WAASsC,aAAT,CAAuBC,SAAvB,EAAkCC,SAAlC,EAA6CC,WAA7C,EAA0DC,YAA1D,EAAwE;AACpE,QAAIC,GAAG,GAAG7B,MAAM,CAACyB,SAAD,CAAhB;AACA,QAAIK,GAAG,GAAG9B,MAAM,CAAC0B,SAAD,CAAhB;AAEA,QAAIK,WAAW,GAAGH,YAAY,CAACI,IAA/B;AACA,QAAIC,OAAO,GAAGN,WAAW,IAAI,EAA7B;AACAM,IAAAA,OAAO,GAAGtC,UAAU,CAACsC,OAAO,IAAI,EAAZ,EAAgB;AAChCJ,MAAAA,GAAG,EAAEnB,SAAS,CAACqB,WAAD,EAAcE,OAAO,CAACJ,GAAtB,CADkB;AAEhCC,MAAAA,GAAG,EAAEpB,SAAS,CAACqB,WAAD,EAAcE,OAAO,CAACH,GAAtB,CAFkB;AAGhCI,MAAAA,iBAAiB,EAAEvB,UAAU,CAACoB,WAAD,EAAcE,OAAO,CAACE,kBAAR,IAA8BF,OAAO,CAACC,iBAApD,CAHG;AAIhCE,MAAAA,YAAY,EAAExB,QAAQ,CAACqB,OAAD,EAAUF,WAAV;AAJU,KAAhB,CAApB;AAMAE,IAAAA,OAAO,GAAGI,aAAa,CAACR,GAAD,EAAMC,GAAN,EAAWG,OAAX,CAAvB;AAEA/C,IAAAA,IAAI,CAACoD,IAAL,CAAU,IAAV,EAAgBL,OAAhB,EAAyBL,YAAzB;AAEA,SAAKG,WAAL,GAAmBA,WAAnB;AACA,SAAKN,SAAL,GAAiBI,GAAjB;AACA,SAAKH,SAAL,GAAiBI,GAAjB;AAEA,QAAIM,YAAY,GAAGH,OAAO,CAACG,YAAR,IAAwB,CAA3C;AACA,SAAKG,QAAL,GAAgBtC,MAAM,CAACC,SAAS,CAACD,MAAM,CAAC4B,GAAD,CAAN,GAAc,CAAf,EAAkBI,OAAO,CAACO,QAA1B,EAAoCJ,YAApC,CAAV,CAAtB;AACA,SAAKK,QAAL,GAAgBxC,MAAM,CAACE,QAAQ,CAACF,MAAM,CAAC6B,GAAD,CAAN,GAAc,CAAf,EAAkBG,OAAO,CAACO,QAA1B,EAAoCJ,YAApC,CAAT,CAAtB;AACH;;AAED,MAAKlD,IAAL,EAAYsC,aAAa,CAACkB,SAAd,GAA0BxD,IAA1B;AACZsC,EAAAA,aAAa,CAACmB,SAAd,GAA0BC,MAAM,CAACC,MAAP,CAAe3D,IAAI,IAAIA,IAAI,CAACyD,SAA5B,CAA1B;AACAnB,EAAAA,aAAa,CAACmB,SAAd,CAAwBG,WAAxB,GAAsCtB,aAAtC;;AAEAA,EAAAA,aAAa,CAACmB,SAAd,CAAwBI,KAAxB,GAAgC,SAASA,KAAT,GAAkB;AAC9C,WAAO,IAAIvB,aAAJ,CAAkB,KAAKC,SAAvB,EAAkC,KAAKC,SAAvC,EAAkDkB,MAAM,CAACI,MAAP,CAAc,EAAd,EAAkB,KAAKf,OAAvB,CAAlD,EAAmF,KAAKL,YAAxF,CAAP;AACH,GAFD;;AAIAJ,EAAAA,aAAa,CAACmB,SAAd,CAAwBM,KAAxB,GAAgC,SAASA,KAAT,GAAkB;AAC9C,QAAIhB,OAAO,GAAG,KAAKA,OAAnB;AACA,WAAO;AAAEJ,MAAAA,GAAG,EAAEI,OAAO,CAACJ,GAAf;AAAoBC,MAAAA,GAAG,EAAEG,OAAO,CAACH;AAAjC,KAAP;AACH,GAHD;;AAKAN,EAAAA,aAAa,CAACmB,SAAd,CAAwBO,YAAxB,GAAuC,SAASA,YAAT,CAAuBC,SAAvB,EAAkC;AACrE,QAAIlB,OAAO,GAAG,KAAKA,OAAnB;AAEA,WAAOmB,IAAI,CAACC,KAAL,CACHjD,QAAQ,CAAC6B,OAAO,CAACJ,GAAT,EAAcI,OAAO,CAACH,GAAtB,EAA2BG,OAAO,CAACO,QAAnC,CAAR,GAAuDW,SAAvD,GAAmE,CADhE,CAAP;AAGH,GAND;;AAQA3B,EAAAA,aAAa,CAACmB,SAAd,CAAwBW,gBAAxB,GAA2C,SAASA,gBAAT,CAA2BC,IAA3B,EAAiC;AACxE,QAAItB,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIuB,GAAG,GAAG,KAAKC,QAAL,EAAV;AACA,QAAIC,GAAG,GAAGF,GAAG,CAACG,OAAd;AACA,QAAIC,QAAQ,GAAGJ,GAAG,CAACI,QAAnB;AACA,QAAIC,KAAK,GAAGL,GAAG,CAACM,SAAhB;AACA,QAAIC,SAAS,GAAG,KAAKb,YAAL,CAAkBK,IAAlB,CAAhB;AACA,QAAIS,SAAS,GAAGzD,QAAQ,CAAC0B,OAAO,CAACH,GAAT,EAAcG,OAAO,CAACJ,GAAtB,CAAxB;AACA,QAAIoC,KAAK,GAAGL,QAAQ,GAAGI,SAAvB;AACA,QAAI5B,YAAY,GAAGH,OAAO,CAACG,YAAR,IAAwB,CAA3C;AAEA,QAAI8B,SAAS,GAAG,CAAEL,KAAF,CAAhB;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAApB,EAA+BI,CAAC,EAAhC,EAAoC;AAChC,UAAIC,IAAI,GAAG/D,WAAW,CAAC4B,OAAO,CAACJ,GAAT,EAAcsC,CAAC,GAAGZ,IAAlB,EAAwBtB,OAAO,CAACO,QAAhC,EAA0CJ,YAA1C,CAAtB;AACA,UAAIiC,GAAG,GAAGR,KAAK,GAAGtD,QAAQ,CAAC6D,IAAD,EAAOnC,OAAO,CAACJ,GAAf,CAAR,GAA8BoC,KAA9B,GAAsCP,GAAxD;AAEAQ,MAAAA,SAAS,CAACI,IAAV,CAAezE,KAAK,CAACwE,GAAD,EAAM7E,eAAN,CAApB;AACH;;AAED,WAAO0E,SAAP;AACH,GApBD;;AAsBA1C,EAAAA,aAAa,CAACmB,SAAd,CAAwB4B,qBAAxB,GAAgD,SAASA,qBAAT,GAAkC;AAC9E,WAAO,KAAKjB,gBAAL,CAAsB,KAAKrB,OAAL,CAAauC,SAAnC,CAAP;AACH,GAFD;;AAIAhD,EAAAA,aAAa,CAACmB,SAAd,CAAwB8B,qBAAxB,GAAgD,SAASA,qBAAT,GAAkC;AAC9E,WAAO,KAAKnB,gBAAL,CAAsB,KAAKrB,OAAL,CAAayC,SAAnC,CAAP;AACH,GAFD;;AAIAlD,EAAAA,aAAa,CAACmB,SAAd,CAAwBgC,OAAxB,GAAkC,SAASA,OAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwBC,KAAxB,EAA+B;AAC7D,WAAO3F,WAAW,CAACwD,SAAZ,CAAsBgC,OAAtB,CAA8BrC,IAA9B,CACH,IADG,EACG5B,SAAS,CAAC,KAAKqB,WAAN,EAAmB6C,CAAnB,CADZ,EACmClE,SAAS,CAAC,KAAKqB,WAAN,EAAmB8C,CAAnB,CAD5C,EACmEC,KADnE,CAAP;AAGH,GAJD;;AAMAtD,EAAAA,aAAa,CAACmB,SAAd,CAAwBoC,QAAxB,GAAmC,SAASA,QAAT,CAAmBC,KAAnB,EAA0B;AACzD,QAAIC,KAAK,GAAG9F,WAAW,CAACwD,SAAZ,CAAsBoC,QAAtB,CAA+BzC,IAA/B,CAAoC,IAApC,EAA0C0C,KAA1C,CAAZ;AAEA,WAAOC,KAAK,KAAK,IAAV,GAAiBjF,MAAM,CAACiF,KAAD,CAAvB,GAAiC,IAAxC;AACH,GAJD;;AAMAzD,EAAAA,aAAa,CAACmB,SAAd,CAAwBuC,WAAxB,GAAsC,SAASA,WAAT,GAAwB;AAC1D,WAAO,KAAKhC,YAAL,CAAkB,KAAKjB,OAAL,CAAauC,SAA/B,CAAP;AACH,GAFD;;AAIAhD,EAAAA,aAAa,CAACmB,SAAd,CAAwBwC,eAAxB,GAA0C,SAASA,eAAT,CAA0BC,KAA1B,EAAiCC,YAAjC,EAA+CC,YAA/C,EAA6D;AACnG,QAAIrD,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAIsD,MAAM,GAAGH,KAAK,GAAGnD,OAAO,CAACuC,SAA7B;AACA,QAAIpC,YAAY,GAAGH,OAAO,CAACG,YAAR,IAAwB,CAA3C;AACA,QAAIgC,IAAI,GAAGnC,OAAO,CAACJ,GAAnB;;AAEA,QAAI0D,MAAM,GAAG,CAAb,EAAgB;AACZnB,MAAAA,IAAI,GAAG/D,WAAW,CAAC+D,IAAD,EAAOmB,MAAP,EAAetD,OAAO,CAACO,QAAvB,EAAiCJ,YAAjC,CAAlB;AACH;;AAED,QAAIoD,UAAU,GAAGH,YAAY,CAACI,WAAb,CAAyBxD,OAAO,CAACO,QAAjC,CAAjB;AACA6C,IAAAA,YAAY,CAACK,MAAb,GAAsBL,YAAY,CAACK,MAAb,IAAuBF,UAA7C;AAEA,QAAIG,IAAI,GAAG,KAAKC,aAAL,CAAmBxB,IAAnB,EAAyBiB,YAAzB,EAAuCC,YAAvC,CAAX;AACA,WAAO,IAAIlG,SAAJ,CAAcgF,IAAd,EAAoBuB,IAApB,EAA0BP,KAA1B,EAAiC,IAAjC,EAAuCC,YAAvC,CAAP;AACH,GAfD;;AAiBA7D,EAAAA,aAAa,CAACmB,SAAd,CAAwBkD,cAAxB,GAAyC,SAASA,cAAT,CAAyBC,KAAzB,EAAgC;AACrE,QAAI7D,OAAO,GAAG,KAAKA,OAAnB;AACA,QAAI8D,OAAO,GAAG,KAAKA,OAAL,EAAd;AACA,QAAIC,QAAQ,GAAG/D,OAAO,CAAC+D,QAAvB;AACA,QAAIC,OAAO,GAAGhE,OAAO,CAACgE,OAAtB;AACA,QAAIC,IAAI,GAAGF,QAAQ,GAAGD,OAAO,CAACI,MAAR,EAAH,GAAsBJ,OAAO,CAACK,KAAR,EAAzC;AACA,QAAInD,KAAK,GAAG,KAAKA,KAAL,EAAZ;AACA,QAAIgB,KAAK,GAAGiC,IAAI,GAAG3F,QAAQ,CAAC0C,KAAK,CAACnB,GAAP,EAAYmB,KAAK,CAACpB,GAAlB,CAA3B;AAEA,QAAI0D,MAAM,GAAG1F,KAAK,CAACiG,KAAK,GAAG7B,KAAT,EAAgBxE,iBAAhB,CAAlB;;AACA,QAAI,CAACuG,QAAQ,IAAIC,OAAb,KAAyB,EAAED,QAAQ,IAAIC,OAAd,CAA7B,EAAsD;AAClDV,MAAAA,MAAM,GAAG,CAACA,MAAV;AACH;;AAED,QAAIc,IAAI,GAAG/F,QAAQ,CAAC2B,OAAO,CAACJ,GAAT,EAAc0D,MAAd,CAAnB;AACA,QAAIe,EAAE,GAAGhG,QAAQ,CAAC2B,OAAO,CAACH,GAAT,EAAcyD,MAAd,CAAjB;AAEA,WAAO;AACH1D,MAAAA,GAAG,EAAEwE,IADF;AAEHvE,MAAAA,GAAG,EAAEwE,EAFF;AAGHf,MAAAA,MAAM,EAAEA;AAHL,KAAP;AAKH,GAtBD;;AAwBA/D,EAAAA,aAAa,CAACmB,SAAd,CAAwB4D,gBAAxB,GAA2C,SAASA,gBAAT,CAA2BtB,KAA3B,EAAkC;AACzE,QAAIhC,KAAK,GAAG,KAAKA,KAAL,EAAZ;AAEA,WAAOxC,YAAY,CAACwE,KAAD,EAAQhC,KAAK,CAACpB,GAAd,CAAZ,IAAkC,CAAlC,IAAuCpB,YAAY,CAACwE,KAAD,EAAQhC,KAAK,CAACnB,GAAd,CAAZ,IAAkC,CAAhF;AACH,GAJD;;AAMAN,EAAAA,aAAa,CAACmB,SAAd,CAAwB6D,GAAxB,GAA8B,SAASA,GAAT,CAAcV,KAAd,EAAqB;AAC/C,QAAI7C,KAAK,GAAG,KAAK4C,cAAL,CAAoBC,KAApB,EAA2B,IAA3B,CAAZ;AACA,QAAIW,aAAa,GAAG,KAAKC,UAAL,CAAgBzG,MAAM,CAACgD,KAAK,CAACpB,GAAP,CAAtB,EAAmC5B,MAAM,CAACgD,KAAK,CAACnB,GAAP,CAAzC,EAAsD,KAAKS,QAA3D,EAAqE,KAAKE,QAA1E,EAAoFQ,KAAK,CAACsC,MAA1F,CAApB;;AAEA,QAAIkB,aAAJ,EAAmB;AACf,aAAO;AACH5E,QAAAA,GAAG,EAAE7B,MAAM,CAACyG,aAAa,CAAC5E,GAAf,CADR;AAEHC,QAAAA,GAAG,EAAE9B,MAAM,CAACyG,aAAa,CAAC3E,GAAf;AAFR,OAAP;AAIH;AACJ,GAVD;;AAYAN,EAAAA,aAAa,CAACmB,SAAd,CAAwBgE,WAAxB,GAAsC,SAASA,WAAT,CAAsB9C,KAAtB,EAA6B+C,GAA7B,EAAkC;AACpE,QAAIC,UAAU,GAAG,KAAK9B,QAAL,CAAclB,KAAd,CAAjB;AACA,QAAIiD,QAAQ,GAAG,KAAK/B,QAAL,CAAc6B,GAAd,CAAf;AACA,QAAI/E,GAAG,GAAGuB,IAAI,CAACvB,GAAL,CAASgF,UAAT,EAAqBC,QAArB,CAAV;AACA,QAAIhF,GAAG,GAAGsB,IAAI,CAACtB,GAAL,CAAS+E,UAAT,EAAqBC,QAArB,CAAV;AAEA,WAAO;AACHjF,MAAAA,GAAG,EAAE7B,MAAM,CAAC6B,GAAD,CADR;AAEHC,MAAAA,GAAG,EAAE9B,MAAM,CAAC8B,GAAD;AAFR,KAAP;AAIH,GAVD;;AAYAN,EAAAA,aAAa,CAACmB,SAAd,CAAwBoE,UAAxB,GAAqC,SAASA,UAAT,CAAqB9C,KAArB,EAA4B+C,MAA5B,EAAoC;AACrE,QAAIC,QAAQ,GAAG7D,IAAI,CAAC8D,GAAL,CAAS,KAAKC,WAAL,CAAiBH,MAAjB,CAAT,CAAf;AACA,QAAI/D,KAAK,GAAG,KAAKhB,OAAL,CAAaH,GAAb,GAAmB,KAAKG,OAAL,CAAaJ,GAA5C;AACA,QAAIiE,KAAK,GAAG,KAAKsB,YAAL,CAAkBnD,KAAlB,EAAyBhB,KAAzB,CAAZ;AACA,QAAIoE,QAAQ,GAAGJ,QAAQ,GAAGnB,KAA1B;AACA,QAAIwB,QAAQ,GAAG,CAAC,IAAIL,QAAL,IAAiBnB,KAAhC;AACA,QAAIjE,GAAG,GAAG7B,MAAM,CAACC,MAAM,CAAC,KAAKgC,OAAL,CAAaJ,GAAd,CAAN,GAA2BwF,QAA5B,CAAhB;AACA,QAAIvF,GAAG,GAAG9B,MAAM,CAACC,MAAM,CAAC,KAAKgC,OAAL,CAAaH,GAAd,CAAN,GAA2BwF,QAA5B,CAAhB;;AAEA,QAAIxF,GAAG,GAAGD,GAAN,GAAYN,eAAhB,EAAiC;AAC7BO,MAAAA,GAAG,GAAG9B,MAAM,CAACC,MAAM,CAAC4B,GAAD,CAAN,GAAcN,eAAf,CAAZ;AACH;;AAED,WAAO;AACHM,MAAAA,GAAG,EAAEA,GADF;AAEHC,MAAAA,GAAG,EAAEA;AAFF,KAAP;AAIH,GAjBD;;AAmBAN,EAAAA,aAAa,CAACmB,SAAd,CAAwB4E,SAAxB,GAAoC,SAASA,SAAT,CAAoBtD,KAApB,EAA2B+C,MAA3B,EAAmC;AACnE,QAAI/D,KAAK,GAAG,KAAK8D,UAAL,CAAgB9C,KAAhB,EAAuB+C,MAAvB,CAAZ;AACA,QAAInF,GAAG,GAAG7B,MAAM,CAACJ,UAAU,CAACK,MAAM,CAACgD,KAAK,CAACpB,GAAP,CAAP,EAAoB,KAAKU,QAAzB,EAAmC,KAAKE,QAAxC,CAAX,CAAhB;AACA,QAAIX,GAAG,GAAG9B,MAAM,CAACJ,UAAU,CAACK,MAAM,CAACgD,KAAK,CAACnB,GAAP,CAAP,EAAoB,KAAKS,QAAzB,EAAmC,KAAKE,QAAxC,CAAX,CAAhB;AAEA,WAAO;AACHZ,MAAAA,GAAG,EAAEA,GADF;AAEHC,MAAAA,GAAG,EAAEA;AAFF,KAAP;AAIH,GATD;;AAWA,SAAON,aAAP;AACH,CAnMoB,CAmMnBtC,IAnMmB,CAArB;;AAqMA,SAASsI,SAAT,CAAmB1B,KAAnB,EAA0B;AACtB,MAAI2B,IAAI,GAAG5G,KAAX;;AAEA,MAAIiF,KAAK,IAAIzE,aAAb,EAA4B;AACxBoG,IAAAA,IAAI,GAAGxG,KAAP;AACH,GAFD,MAEO,IAAI6E,KAAK,IAAI1E,cAAb,EAA6B;AAChCqG,IAAAA,IAAI,GAAGzG,MAAP;AACH,GAFM,MAEA,IAAI8E,KAAK,IAAI3E,aAAb,EAA4B;AAC/BsG,IAAAA,IAAI,GAAG1G,KAAP;AACH,GAFM,MAEA,IAAI+E,KAAK,IAAI5E,YAAb,EAA2B;AAC9BuG,IAAAA,IAAI,GAAG3G,IAAP;AACH;;AAED,SAAO2G,IAAP;AACH;;AAED,SAASpF,aAAT,CAAuBZ,SAAvB,EAAkCC,SAAlC,EAA6CO,OAA7C,EAAsD;AAClD,MAAIJ,GAAG,GAAGI,OAAO,CAACJ,GAAR,IAAeJ,SAAzB;AACA,MAAIK,GAAG,GAAGG,OAAO,CAACH,GAAR,IAAeJ,SAAzB;AACA,MAAIc,QAAQ,GAAGP,OAAO,CAACO,QAAR,KAAqBV,GAAG,IAAID,GAAP,GAAa2F,SAAS,CAAChH,gBAAgB,CAACsB,GAAD,EAAMD,GAAN,CAAjB,CAAtB,GAAqDhB,KAA1E,CAAf;AACA,MAAI6G,YAAY,GAAGpG,aAAa,CAACkB,QAAD,CAAhC;AACA,MAAIJ,YAAY,GAAGH,OAAO,CAACG,YAAR,IAAwB,CAA3C;AACA,MAAIuF,OAAO,GAAGzH,SAAS,CAACD,MAAM,CAAC4B,GAAD,CAAN,GAAc,CAAf,EAAkBW,QAAlB,EAA4BJ,YAA5B,CAAT,IAAsDpC,MAAM,CAAC8B,GAAD,CAA1E;AACA,MAAI8F,OAAO,GAAGzH,QAAQ,CAACF,MAAM,CAAC6B,GAAD,CAAN,GAAc,CAAf,EAAkBU,QAAlB,EAA4BJ,YAA5B,CAAtB;AACA,MAAIyF,aAAa,GAAG5F,OAAO,CAACuC,SAAR,GAAoBvC,OAAO,CAACuC,SAA5B,GAAwCsD,SAA5D;AACA,MAAItD,SAAS,GAAGqD,aAAa,IAAI9H,IAAI,CACjBD,aAAa,CAAC6H,OAAO,CAACI,OAAR,EAAD,EAAoBH,OAAO,CAACG,OAAR,EAApB,CADI,EAEjBL,YAFiB,CAAJ,GAGbA,YAHpB;AAIA,MAAIM,WAAW,GAAG5H,QAAQ,CAACuH,OAAD,EAAUC,OAAV,EAAmBpF,QAAnB,CAA1B;AACA,MAAIyF,UAAU,GAAGlI,IAAI,CAACiI,WAAD,EAAcxD,SAAd,CAArB;AACA,MAAI0D,UAAU,GAAGD,UAAU,GAAGD,WAA9B;AACA,MAAIG,IAAI,GAAG/E,IAAI,CAACC,KAAL,CAAW6E,UAAU,GAAG,CAAxB,CAAX;AACA,MAAIE,IAAI,GAAGF,UAAU,GAAGC,IAAxB;;AAEA,MAAI,CAAClG,OAAO,CAACO,QAAb,EAAuB;AACnB,WAAOP,OAAO,CAACO,QAAf;AACH;;AAEDP,EAAAA,OAAO,CAACO,QAAR,GAAmBP,OAAO,CAACO,QAAR,IAAoBA,QAAvC;AACAP,EAAAA,OAAO,CAACJ,GAAR,GAAcI,OAAO,CAACJ,GAAR,IAAexB,WAAW,CAACsH,OAAD,EAAU,CAACQ,IAAX,EAAiB3F,QAAjB,EAA2BJ,YAA3B,CAAxC;AACAH,EAAAA,OAAO,CAACH,GAAR,GAAcG,OAAO,CAACH,GAAR,IAAezB,WAAW,CAACuH,OAAD,EAAUQ,IAAV,EAAgB5F,QAAhB,EAA0BJ,YAA1B,CAAxC;AACAH,EAAAA,OAAO,CAACyC,SAAR,GAAoBzC,OAAO,CAACyC,SAAR,IAAqBF,SAAS,GAAG,CAArD;AACAvC,EAAAA,OAAO,CAACuC,SAAR,GAAoBA,SAApB;AAEA,SAAOvC,OAAP;AACH;;AAEDvC,iBAAiB,CAAC8B,aAAD,EAAgB;AAC7B6G,EAAAA,IAAI,EAAE9I,IADuB;AAE7B+I,EAAAA,cAAc,EAAE;AACZC,IAAAA,OAAO,EAAE,IADG;AAEZnC,IAAAA,KAAK,EAAE,CAFK;AAGZoC,IAAAA,KAAK,EAAElJ;AAHK,GAFa;AAO7BmJ,EAAAA,MAAM,EAAE;AACJhD,IAAAA,WAAW,EAAEpG;AADT;AAPqB,CAAhB,CAAjB;AAYA,eAAemC,aAAf","sourcesContent":["import Axis from './axis';\nimport NumericAxis from './numeric-axis';\nimport AxisLabel from './axis-label';\nimport { DateLabelFormats } from './constants';\n\nimport { BLACK, DATE, COORD_PRECISION, DEFAULT_PRECISION } from '../common/constants';\nimport { setDefaultOptions, deepExtend, limitValue, round } from '../common';\n\nimport autoMajorUnit from './utils/auto-major-unit';\nimport ceil from './utils/ceil';\n\nimport { toDate, toTime, floorDate, ceilDate, duration, addDuration, addTicks, dateDiff, absoluteDateDiff, dateComparer, parseDate, parseDates, firstDay } from '../date-utils';\nimport { HOURS, DAYS, WEEKS, MONTHS, YEARS, TIME_PER_DAY, TIME_PER_WEEK, TIME_PER_MONTH, TIME_PER_YEAR, TIME_PER_UNIT } from '../date-utils/constants';\n\nvar MIN_VALUE_RANGE = 1000;\n\nvar DateValueAxis = (function (Axis) {\n    function DateValueAxis(seriesMin, seriesMax, axisOptions, chartService) {\n        var min = toDate(seriesMin);\n        var max = toDate(seriesMax);\n\n        var intlService = chartService.intl;\n        var options = axisOptions || {};\n        options = deepExtend(options || {}, {\n            min: parseDate(intlService, options.min),\n            max: parseDate(intlService, options.max),\n            axisCrossingValue: parseDates(intlService, options.axisCrossingValues || options.axisCrossingValue),\n            weekStartDay: firstDay(options, intlService)\n        });\n        options = applyDefaults(min, max, options);\n\n        Axis.call(this, options, chartService);\n\n        this.intlService = intlService;\n        this.seriesMin = min;\n        this.seriesMax = max;\n\n        var weekStartDay = options.weekStartDay || 0;\n        this.totalMin = toTime(floorDate(toTime(min) - 1, options.baseUnit, weekStartDay));\n        this.totalMax = toTime(ceilDate(toTime(max) + 1, options.baseUnit, weekStartDay));\n    }\n\n    if ( Axis ) DateValueAxis.__proto__ = Axis;\n    DateValueAxis.prototype = Object.create( Axis && Axis.prototype );\n    DateValueAxis.prototype.constructor = DateValueAxis;\n\n    DateValueAxis.prototype.clone = function clone () {\n        return new DateValueAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);\n    };\n\n    DateValueAxis.prototype.range = function range () {\n        var options = this.options;\n        return { min: options.min, max: options.max };\n    };\n\n    DateValueAxis.prototype.getDivisions = function getDivisions (stepValue) {\n        var options = this.options;\n\n        return Math.floor(\n            duration(options.min, options.max, options.baseUnit) / stepValue + 1\n        );\n    };\n\n    DateValueAxis.prototype.getTickPositions = function getTickPositions (step) {\n        var options = this.options;\n        var ref = this.lineInfo();\n        var dir = ref.axisDir;\n        var lineSize = ref.lineSize;\n        var start = ref.lineStart;\n        var divisions = this.getDivisions(step);\n        var timeRange = dateDiff(options.max, options.min);\n        var scale = lineSize / timeRange;\n        var weekStartDay = options.weekStartDay || 0;\n\n        var positions = [ start ];\n        for (var i = 1; i < divisions; i++) {\n            var date = addDuration(options.min, i * step, options.baseUnit, weekStartDay);\n            var pos = start + dateDiff(date, options.min) * scale * dir;\n\n            positions.push(round(pos, COORD_PRECISION));\n        }\n\n        return positions;\n    };\n\n    DateValueAxis.prototype.getMajorTickPositions = function getMajorTickPositions () {\n        return this.getTickPositions(this.options.majorUnit);\n    };\n\n    DateValueAxis.prototype.getMinorTickPositions = function getMinorTickPositions () {\n        return this.getTickPositions(this.options.minorUnit);\n    };\n\n    DateValueAxis.prototype.getSlot = function getSlot (a, b, limit) {\n        return NumericAxis.prototype.getSlot.call(\n            this, parseDate(this.intlService, a), parseDate(this.intlService, b), limit\n        );\n    };\n\n    DateValueAxis.prototype.getValue = function getValue (point) {\n        var value = NumericAxis.prototype.getValue.call(this, point);\n\n        return value !== null ? toDate(value) : null;\n    };\n\n    DateValueAxis.prototype.labelsCount = function labelsCount () {\n        return this.getDivisions(this.options.majorUnit);\n    };\n\n    DateValueAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions, labelContext) {\n        var options = this.options;\n        var offset = index * options.majorUnit;\n        var weekStartDay = options.weekStartDay || 0;\n        var date = options.min;\n\n        if (offset > 0) {\n            date = addDuration(date, offset, options.baseUnit, weekStartDay);\n        }\n\n        var unitFormat = labelOptions.dateFormats[options.baseUnit];\n        labelOptions.format = labelOptions.format || unitFormat;\n\n        var text = this.axisLabelText(date, labelOptions, labelContext);\n        return new AxisLabel(date, text, index, null, labelOptions);\n    };\n\n    DateValueAxis.prototype.translateRange = function translateRange (delta) {\n        var options = this.options;\n        var lineBox = this.lineBox();\n        var vertical = options.vertical;\n        var reverse = options.reverse;\n        var size = vertical ? lineBox.height() : lineBox.width();\n        var range = this.range();\n        var scale = size / dateDiff(range.max, range.min);\n\n        var offset = round(delta / scale, DEFAULT_PRECISION);\n        if ((vertical || reverse) && !(vertical && reverse )) {\n            offset = -offset;\n        }\n\n        var from = addTicks(options.min, offset);\n        var to = addTicks(options.max, offset);\n\n        return {\n            min: from,\n            max: to,\n            offset: offset\n        };\n    };\n\n    DateValueAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {\n        var range = this.range();\n\n        return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0;\n    };\n\n    DateValueAxis.prototype.pan = function pan (delta) {\n        var range = this.translateRange(delta, true);\n        var limittedRange = this.limitRange(toTime(range.min), toTime(range.max), this.totalMin, this.totalMax, range.offset);\n\n        if (limittedRange) {\n            return {\n                min: toDate(limittedRange.min),\n                max: toDate(limittedRange.max)\n            };\n        }\n    };\n\n    DateValueAxis.prototype.pointsRange = function pointsRange (start, end) {\n        var startValue = this.getValue(start);\n        var endValue = this.getValue(end);\n        var min = Math.min(startValue, endValue);\n        var max = Math.max(startValue, endValue);\n\n        return {\n            min: toDate(min),\n            max: toDate(max)\n        };\n    };\n\n    DateValueAxis.prototype.scaleRange = function scaleRange (scale, cursor) {\n        var position = Math.abs(this.pointOffset(cursor));\n        var range = this.options.max - this.options.min;\n        var delta = this.scaleToDelta(scale, range);\n        var minDelta = position * delta;\n        var maxDelta = (1 - position) * delta;\n        var min = toDate(toTime(this.options.min) + minDelta);\n        var max = toDate(toTime(this.options.max) - maxDelta);\n\n        if (max - min < MIN_VALUE_RANGE) {\n            max = toDate(toTime(min) + MIN_VALUE_RANGE);\n        }\n\n        return {\n            min: min,\n            max: max\n        };\n    };\n\n    DateValueAxis.prototype.zoomRange = function zoomRange (scale, cursor) {\n        var range = this.scaleRange(scale, cursor);\n        var min = toDate(limitValue(toTime(range.min), this.totalMin, this.totalMax));\n        var max = toDate(limitValue(toTime(range.max), this.totalMin, this.totalMax));\n\n        return {\n            min: min,\n            max: max\n        };\n    };\n\n    return DateValueAxis;\n}(Axis));\n\nfunction timeUnits(delta) {\n    var unit = HOURS;\n\n    if (delta >= TIME_PER_YEAR) {\n        unit = YEARS;\n    } else if (delta >= TIME_PER_MONTH) {\n        unit = MONTHS;\n    } else if (delta >= TIME_PER_WEEK) {\n        unit = WEEKS;\n    } else if (delta >= TIME_PER_DAY) {\n        unit = DAYS;\n    }\n\n    return unit;\n}\n\nfunction applyDefaults(seriesMin, seriesMax, options) {\n    var min = options.min || seriesMin;\n    var max = options.max || seriesMax;\n    var baseUnit = options.baseUnit || (max && min ? timeUnits(absoluteDateDiff(max, min)) : HOURS);\n    var baseUnitTime = TIME_PER_UNIT[baseUnit];\n    var weekStartDay = options.weekStartDay || 0;\n    var autoMin = floorDate(toTime(min) - 1, baseUnit, weekStartDay) || toDate(max);\n    var autoMax = ceilDate(toTime(max) + 1, baseUnit, weekStartDay);\n    var userMajorUnit = options.majorUnit ? options.majorUnit : undefined;\n    var majorUnit = userMajorUnit || ceil(\n                        autoMajorUnit(autoMin.getTime(), autoMax.getTime()),\n                        baseUnitTime\n                    ) / baseUnitTime;\n    var actualUnits = duration(autoMin, autoMax, baseUnit);\n    var totalUnits = ceil(actualUnits, majorUnit);\n    var unitsToAdd = totalUnits - actualUnits;\n    var head = Math.floor(unitsToAdd / 2);\n    var tail = unitsToAdd - head;\n\n    if (!options.baseUnit) {\n        delete options.baseUnit;\n    }\n\n    options.baseUnit = options.baseUnit || baseUnit;\n    options.min = options.min || addDuration(autoMin, -head, baseUnit, weekStartDay);\n    options.max = options.max || addDuration(autoMax, tail, baseUnit, weekStartDay);\n    options.minorUnit = options.minorUnit || majorUnit / 5;\n    options.majorUnit = majorUnit;\n\n    return options;\n}\n\nsetDefaultOptions(DateValueAxis, {\n    type: DATE,\n    majorGridLines: {\n        visible: true,\n        width: 1,\n        color: BLACK\n    },\n    labels: {\n        dateFormats: DateLabelFormats\n    }\n});\n\nexport default DateValueAxis;\n"]},"metadata":{},"sourceType":"module"}
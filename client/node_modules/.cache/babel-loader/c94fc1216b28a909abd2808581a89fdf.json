{"ast":null,"code":"import Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\nimport createAxisTick from './utils/create-axis-tick';\nimport createAxisGridLine from './utils/create-axis-grid-line';\nimport limitCoordinate from './utils/limit-coordinate';\nimport { DEFAULT_PRECISION, BLACK } from '../common/constants';\nimport { deepExtend, defined, inArray, limitValue, round, setDefaultOptions, valueOrDefault } from '../common';\nvar DEFAULT_MAJOR_UNIT = 10;\nvar MIN_VALUE_RANGE = 1e-6;\n\nvar LogarithmicAxis = function (Axis) {\n  function LogarithmicAxis(seriesMin, seriesMax, options, chartService) {\n    var axisOptions = deepExtend({\n      majorUnit: DEFAULT_MAJOR_UNIT,\n      min: seriesMin,\n      max: seriesMax\n    }, options);\n    var base = axisOptions.majorUnit;\n    var autoMax = autoAxisMax(seriesMax, base);\n    var autoMin = autoAxisMin(seriesMin, seriesMax, axisOptions);\n    var range = initRange(autoMin, autoMax, axisOptions, options);\n    axisOptions.max = range.max;\n    axisOptions.min = range.min;\n    axisOptions.minorUnit = options.minorUnit || round(base - 1, DEFAULT_PRECISION);\n    Axis.call(this, axisOptions, chartService);\n    this.totalMin = defined(options.min) ? Math.min(autoMin, options.min) : autoMin;\n    this.totalMax = defined(options.max) ? Math.max(autoMax, options.max) : autoMax;\n    this.logMin = round(log(range.min, base), DEFAULT_PRECISION);\n    this.logMax = round(log(range.max, base), DEFAULT_PRECISION);\n    this.seriesMin = seriesMin;\n    this.seriesMax = seriesMax;\n    this.createLabels();\n  }\n\n  if (Axis) LogarithmicAxis.__proto__ = Axis;\n  LogarithmicAxis.prototype = Object.create(Axis && Axis.prototype);\n  LogarithmicAxis.prototype.constructor = LogarithmicAxis;\n\n  LogarithmicAxis.prototype.clone = function clone() {\n    return new LogarithmicAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);\n  };\n\n  LogarithmicAxis.prototype.startValue = function startValue() {\n    return this.options.min;\n  };\n\n  LogarithmicAxis.prototype.getSlot = function getSlot(a, b, limit) {\n    var ref = this;\n    var options = ref.options;\n    var logMin = ref.logMin;\n    var logMax = ref.logMax;\n    var base = options.majorUnit;\n    var min = options.min;\n    var max = options.max;\n    var ref$1 = this.lineInfo();\n    var axis = ref$1.axis;\n    var axisDir = ref$1.axisDir;\n    var lineBox = ref$1.lineBox;\n    var lineSize = ref$1.lineSize;\n    var lineStart = ref$1.lineStart;\n    var step = axisDir * (lineSize / (logMax - logMin));\n    var start = valueOrDefault(a, b || 1);\n    var end = valueOrDefault(b, a || 1);\n\n    if (start <= 0 || end <= 0) {\n      return null;\n    }\n\n    if (limit) {\n      start = limitValue(start, min, max);\n      end = limitValue(end, min, max);\n    }\n\n    start = log(start, base);\n    end = log(end, base);\n    var p1 = Math.min(start, end) - logMin;\n    var p2 = Math.max(start, end) - logMin;\n    var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n    slotBox[axis + 1] = limitCoordinate(lineStart + step * (axisDir > 0 ? p1 : p2));\n    slotBox[axis + 2] = limitCoordinate(lineStart + step * (axisDir > 0 ? p2 : p1));\n    return slotBox;\n  };\n\n  LogarithmicAxis.prototype.getValue = function getValue(point) {\n    var ref = this;\n    var options = ref.options;\n    var logMin = ref.logMin;\n    var logMax = ref.logMax;\n    var base = options.majorUnit;\n    var ref$1 = this.lineInfo();\n    var axis = ref$1.axis;\n    var axisDir = ref$1.axisDir;\n    var lineStart = ref$1.lineStart;\n    var lineSize = ref$1.lineSize;\n    var step = (logMax - logMin) / lineSize;\n    var offset = axisDir * (point[axis] - lineStart);\n    var valueOffset = offset * step;\n\n    if (offset < 0 || offset > lineSize) {\n      return null;\n    }\n\n    var value = logMin + valueOffset;\n    return round(Math.pow(base, value), DEFAULT_PRECISION);\n  };\n\n  LogarithmicAxis.prototype.range = function range() {\n    var options = this.options;\n    return {\n      min: options.min,\n      max: options.max\n    };\n  };\n\n  LogarithmicAxis.prototype.translateRange = function translateRange(delta) {\n    var ref = this;\n    var options = ref.options;\n    var logMin = ref.logMin;\n    var logMax = ref.logMax;\n    var reverse = options.reverse;\n    var vertical = options.vertical;\n    var base = options.majorUnit;\n    var lineBox = this.lineBox();\n    var size = vertical ? lineBox.height() : lineBox.width();\n    var scale = size / (logMax - logMin);\n    var offset = round(delta / scale, DEFAULT_PRECISION);\n\n    if ((vertical || reverse) && !(vertical && reverse)) {\n      offset = -offset;\n    }\n\n    return {\n      min: Math.pow(base, logMin + offset),\n      max: Math.pow(base, logMax + offset),\n      offset: offset\n    };\n  };\n\n  LogarithmicAxis.prototype.labelsCount = function labelsCount() {\n    var floorMax = Math.floor(this.logMax);\n    var count = Math.floor(floorMax - this.logMin) + 1;\n    return count;\n  };\n\n  LogarithmicAxis.prototype.getMajorTickPositions = function getMajorTickPositions() {\n    var ticks = [];\n    this.traverseMajorTicksPositions(function (position) {\n      ticks.push(position);\n    }, {\n      step: 1,\n      skip: 0\n    });\n    return ticks;\n  };\n\n  LogarithmicAxis.prototype.createTicks = function createTicks(lineGroup) {\n    var options = this.options;\n    var majorTicks = options.majorTicks;\n    var minorTicks = options.minorTicks;\n    var vertical = options.vertical;\n    var mirror = options.labels.mirror;\n    var lineBox = this.lineBox();\n    var ticks = [];\n    var tickLineOptions = {\n      // TODO\n      // _alignLines: options._alignLines,\n      vertical: vertical\n    };\n\n    function render(tickPosition, tickOptions) {\n      tickLineOptions.tickX = mirror ? lineBox.x2 : lineBox.x2 - tickOptions.size;\n      tickLineOptions.tickY = mirror ? lineBox.y1 - tickOptions.size : lineBox.y1;\n      tickLineOptions.position = tickPosition;\n      lineGroup.append(createAxisTick(tickLineOptions, tickOptions));\n    }\n\n    if (majorTicks.visible) {\n      this.traverseMajorTicksPositions(render, majorTicks);\n    }\n\n    if (minorTicks.visible) {\n      this.traverseMinorTicksPositions(render, minorTicks);\n    }\n\n    return ticks;\n  };\n\n  LogarithmicAxis.prototype.createGridLines = function createGridLines(altAxis) {\n    var options = this.options;\n    var minorGridLines = options.minorGridLines;\n    var majorGridLines = options.majorGridLines;\n    var vertical = options.vertical;\n    var lineBox = altAxis.lineBox();\n    var lineOptions = {\n      lineStart: lineBox[vertical ? \"x1\" : \"y1\"],\n      lineEnd: lineBox[vertical ? \"x2\" : \"y2\"],\n      vertical: vertical\n    };\n    var majorTicks = [];\n    var container = this.gridLinesVisual();\n\n    function render(tickPosition, gridLine) {\n      if (!inArray(tickPosition, majorTicks)) {\n        lineOptions.position = tickPosition;\n        container.append(createAxisGridLine(lineOptions, gridLine));\n        majorTicks.push(tickPosition);\n      }\n    }\n\n    if (majorGridLines.visible) {\n      this.traverseMajorTicksPositions(render, majorGridLines);\n    }\n\n    if (minorGridLines.visible) {\n      this.traverseMinorTicksPositions(render, minorGridLines);\n    }\n\n    return container.children;\n  };\n\n  LogarithmicAxis.prototype.traverseMajorTicksPositions = function traverseMajorTicksPositions(callback, tickOptions) {\n    var ref = this.lineInfo();\n    var lineStart = ref.lineStart;\n    var step = ref.step;\n    var ref$1 = this;\n    var logMin = ref$1.logMin;\n    var logMax = ref$1.logMax;\n\n    for (var power = Math.ceil(logMin) + tickOptions.skip; power <= logMax; power += tickOptions.step) {\n      var position = round(lineStart + step * (power - logMin), DEFAULT_PRECISION);\n      callback(position, tickOptions);\n    }\n  };\n\n  LogarithmicAxis.prototype.traverseMinorTicksPositions = function traverseMinorTicksPositions(callback, tickOptions) {\n    var this$1 = this;\n    var ref = this.options;\n    var min = ref.min;\n    var max = ref.max;\n    var minorUnit = ref.minorUnit;\n    var base = ref.majorUnit;\n    var ref$1 = this.lineInfo();\n    var lineStart = ref$1.lineStart;\n    var step = ref$1.step;\n    var ref$2 = this;\n    var logMin = ref$2.logMin;\n    var logMax = ref$2.logMax;\n    var start = Math.floor(logMin);\n\n    for (var power = start; power < logMax; power++) {\n      var minorOptions = this$1._minorIntervalOptions(power);\n\n      for (var idx = tickOptions.skip; idx < minorUnit; idx += tickOptions.step) {\n        var value = minorOptions.value + idx * minorOptions.minorStep;\n\n        if (value > max) {\n          break;\n        }\n\n        if (value >= min) {\n          var position = round(lineStart + step * (log(value, base) - logMin), DEFAULT_PRECISION);\n          callback(position, tickOptions);\n        }\n      }\n    }\n  };\n\n  LogarithmicAxis.prototype.createAxisLabel = function createAxisLabel(index, labelOptions, labelContext) {\n    var power = Math.ceil(this.logMin + index);\n    var value = Math.pow(this.options.majorUnit, power);\n    var text = this.axisLabelText(value, labelOptions, labelContext);\n    return new AxisLabel(value, text, index, null, labelOptions);\n  };\n\n  LogarithmicAxis.prototype.shouldRenderNote = function shouldRenderNote(value) {\n    var range = this.range();\n    return range.min <= value && value <= range.max;\n  };\n\n  LogarithmicAxis.prototype.pan = function pan(delta) {\n    var range = this.translateRange(delta);\n    return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);\n  };\n\n  LogarithmicAxis.prototype.pointsRange = function pointsRange(start, end) {\n    var startValue = this.getValue(start);\n    var endValue = this.getValue(end);\n    var min = Math.min(startValue, endValue);\n    var max = Math.max(startValue, endValue);\n    return {\n      min: min,\n      max: max\n    };\n  };\n\n  LogarithmicAxis.prototype.scaleRange = function scaleRange(scale, cursor) {\n    var ref = this.options;\n    var base = ref.majorUnit;\n    var logMin = log(this.options.min, base);\n    var logMax = log(this.options.max, base);\n    var position = Math.abs(this.pointOffset(cursor));\n    var range = logMax - logMin;\n    var delta = this.scaleToDelta(scale, range);\n    var min = Math.pow(base, logMin + position * delta);\n    var max = Math.pow(base, logMax - (1 - position) * delta);\n\n    if (max - min < MIN_VALUE_RANGE) {\n      max = min + MIN_VALUE_RANGE;\n    }\n\n    return {\n      min: min,\n      max: max\n    };\n  };\n\n  LogarithmicAxis.prototype.zoomRange = function zoomRange(scale, cursor) {\n    var range = this.scaleRange(scale, cursor);\n    var ref = this;\n    var totalMin = ref.totalMin;\n    var totalMax = ref.totalMax;\n    return {\n      min: limitValue(range.min, totalMin, totalMax),\n      max: limitValue(range.max, totalMin, totalMax)\n    };\n  };\n\n  LogarithmicAxis.prototype._minorIntervalOptions = function _minorIntervalOptions(power) {\n    var ref = this.options;\n    var minorUnit = ref.minorUnit;\n    var base = ref.majorUnit;\n    var value = Math.pow(base, power);\n    var nextValue = Math.pow(base, power + 1);\n    var difference = nextValue - value;\n    var minorStep = difference / minorUnit;\n    return {\n      value: value,\n      minorStep: minorStep\n    };\n  };\n\n  LogarithmicAxis.prototype.lineInfo = function lineInfo() {\n    var info = Axis.prototype.lineInfo.call(this);\n    info.step = info.axisDir * (info.lineSize / (this.logMax - this.logMin));\n    return info;\n  };\n\n  return LogarithmicAxis;\n}(Axis);\n\nfunction initRange(autoMin, autoMax, axisOptions, options) {\n  var min = axisOptions.min;\n  var max = axisOptions.max;\n\n  if (defined(axisOptions.axisCrossingValue) && axisOptions.axisCrossingValue <= 0) {\n    throwNegativeValuesError();\n  }\n\n  if (!defined(options.max)) {\n    max = autoMax;\n  } else if (options.max <= 0) {\n    throwNegativeValuesError();\n  }\n\n  if (!defined(options.min)) {\n    min = autoMin;\n  } else if (options.min <= 0) {\n    throwNegativeValuesError();\n  }\n\n  return {\n    min: min,\n    max: max\n  };\n}\n\nfunction autoAxisMin(min, max, options) {\n  var base = options.majorUnit;\n  var autoMin = min;\n\n  if (min <= 0) {\n    autoMin = max <= 1 ? Math.pow(base, -2) : 1;\n  } else if (!options.narrowRange) {\n    autoMin = Math.pow(base, Math.floor(log(min, base)));\n  }\n\n  return autoMin;\n}\n\nfunction autoAxisMax(max, base) {\n  var logMaxRemainder = round(log(max, base), DEFAULT_PRECISION) % 1;\n  var autoMax;\n\n  if (max <= 0) {\n    autoMax = base;\n  } else if (logMaxRemainder !== 0 && (logMaxRemainder < 0.3 || logMaxRemainder > 0.9)) {\n    autoMax = Math.pow(base, log(max, base) + 0.2);\n  } else {\n    autoMax = Math.pow(base, Math.ceil(log(max, base)));\n  }\n\n  return autoMax;\n}\n\nfunction throwNegativeValuesError() {\n  throw new Error(\"Non positive values cannot be used for a logarithmic axis\");\n}\n\nfunction log(x, base) {\n  return Math.log(x) / Math.log(base);\n}\n\nsetDefaultOptions(LogarithmicAxis, {\n  type: \"log\",\n  majorUnit: DEFAULT_MAJOR_UNIT,\n  minorUnit: 1,\n  axisCrossingValue: 1,\n  vertical: true,\n  majorGridLines: {\n    visible: true,\n    width: 1,\n    color: BLACK\n  },\n  zIndex: 1,\n  _deferLabels: true\n});\nexport default LogarithmicAxis;","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/core/logarithmic-axis.js"],"names":["Axis","AxisLabel","Box","createAxisTick","createAxisGridLine","limitCoordinate","DEFAULT_PRECISION","BLACK","deepExtend","defined","inArray","limitValue","round","setDefaultOptions","valueOrDefault","DEFAULT_MAJOR_UNIT","MIN_VALUE_RANGE","LogarithmicAxis","seriesMin","seriesMax","options","chartService","axisOptions","majorUnit","min","max","base","autoMax","autoAxisMax","autoMin","autoAxisMin","range","initRange","minorUnit","call","totalMin","Math","totalMax","logMin","log","logMax","createLabels","__proto__","prototype","Object","create","constructor","clone","assign","startValue","getSlot","a","b","limit","ref","ref$1","lineInfo","axis","axisDir","lineBox","lineSize","lineStart","step","start","end","p1","p2","slotBox","x1","y1","getValue","point","offset","valueOffset","value","pow","translateRange","delta","reverse","vertical","size","height","width","scale","labelsCount","floorMax","floor","count","getMajorTickPositions","ticks","traverseMajorTicksPositions","position","push","skip","createTicks","lineGroup","majorTicks","minorTicks","mirror","labels","tickLineOptions","render","tickPosition","tickOptions","tickX","x2","tickY","append","visible","traverseMinorTicksPositions","createGridLines","altAxis","minorGridLines","majorGridLines","lineOptions","lineEnd","container","gridLinesVisual","gridLine","children","callback","power","ceil","this$1","ref$2","minorOptions","_minorIntervalOptions","idx","minorStep","createAxisLabel","index","labelOptions","labelContext","text","axisLabelText","shouldRenderNote","pan","limitRange","pointsRange","endValue","scaleRange","cursor","abs","pointOffset","scaleToDelta","zoomRange","nextValue","difference","info","axisCrossingValue","throwNegativeValuesError","narrowRange","logMaxRemainder","Error","x","type","color","zIndex","_deferLabels"],"mappings":"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","sourcesContent":["\nimport Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\n\nimport createAxisTick from './utils/create-axis-tick';\nimport createAxisGridLine from './utils/create-axis-grid-line';\nimport limitCoordinate from './utils/limit-coordinate';\n\nimport { DEFAULT_PRECISION, BLACK } from '../common/constants';\nimport { deepExtend, defined, inArray, limitValue, round, setDefaultOptions, valueOrDefault } from '../common';\n\nvar DEFAULT_MAJOR_UNIT = 10;\nvar MIN_VALUE_RANGE = 1e-6;\n\nvar LogarithmicAxis = (function (Axis) {\n    function LogarithmicAxis(seriesMin, seriesMax, options, chartService) {\n\n        var axisOptions = deepExtend({ majorUnit: DEFAULT_MAJOR_UNIT, min: seriesMin, max: seriesMax }, options);\n        var base = axisOptions.majorUnit;\n        var autoMax = autoAxisMax(seriesMax, base);\n        var autoMin = autoAxisMin(seriesMin, seriesMax, axisOptions);\n        var range = initRange(autoMin, autoMax, axisOptions, options);\n\n        axisOptions.max = range.max;\n        axisOptions.min = range.min;\n        axisOptions.minorUnit = options.minorUnit || round(base - 1, DEFAULT_PRECISION);\n\n        Axis.call(this, axisOptions, chartService);\n\n        this.totalMin = defined(options.min) ? Math.min(autoMin, options.min) : autoMin;\n        this.totalMax = defined(options.max) ? Math.max(autoMax, options.max) : autoMax;\n        this.logMin = round(log(range.min, base), DEFAULT_PRECISION);\n        this.logMax = round(log(range.max, base), DEFAULT_PRECISION);\n        this.seriesMin = seriesMin;\n        this.seriesMax = seriesMax;\n\n        this.createLabels();\n    }\n\n    if ( Axis ) LogarithmicAxis.__proto__ = Axis;\n    LogarithmicAxis.prototype = Object.create( Axis && Axis.prototype );\n    LogarithmicAxis.prototype.constructor = LogarithmicAxis;\n\n    LogarithmicAxis.prototype.clone = function clone () {\n        return new LogarithmicAxis(\n            this.seriesMin,\n            this.seriesMax,\n            Object.assign({}, this.options),\n            this.chartService\n        );\n    };\n\n    LogarithmicAxis.prototype.startValue = function startValue () {\n        return this.options.min;\n    };\n\n    LogarithmicAxis.prototype.getSlot = function getSlot (a, b, limit) {\n        var ref = this;\n        var options = ref.options;\n        var logMin = ref.logMin;\n        var logMax = ref.logMax;\n        var base = options.majorUnit;\n        var min = options.min;\n        var max = options.max;\n        var ref$1 = this.lineInfo();\n        var axis = ref$1.axis;\n        var axisDir = ref$1.axisDir;\n        var lineBox = ref$1.lineBox;\n        var lineSize = ref$1.lineSize;\n        var lineStart = ref$1.lineStart;\n        var step = axisDir * (lineSize / (logMax - logMin));\n        var start = valueOrDefault(a, b || 1);\n        var end = valueOrDefault(b, a || 1);\n\n        if (start <= 0 || end <= 0) {\n            return null;\n        }\n\n        if (limit) {\n            start = limitValue(start, min, max);\n            end = limitValue(end, min, max);\n        }\n\n        start = log(start, base);\n        end = log(end, base);\n\n        var p1 = Math.min(start, end) - logMin;\n        var p2 = Math.max(start, end) - logMin;\n\n        var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n        slotBox[axis + 1] = limitCoordinate(lineStart + step * (axisDir > 0 ? p1 : p2));\n        slotBox[axis + 2] = limitCoordinate(lineStart + step * (axisDir > 0 ? p2 : p1));\n\n        return slotBox;\n    };\n\n    LogarithmicAxis.prototype.getValue = function getValue (point) {\n        var ref = this;\n        var options = ref.options;\n        var logMin = ref.logMin;\n        var logMax = ref.logMax;\n        var base = options.majorUnit;\n        var ref$1 = this.lineInfo();\n        var axis = ref$1.axis;\n        var axisDir = ref$1.axisDir;\n        var lineStart = ref$1.lineStart;\n        var lineSize = ref$1.lineSize;\n        var step = ((logMax - logMin) / lineSize);\n        var offset = axisDir * (point[axis] - lineStart);\n        var valueOffset = offset * step;\n\n        if (offset < 0 || offset > lineSize) {\n            return null;\n        }\n\n        var value = logMin + valueOffset;\n\n        return round(Math.pow(base, value), DEFAULT_PRECISION);\n    };\n\n    LogarithmicAxis.prototype.range = function range () {\n        var options = this.options;\n        return { min: options.min, max: options.max };\n    };\n\n    LogarithmicAxis.prototype.translateRange = function translateRange (delta) {\n        var ref = this;\n        var options = ref.options;\n        var logMin = ref.logMin;\n        var logMax = ref.logMax;\n        var reverse = options.reverse;\n        var vertical = options.vertical;\n        var base = options.majorUnit;\n        var lineBox = this.lineBox();\n        var size = vertical ? lineBox.height() : lineBox.width();\n        var scale = size / (logMax - logMin);\n        var offset = round(delta / scale, DEFAULT_PRECISION);\n\n        if ((vertical || reverse) && !(vertical && reverse )) {\n            offset = -offset;\n        }\n\n        return {\n            min: Math.pow(base, logMin + offset),\n            max: Math.pow(base, logMax + offset),\n            offset: offset\n        };\n    };\n\n    LogarithmicAxis.prototype.labelsCount = function labelsCount () {\n        var floorMax = Math.floor(this.logMax);\n        var count = Math.floor(floorMax - this.logMin) + 1;\n\n        return count;\n    };\n\n    LogarithmicAxis.prototype.getMajorTickPositions = function getMajorTickPositions () {\n        var ticks = [];\n\n        this.traverseMajorTicksPositions(function (position) {\n            ticks.push(position);\n        }, { step: 1, skip: 0 });\n\n        return ticks;\n    };\n\n    LogarithmicAxis.prototype.createTicks = function createTicks (lineGroup) {\n        var options = this.options;\n        var majorTicks = options.majorTicks;\n        var minorTicks = options.minorTicks;\n        var vertical = options.vertical;\n        var mirror = options.labels.mirror;\n        var lineBox = this.lineBox();\n        var ticks = [];\n        var tickLineOptions = {\n            // TODO\n            // _alignLines: options._alignLines,\n            vertical: vertical\n        };\n\n        function render(tickPosition, tickOptions) {\n            tickLineOptions.tickX = mirror ? lineBox.x2 : lineBox.x2 - tickOptions.size;\n            tickLineOptions.tickY = mirror ? lineBox.y1 - tickOptions.size : lineBox.y1;\n            tickLineOptions.position = tickPosition;\n\n            lineGroup.append(createAxisTick(tickLineOptions, tickOptions));\n        }\n\n        if (majorTicks.visible) {\n            this.traverseMajorTicksPositions(render, majorTicks);\n        }\n\n        if (minorTicks.visible) {\n            this.traverseMinorTicksPositions(render, minorTicks);\n        }\n\n        return ticks;\n    };\n\n    LogarithmicAxis.prototype.createGridLines = function createGridLines (altAxis) {\n        var options = this.options;\n        var minorGridLines = options.minorGridLines;\n        var majorGridLines = options.majorGridLines;\n        var vertical = options.vertical;\n        var lineBox = altAxis.lineBox();\n        var lineOptions = {\n            lineStart: lineBox[vertical ? \"x1\" : \"y1\"],\n            lineEnd: lineBox[vertical ? \"x2\" : \"y2\"],\n            vertical: vertical\n        };\n        var majorTicks = [];\n\n        var container = this.gridLinesVisual();\n        function render(tickPosition, gridLine) {\n            if (!inArray(tickPosition, majorTicks)) {\n                lineOptions.position = tickPosition;\n                container.append(createAxisGridLine(lineOptions, gridLine));\n\n                majorTicks.push(tickPosition);\n            }\n        }\n\n        if (majorGridLines.visible) {\n            this.traverseMajorTicksPositions(render, majorGridLines);\n        }\n\n        if (minorGridLines.visible) {\n            this.traverseMinorTicksPositions(render, minorGridLines);\n        }\n\n        return container.children;\n    };\n\n    LogarithmicAxis.prototype.traverseMajorTicksPositions = function traverseMajorTicksPositions (callback, tickOptions) {\n        var ref = this.lineInfo();\n        var lineStart = ref.lineStart;\n        var step = ref.step;\n        var ref$1 = this;\n        var logMin = ref$1.logMin;\n        var logMax = ref$1.logMax;\n\n        for (var power = Math.ceil(logMin) + tickOptions.skip; power <= logMax; power += tickOptions.step) {\n            var position = round(lineStart + step * (power - logMin), DEFAULT_PRECISION);\n            callback(position, tickOptions);\n        }\n    };\n\n    LogarithmicAxis.prototype.traverseMinorTicksPositions = function traverseMinorTicksPositions (callback, tickOptions) {\n        var this$1 = this;\n\n        var ref = this.options;\n        var min = ref.min;\n        var max = ref.max;\n        var minorUnit = ref.minorUnit;\n        var base = ref.majorUnit;\n        var ref$1 = this.lineInfo();\n        var lineStart = ref$1.lineStart;\n        var step = ref$1.step;\n        var ref$2 = this;\n        var logMin = ref$2.logMin;\n        var logMax = ref$2.logMax;\n        var start = Math.floor(logMin);\n\n        for (var power = start; power < logMax; power++) {\n            var minorOptions = this$1._minorIntervalOptions(power);\n            for (var idx = tickOptions.skip; idx < minorUnit; idx += tickOptions.step) {\n                var value = minorOptions.value + idx * minorOptions.minorStep;\n                if (value > max) {\n                    break;\n                }\n                if (value >= min) {\n                    var position = round(lineStart + step * (log(value, base) - logMin), DEFAULT_PRECISION);\n                    callback(position, tickOptions);\n                }\n            }\n        }\n    };\n\n    LogarithmicAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions, labelContext) {\n        var power = Math.ceil(this.logMin + index);\n        var value = Math.pow(this.options.majorUnit, power);\n        var text = this.axisLabelText(value, labelOptions, labelContext);\n\n        return new AxisLabel(value, text, index, null, labelOptions);\n    };\n\n    LogarithmicAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {\n        var range = this.range();\n        return range.min <= value && value <= range.max;\n    };\n\n    LogarithmicAxis.prototype.pan = function pan (delta) {\n        var range = this.translateRange(delta);\n        return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);\n    };\n\n    LogarithmicAxis.prototype.pointsRange = function pointsRange (start, end) {\n        var startValue = this.getValue(start);\n        var endValue = this.getValue(end);\n        var min = Math.min(startValue, endValue);\n        var max = Math.max(startValue, endValue);\n\n        return {\n            min: min,\n            max: max\n        };\n    };\n\n    LogarithmicAxis.prototype.scaleRange = function scaleRange (scale, cursor) {\n        var ref = this.options;\n        var base = ref.majorUnit;\n        var logMin = log(this.options.min, base);\n        var logMax = log(this.options.max, base);\n        var position = Math.abs(this.pointOffset(cursor));\n        var range = logMax - logMin;\n        var delta = this.scaleToDelta(scale, range);\n        var min = Math.pow(base, logMin + position * delta);\n        var max = Math.pow(base, logMax - (1 - position) * delta);\n\n        if (max - min < MIN_VALUE_RANGE) {\n            max = min + MIN_VALUE_RANGE;\n        }\n\n        return {\n            min: min,\n            max: max\n        };\n    };\n\n    LogarithmicAxis.prototype.zoomRange = function zoomRange (scale, cursor) {\n        var range = this.scaleRange(scale, cursor);\n        var ref = this;\n        var totalMin = ref.totalMin;\n        var totalMax = ref.totalMax;\n\n        return {\n            min: limitValue(range.min, totalMin, totalMax),\n            max: limitValue(range.max, totalMin, totalMax)\n        };\n    };\n\n    LogarithmicAxis.prototype._minorIntervalOptions = function _minorIntervalOptions (power) {\n        var ref = this.options;\n        var minorUnit = ref.minorUnit;\n        var base = ref.majorUnit;\n        var value = Math.pow(base, power);\n        var nextValue = Math.pow(base, power + 1);\n        var difference = nextValue - value;\n        var minorStep = difference / minorUnit;\n\n        return {\n            value: value,\n            minorStep: minorStep\n        };\n    };\n\n    LogarithmicAxis.prototype.lineInfo = function lineInfo () {\n        var info = Axis.prototype.lineInfo.call(this);\n        info.step = info.axisDir * (info.lineSize / (this.logMax - this.logMin));\n\n        return info;\n    };\n\n    return LogarithmicAxis;\n}(Axis));\n\nfunction initRange(autoMin, autoMax, axisOptions, options) {\n    var min = axisOptions.min;\n    var max = axisOptions.max;\n\n    if (defined(axisOptions.axisCrossingValue) && axisOptions.axisCrossingValue <= 0) {\n        throwNegativeValuesError();\n    }\n\n    if (!defined(options.max)) {\n        max = autoMax;\n    } else if (options.max <= 0) {\n        throwNegativeValuesError();\n    }\n\n    if (!defined(options.min)) {\n        min = autoMin;\n    } else if (options.min <= 0) {\n        throwNegativeValuesError();\n    }\n\n    return {\n        min: min,\n        max: max\n    };\n}\n\nfunction autoAxisMin(min, max, options) {\n    var base = options.majorUnit;\n    var autoMin = min;\n    if (min <= 0) {\n        autoMin = max <= 1 ? Math.pow(base, -2) : 1;\n    } else if (!options.narrowRange) {\n        autoMin = Math.pow(base, Math.floor(log(min, base)));\n    }\n    return autoMin;\n}\n\nfunction autoAxisMax(max, base) {\n    var logMaxRemainder = round(log(max, base), DEFAULT_PRECISION) % 1;\n    var autoMax;\n    if (max <= 0) {\n        autoMax = base;\n    } else if (logMaxRemainder !== 0 && (logMaxRemainder < 0.3 || logMaxRemainder > 0.9)) {\n        autoMax = Math.pow(base, log(max, base) + 0.2);\n    } else {\n        autoMax = Math.pow(base, Math.ceil(log(max, base)));\n    }\n\n    return autoMax;\n}\n\nfunction throwNegativeValuesError() {\n    throw new Error(\"Non positive values cannot be used for a logarithmic axis\");\n}\n\nfunction log(x, base) {\n    return Math.log(x) / Math.log(base);\n}\n\nsetDefaultOptions(LogarithmicAxis, {\n    type: \"log\",\n    majorUnit: DEFAULT_MAJOR_UNIT,\n    minorUnit: 1,\n    axisCrossingValue: 1,\n    vertical: true,\n    majorGridLines: {\n        visible: true,\n        width: 1,\n        color: BLACK\n    },\n    zIndex: 1,\n    _deferLabels: true\n});\n\nexport default LogarithmicAxis;\n"]},"metadata":{},"sourceType":"module"}
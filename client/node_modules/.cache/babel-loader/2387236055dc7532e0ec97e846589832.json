{"ast":null,"code":"import Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\nimport { BLACK, DEFAULT_PRECISION, COORD_PRECISION } from '../common/constants';\nimport { deepExtend, defined, limitValue, round, setDefaultOptions, valueOrDefault } from '../common';\nimport autoMajorUnit from './utils/auto-major-unit';\nimport autoAxisMin from './utils/auto-axis-min';\nimport autoAxisMax from './utils/auto-axis-max';\nimport floor from './utils/floor';\nimport ceil from './utils/ceil';\nimport limitCoordinate from './utils/limit-coordinate';\nvar MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);\n\nvar NumericAxis = function (Axis) {\n  function NumericAxis(seriesMin, seriesMax, options, chartService) {\n    Axis.call(this, Object.assign({}, options, {\n      seriesMin: seriesMin,\n      seriesMax: seriesMax\n    }), chartService);\n  }\n\n  if (Axis) NumericAxis.__proto__ = Axis;\n  NumericAxis.prototype = Object.create(Axis && Axis.prototype);\n  NumericAxis.prototype.constructor = NumericAxis;\n\n  NumericAxis.prototype.initUserOptions = function initUserOptions(options) {\n    var autoOptions = autoAxisOptions(options.seriesMin, options.seriesMax, options);\n    this.totalOptions = totalAxisOptions(autoOptions, options);\n    return axisOptions(autoOptions, options);\n  };\n\n  NumericAxis.prototype.initFields = function initFields() {\n    this.totalMin = this.totalOptions.min;\n    this.totalMax = this.totalOptions.max;\n    this.totalMajorUnit = this.totalOptions.majorUnit;\n    this.seriesMin = this.options.seriesMin;\n    this.seriesMax = this.options.seriesMax;\n  };\n\n  NumericAxis.prototype.clone = function clone() {\n    return new NumericAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);\n  };\n\n  NumericAxis.prototype.startValue = function startValue() {\n    return 0;\n  };\n\n  NumericAxis.prototype.range = function range() {\n    var options = this.options;\n    return {\n      min: options.min,\n      max: options.max\n    };\n  };\n\n  NumericAxis.prototype.getDivisions = function getDivisions(stepValue) {\n    if (stepValue === 0) {\n      return 1;\n    }\n\n    var options = this.options;\n    var range = options.max - options.min;\n    return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;\n  };\n\n  NumericAxis.prototype.getTickPositions = function getTickPositions(unit, skipUnit) {\n    var options = this.options;\n    var ref = this.lineInfo();\n    var axisDir = ref.axisDir;\n    var axisOrigin = ref.axisOrigin;\n    var lineBox = ref.lineBox;\n    var lineSize = ref.lineSize;\n    var range = options.max - options.min;\n    var scale = lineSize / range;\n    var step = unit * scale;\n    var divisions = this.getDivisions(unit);\n    var positions = [];\n    var pos = lineBox[axisOrigin];\n    var skipStep = 0;\n\n    if (skipUnit) {\n      skipStep = skipUnit / unit;\n    }\n\n    for (var idx = 0; idx < divisions; idx++) {\n      if (idx % skipStep !== 0) {\n        positions.push(round(pos, COORD_PRECISION));\n      }\n\n      pos = pos + step * axisDir;\n    }\n\n    return positions;\n  };\n\n  NumericAxis.prototype.getMajorTickPositions = function getMajorTickPositions() {\n    return this.getTickPositions(this.options.majorUnit);\n  };\n\n  NumericAxis.prototype.getMinorTickPositions = function getMinorTickPositions() {\n    return this.getTickPositions(this.options.minorUnit);\n  };\n\n  NumericAxis.prototype.getSlot = function getSlot(a, b, limit) {\n    if (limit === void 0) limit = false;\n    var options = this.options;\n    var ref = this.lineInfo();\n    var axis = ref.axis;\n    var axisDir = ref.axisDir;\n    var lineBox = ref.lineBox;\n    var lineSize = ref.lineSize;\n    var lineStart = ref.lineStart;\n    var step = axisDir * (lineSize / (options.max - options.min));\n    var start = valueOrDefault(a, b || 0);\n    var end = valueOrDefault(b, a || 0);\n\n    if (limit) {\n      start = limitValue(start, options.min, options.max);\n      end = limitValue(end, options.min, options.max);\n    }\n\n    var p1 = Math.min(start, end) - options.min;\n    var p2 = Math.max(start, end) - options.min;\n    var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n    slotBox[axis + 1] = limitCoordinate(lineStart + step * (axisDir > 0 ? p1 : p2));\n    slotBox[axis + 2] = limitCoordinate(lineStart + step * (axisDir > 0 ? p2 : p1));\n    return slotBox;\n  };\n\n  NumericAxis.prototype.getValue = function getValue(point) {\n    var options = this.options;\n    var max = Number(options.max);\n    var min = Number(options.min);\n    var offset = this.pointOffset(point);\n    var valueOffset = offset * (max - min);\n\n    if (offset < 0 || offset > 1) {\n      return null;\n    }\n\n    var value = min + valueOffset;\n    return round(value, DEFAULT_PRECISION);\n  };\n\n  NumericAxis.prototype.translateRange = function translateRange(delta) {\n    var options = this.options;\n    var vertical = options.vertical;\n    var reverse = options.reverse;\n    var max = options.max;\n    var min = options.min;\n    var ref = this.lineInfo();\n    var lineSize = ref.lineSize;\n    var range = max - min;\n    var scale = lineSize / range;\n    var offset = round(delta / scale, DEFAULT_PRECISION);\n\n    if ((vertical || reverse) && !(vertical && reverse)) {\n      offset = -offset;\n    }\n\n    return {\n      min: min + offset,\n      max: max + offset,\n      offset: offset\n    };\n  };\n\n  NumericAxis.prototype.labelsCount = function labelsCount() {\n    return this.getDivisions(this.options.majorUnit);\n  };\n\n  NumericAxis.prototype.createAxisLabel = function createAxisLabel(index, labelOptions, labelContext) {\n    var options = this.options;\n    var value = round(options.min + index * options.majorUnit, DEFAULT_PRECISION);\n    var text = this.axisLabelText(value, labelOptions, labelContext);\n    return new AxisLabel(value, text, index, null, labelOptions);\n  };\n\n  NumericAxis.prototype.shouldRenderNote = function shouldRenderNote(value) {\n    var range = this.range();\n    return range.min <= value && value <= range.max;\n  };\n\n  NumericAxis.prototype.pan = function pan(delta) {\n    var range = this.translateRange(delta);\n    return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);\n  };\n\n  NumericAxis.prototype.pointsRange = function pointsRange(start, end) {\n    var startValue = this.getValue(start);\n    var endValue = this.getValue(end);\n    var min = Math.min(startValue, endValue);\n    var max = Math.max(startValue, endValue);\n\n    if (this.isValidRange(min, max)) {\n      return {\n        min: min,\n        max: max\n      };\n    }\n  };\n\n  NumericAxis.prototype.scaleRange = function scaleRange(scale, cursor) {\n    var position = Math.abs(this.pointOffset(cursor));\n    var range = this.options.max - this.options.min;\n    var delta = this.scaleToDelta(scale, range);\n    var minDelta = position * delta;\n    var maxDelta = (1 - position) * delta;\n    var min = round(this.options.min + minDelta, DEFAULT_PRECISION);\n    var max = round(this.options.max - maxDelta, DEFAULT_PRECISION);\n\n    if (max - min < MIN_VALUE_RANGE) {\n      max = min + MIN_VALUE_RANGE;\n    }\n\n    return {\n      min: min,\n      max: max\n    };\n  };\n\n  NumericAxis.prototype.zoomRange = function zoomRange(scale, cursor) {\n    var ref = this;\n    var totalMin = ref.totalMin;\n    var totalMax = ref.totalMax;\n    var range = this.scaleRange(scale, cursor);\n    return {\n      min: limitValue(range.min, totalMin, totalMax),\n      max: limitValue(range.max, totalMin, totalMax),\n      narrowRange: false\n    };\n  };\n\n  NumericAxis.prototype.isValidRange = function isValidRange(min, max) {\n    return max - min > MIN_VALUE_RANGE;\n  };\n\n  return NumericAxis;\n}(Axis);\n\nfunction autoAxisOptions(seriesMin, seriesMax, options) {\n  var narrowRange = options.narrowRange;\n  var autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);\n  var autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);\n  var majorUnit = autoMajorUnit(autoMin, autoMax);\n  var autoOptions = {\n    majorUnit: majorUnit\n  };\n\n  if (options.roundToMajorUnit !== false) {\n    if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {\n      autoMin -= majorUnit;\n    }\n\n    if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {\n      autoMax += majorUnit;\n    }\n  }\n\n  autoOptions.min = floor(autoMin, majorUnit);\n  autoOptions.max = ceil(autoMax, majorUnit);\n  return autoOptions;\n}\n\nfunction totalAxisOptions(autoOptions, options) {\n  return {\n    min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,\n    max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,\n    majorUnit: autoOptions.majorUnit\n  };\n}\n\nfunction clearNullValues(options, fields) {\n  for (var idx = 0; idx < fields.length; idx++) {\n    var field = fields[idx];\n\n    if (options[field] === null) {\n      options[field] = undefined;\n    }\n  }\n}\n\nfunction axisOptions(autoOptions, userOptions) {\n  var options = userOptions;\n  var userSetMin, userSetMax;\n\n  if (userOptions) {\n    clearNullValues(userOptions, ['min', 'max']);\n    userSetMin = defined(userOptions.min);\n    userSetMax = defined(userOptions.max);\n    var userSetLimits = userSetMin || userSetMax;\n\n    if (userSetLimits) {\n      if (userOptions.min === userOptions.max) {\n        if (userOptions.min > 0) {\n          userOptions.min = 0;\n        } else {\n          userOptions.max = 1;\n        }\n      }\n    }\n\n    if (userOptions.majorUnit) {\n      autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);\n      autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);\n    } else if (userSetLimits) {\n      options = deepExtend(autoOptions, userOptions); // Determine an auto major unit after min/max have been set\n\n      autoOptions.majorUnit = autoMajorUnit(options.min, options.max);\n    }\n  }\n\n  autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;\n  var result = deepExtend(autoOptions, options);\n\n  if (result.min >= result.max) {\n    if (userSetMin && !userSetMax) {\n      result.max = result.min + result.majorUnit;\n    } else if (!userSetMin && userSetMax) {\n      result.min = result.max - result.majorUnit;\n    }\n  }\n\n  return result;\n}\n\nfunction remainderClose(value, divisor, ratio) {\n  var remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);\n  var threshold = divisor * (1 - ratio);\n  return remainder === 0 || remainder > threshold;\n}\n\nsetDefaultOptions(NumericAxis, {\n  type: \"numeric\",\n  min: 0,\n  max: 1,\n  vertical: true,\n  majorGridLines: {\n    visible: true,\n    width: 1,\n    color: BLACK\n  },\n  labels: {\n    format: \"#.####################\"\n  },\n  zIndex: 1\n});\nexport default NumericAxis;","map":{"version":3,"sources":["/home/meryem/repos/Movie_Trend_Visualizer/client/node_modules/@progress/kendo-charts/dist/es/core/numeric-axis.js"],"names":["Axis","AxisLabel","Box","BLACK","DEFAULT_PRECISION","COORD_PRECISION","deepExtend","defined","limitValue","round","setDefaultOptions","valueOrDefault","autoMajorUnit","autoAxisMin","autoAxisMax","floor","ceil","limitCoordinate","MIN_VALUE_RANGE","Math","pow","NumericAxis","seriesMin","seriesMax","options","chartService","call","Object","assign","__proto__","prototype","create","constructor","initUserOptions","autoOptions","autoAxisOptions","totalOptions","totalAxisOptions","axisOptions","initFields","totalMin","min","totalMax","max","totalMajorUnit","majorUnit","clone","startValue","range","getDivisions","stepValue","getTickPositions","unit","skipUnit","ref","lineInfo","axisDir","axisOrigin","lineBox","lineSize","scale","step","divisions","positions","pos","skipStep","idx","push","getMajorTickPositions","getMinorTickPositions","minorUnit","getSlot","a","b","limit","axis","lineStart","start","end","p1","p2","slotBox","x1","y1","getValue","point","Number","offset","pointOffset","valueOffset","value","translateRange","delta","vertical","reverse","labelsCount","createAxisLabel","index","labelOptions","labelContext","text","axisLabelText","shouldRenderNote","pan","limitRange","pointsRange","endValue","isValidRange","scaleRange","cursor","position","abs","scaleToDelta","minDelta","maxDelta","zoomRange","narrowRange","autoMin","autoMax","roundToMajorUnit","remainderClose","clearNullValues","fields","length","field","undefined","userOptions","userSetMin","userSetMax","userSetLimits","result","divisor","ratio","remainder","threshold","type","majorGridLines","visible","width","color","labels","format","zIndex"],"mappings":"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","sourcesContent":["\nimport Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\n\nimport { BLACK, DEFAULT_PRECISION, COORD_PRECISION } from '../common/constants';\nimport { deepExtend, defined, limitValue, round, setDefaultOptions, valueOrDefault } from '../common';\n\nimport autoMajorUnit from './utils/auto-major-unit';\nimport autoAxisMin from './utils/auto-axis-min';\nimport autoAxisMax from './utils/auto-axis-max';\nimport floor from './utils/floor';\nimport ceil from './utils/ceil';\nimport limitCoordinate from './utils/limit-coordinate';\n\nvar MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);\n\nvar NumericAxis = (function (Axis) {\n    function NumericAxis(seriesMin, seriesMax, options, chartService) {\n        Axis.call(this, Object.assign({}, options, {\n            seriesMin: seriesMin,\n            seriesMax: seriesMax\n        }), chartService);\n    }\n\n    if ( Axis ) NumericAxis.__proto__ = Axis;\n    NumericAxis.prototype = Object.create( Axis && Axis.prototype );\n    NumericAxis.prototype.constructor = NumericAxis;\n\n    NumericAxis.prototype.initUserOptions = function initUserOptions (options) {\n        var autoOptions = autoAxisOptions(options.seriesMin, options.seriesMax, options);\n        this.totalOptions = totalAxisOptions(autoOptions, options);\n\n        return axisOptions(autoOptions, options);\n    };\n\n    NumericAxis.prototype.initFields = function initFields () {\n        this.totalMin = this.totalOptions.min;\n        this.totalMax = this.totalOptions.max;\n        this.totalMajorUnit = this.totalOptions.majorUnit;\n        this.seriesMin = this.options.seriesMin;\n        this.seriesMax = this.options.seriesMax;\n    };\n\n    NumericAxis.prototype.clone = function clone () {\n        return new NumericAxis(\n            this.seriesMin,\n            this.seriesMax,\n            Object.assign({}, this.options),\n            this.chartService\n        );\n    };\n\n    NumericAxis.prototype.startValue = function startValue () {\n        return 0;\n    };\n\n    NumericAxis.prototype.range = function range () {\n        var options = this.options;\n        return { min: options.min, max: options.max };\n    };\n\n    NumericAxis.prototype.getDivisions = function getDivisions (stepValue) {\n        if (stepValue === 0) {\n            return 1;\n        }\n\n        var options = this.options;\n        var range = options.max - options.min;\n\n        return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;\n    };\n\n    NumericAxis.prototype.getTickPositions = function getTickPositions (unit, skipUnit) {\n        var options = this.options;\n        var ref = this.lineInfo();\n        var axisDir = ref.axisDir;\n        var axisOrigin = ref.axisOrigin;\n        var lineBox = ref.lineBox;\n        var lineSize = ref.lineSize;\n        var range = options.max - options.min;\n        var scale = lineSize / range;\n        var step = unit * scale;\n        var divisions = this.getDivisions(unit);\n        var positions = [];\n        var pos = lineBox[axisOrigin];\n        var skipStep = 0;\n\n        if (skipUnit) {\n            skipStep = skipUnit / unit;\n        }\n\n        for (var idx = 0; idx < divisions; idx++) {\n            if (idx % skipStep !== 0) {\n                positions.push(round(pos, COORD_PRECISION));\n            }\n\n            pos = pos + step * axisDir;\n        }\n\n        return positions;\n    };\n\n    NumericAxis.prototype.getMajorTickPositions = function getMajorTickPositions () {\n        return this.getTickPositions(this.options.majorUnit);\n    };\n\n    NumericAxis.prototype.getMinorTickPositions = function getMinorTickPositions () {\n        return this.getTickPositions(this.options.minorUnit);\n    };\n\n    NumericAxis.prototype.getSlot = function getSlot (a, b, limit) {\n        if ( limit === void 0 ) limit = false;\n\n        var options = this.options;\n        var ref = this.lineInfo();\n        var axis = ref.axis;\n        var axisDir = ref.axisDir;\n        var lineBox = ref.lineBox;\n        var lineSize = ref.lineSize;\n        var lineStart = ref.lineStart;\n        var step = axisDir * (lineSize / (options.max - options.min));\n\n        var start = valueOrDefault(a, b || 0);\n        var end = valueOrDefault(b, a || 0);\n\n        if (limit) {\n            start = limitValue(start, options.min, options.max);\n            end = limitValue(end, options.min, options.max);\n        }\n\n        var p1 = Math.min(start, end) - options.min;\n        var p2 = Math.max(start, end) - options.min;\n\n        var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n        slotBox[axis + 1] = limitCoordinate(lineStart + step * (axisDir > 0 ? p1 : p2));\n        slotBox[axis + 2] = limitCoordinate(lineStart + step * (axisDir > 0 ? p2 : p1));\n\n        return slotBox;\n    };\n\n    NumericAxis.prototype.getValue = function getValue (point) {\n        var options = this.options;\n        var max = Number(options.max);\n        var min = Number(options.min);\n        var offset = this.pointOffset(point);\n        var valueOffset = offset * (max - min);\n\n        if (offset < 0 || offset > 1) {\n            return null;\n        }\n\n        var value = min + valueOffset;\n        return round(value, DEFAULT_PRECISION);\n    };\n\n    NumericAxis.prototype.translateRange = function translateRange (delta) {\n        var options = this.options;\n        var vertical = options.vertical;\n        var reverse = options.reverse;\n        var max = options.max;\n        var min = options.min;\n        var ref = this.lineInfo();\n        var lineSize = ref.lineSize;\n        var range = max - min;\n        var scale = lineSize / range;\n        var offset = round(delta / scale, DEFAULT_PRECISION);\n\n        if ((vertical || reverse) && !(vertical && reverse )) {\n            offset = -offset;\n        }\n\n        return {\n            min: min + offset,\n            max: max + offset,\n            offset: offset\n        };\n    };\n\n    NumericAxis.prototype.labelsCount = function labelsCount () {\n        return this.getDivisions(this.options.majorUnit);\n    };\n\n    NumericAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions, labelContext) {\n        var options = this.options;\n        var value = round(options.min + (index * options.majorUnit), DEFAULT_PRECISION);\n        var text = this.axisLabelText(value, labelOptions, labelContext);\n\n        return new AxisLabel(value, text, index, null, labelOptions);\n    };\n\n    NumericAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {\n        var range = this.range();\n        return range.min <= value && value <= range.max;\n    };\n\n    NumericAxis.prototype.pan = function pan (delta) {\n        var range = this.translateRange(delta);\n        return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);\n    };\n\n    NumericAxis.prototype.pointsRange = function pointsRange (start, end) {\n        var startValue = this.getValue(start);\n        var endValue = this.getValue(end);\n        var min = Math.min(startValue, endValue);\n        var max = Math.max(startValue, endValue);\n\n        if (this.isValidRange(min, max)) {\n            return {\n                min: min,\n                max: max\n            };\n        }\n    };\n\n    NumericAxis.prototype.scaleRange = function scaleRange (scale, cursor) {\n        var position = Math.abs(this.pointOffset(cursor));\n        var range = this.options.max - this.options.min;\n        var delta = this.scaleToDelta(scale, range);\n        var minDelta = position * delta;\n        var maxDelta = (1 - position) * delta;\n        var min = round(this.options.min + minDelta, DEFAULT_PRECISION);\n        var max = round(this.options.max - maxDelta, DEFAULT_PRECISION);\n\n        if (max - min < MIN_VALUE_RANGE) {\n            max = min + MIN_VALUE_RANGE;\n        }\n\n        return {\n            min: min,\n            max: max\n        };\n    };\n\n    NumericAxis.prototype.zoomRange = function zoomRange (scale, cursor) {\n        var ref = this;\n        var totalMin = ref.totalMin;\n        var totalMax = ref.totalMax;\n        var range = this.scaleRange(scale, cursor);\n\n        return {\n            min: limitValue(range.min, totalMin, totalMax),\n            max: limitValue(range.max, totalMin, totalMax),\n            narrowRange: false\n        };\n    };\n\n    NumericAxis.prototype.isValidRange = function isValidRange (min, max) {\n        return max - min > MIN_VALUE_RANGE;\n    };\n\n    return NumericAxis;\n}(Axis));\n\nfunction autoAxisOptions(seriesMin, seriesMax, options) {\n    var narrowRange = options.narrowRange;\n\n    var autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);\n    var autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);\n\n    var majorUnit = autoMajorUnit(autoMin, autoMax);\n    var autoOptions = {\n        majorUnit: majorUnit\n    };\n\n    if (options.roundToMajorUnit !== false) {\n        if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {\n            autoMin -= majorUnit;\n        }\n\n        if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {\n            autoMax += majorUnit;\n        }\n    }\n\n    autoOptions.min = floor(autoMin, majorUnit);\n    autoOptions.max = ceil(autoMax, majorUnit);\n\n    return autoOptions;\n}\n\nfunction totalAxisOptions(autoOptions, options) {\n    return {\n        min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,\n        max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,\n        majorUnit: autoOptions.majorUnit\n    };\n}\n\nfunction clearNullValues(options, fields) {\n    for (var idx = 0; idx < fields.length; idx++) {\n        var field = fields[idx];\n        if (options[field] === null) {\n            options[field] = undefined;\n        }\n    }\n}\n\nfunction axisOptions(autoOptions, userOptions) {\n    var options = userOptions;\n    var userSetMin, userSetMax;\n\n    if (userOptions) {\n        clearNullValues(userOptions, [ 'min', 'max' ]);\n\n        userSetMin = defined(userOptions.min);\n        userSetMax = defined(userOptions.max);\n\n        var userSetLimits = userSetMin || userSetMax;\n\n        if (userSetLimits) {\n            if (userOptions.min === userOptions.max) {\n                if (userOptions.min > 0) {\n                    userOptions.min = 0;\n                } else {\n                    userOptions.max = 1;\n                }\n            }\n        }\n\n        if (userOptions.majorUnit) {\n            autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);\n            autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);\n        } else if (userSetLimits) {\n            options = deepExtend(autoOptions, userOptions);\n\n            // Determine an auto major unit after min/max have been set\n            autoOptions.majorUnit = autoMajorUnit(options.min, options.max);\n        }\n    }\n\n    autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;\n\n    var result = deepExtend(autoOptions, options);\n    if (result.min >= result.max) {\n        if (userSetMin && !userSetMax) {\n            result.max = result.min + result.majorUnit;\n        } else if (!userSetMin && userSetMax) {\n            result.min = result.max - result.majorUnit;\n        }\n    }\n\n    return result;\n}\n\nfunction remainderClose(value, divisor, ratio) {\n    var remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);\n    var threshold = divisor * (1 - ratio);\n\n    return remainder === 0 || remainder > threshold;\n}\n\nsetDefaultOptions(NumericAxis, {\n    type: \"numeric\",\n    min: 0,\n    max: 1,\n    vertical: true,\n    majorGridLines: {\n        visible: true,\n        width: 1,\n        color: BLACK\n    },\n    labels: {\n        format: \"#.####################\"\n    },\n    zIndex: 1\n});\n\nexport default NumericAxis;\n"]},"metadata":{},"sourceType":"module"}